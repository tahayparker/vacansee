<source type="local_folder" path=".">

<file path=".env">
SUPABASE_URL="https://cmbjdxzzanrpxqpdglzg.supabase.co"
SUPABASE_ANON_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNtYmpkeHp6YW5ycHhxcGRnbHpnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM3NTIwODgsImV4cCI6MjA1OTMyODA4OH0.LSp5O0OcuByt5XcDdb-njRTC7Ug2NrNdKVKI8MBSKaU"
SUPABASE_SERVICE_ROLE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNtYmpkeHp6YW5ycHhxcGRnbHpnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0Mzc1MjA4OCwiZXhwIjoyMDU5MzI4MDg4fQ.taaYMdJKRoA8je2n-rnbA6zy-CijVRTiIZHmNKAXhsU"

NEXT_PUBLIC_SUPABASE_URL="https://cmbjdxzzanrpxqpdglzg.supabase.co"
NEXT_PUBLIC_SUPABASE_ANON_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNtYmpkeHp6YW5ycHhxcGRnbHpnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM3NTIwODgsImV4cCI6MjA1OTMyODA4OH0.LSp5O0OcuByt5XcDdb-njRTC7Ug2NrNdKVKI8MBSKaU"

# Connect to Supabase via connection pooling.
DATABASE_URL="postgresql://postgres.cmbjdxzzanrpxqpdglzg:blWkaPsZDJtuIoEq@aws-0-ap-northeast-1.pooler.supabase.com:6543/postgres?pgbouncer=true"

# Direct connection to the database. Used for migrations.
DIRECT_URL="postgresql://postgres.cmbjdxzzanrpxqpdglzg:blWkaPsZDJtuIoEq@aws-0-ap-northeast-1.pooler.supabase.com:5432/postgres"

</file>

<file path=".github\workflows\update-timetable.yml">
name: Update Timetable Data

on:
  schedule:
    # Run every 4 hours
    - cron: "0 */4 * * *"
  workflow_dispatch: # Allow manual trigger

jobs:
  update-timetable:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install supabase cloudscraper beautifulsoup4 python-dotenv httpx postgrest

      - name: Set up Supabase environment variables
        env:
          SUPABASE_URL_SECRET: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_SECRET: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Setting Supabase environment variables..."
          if [ -z "$SUPABASE_URL_SECRET" ]; then echo "Error: SUPABASE_URL secret not set."; exit 1; fi
          if [ -z "$SUPABASE_SERVICE_KEY_SECRET" ]; then echo "Error: SUPABASE_SERVICE_ROLE_KEY secret not set."; exit 1; fi
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
          echo "Supabase variables configured."

      - name: Generate new timetable CSV data (Step 1)
        id: scrape # Add id for potential future reference if needed
        run: |
          echo "Running timetable scraper..."
          python scripts/scrape_timetable.py --output public/classes.csv
          exit_code=$?
          echo "Scraper finished with exit code $exit_code."
          # Fail the job only if exit code is non-zero AND not 1
          if [ $exit_code -ne 0 ] && [ $exit_code -ne 1 ]; then
            echo "::error::Scraper failed with critical exit code $exit_code!"
            exit $exit_code
          fi
          # If exit code was 1, the workflow continues

      - name: Compare Generated CSV with Repository CSV
        id: check_csv_changes
        run: |
          echo "Comparing generated classes.csv with repository version..."
          if [ ! -f public/classes.csv ]; then
            echo "::warning::Generated public/classes.csv not found. Skipping comparison and commit."
            # Set output to false if file doesn't exist, prevent commit attempt
            echo "csv_changed=false" >> $GITHUB_OUTPUT
          else
            # Stage the potentially new/modified file to compare against HEAD
            git add public/classes.csv
            if git diff --quiet HEAD -- public/classes.csv; then
              echo "No changes detected in classes.csv"
              echo "csv_changed=false" >> $GITHUB_OUTPUT
              # Unstage if no changes found
              git reset public/classes.csv
            else
              echo "Changes detected in classes.csv"
              echo "csv_changed=true" >> $GITHUB_OUTPUT
              # Keep the file staged for commit
            fi
          fi

      - name: Commit and push CSV changes
        # Only commit if changes were actually detected
        if: steps.check_csv_changes.outputs.csv_changed == 'true'
        run: |
          echo "Committing and pushing classes.csv changes..."
          git config user.name "Taha Parker via GitHub Actions"
          git config user.email "98612931+tahayparker@users.noreply.github.com"
          # File should already be staged from comparison step
          git commit -m "Update timetable CSV data [skip ci]"
          git push

      - name: Upload Timetable to DB (Step 2)
        id: upload # Add id
        # This step runs regardless of CSV changes now
        run: |
          echo "Running timetable upload script..."
          python scripts/upload_timetable.py
          exit_code=$?
          echo "Upload script finished with exit code $exit_code."
          # Fail the job only if exit code is non-zero AND not 1
          if [ $exit_code -ne 0 ] && [ $exit_code -ne 1 ]; then
            echo "::error::Upload script failed with critical exit code $exit_code!"
            exit $exit_code
          fi

      - name: Generate Schedule JSON (Step 3)
        id: generate_json # Add id
        # This step runs regardless of CSV changes now
        run: |
          echo "Running schedule generation script..."
          python scripts/generate_schedule.py
          exit_code=$?
          echo "Schedule generation finished with exit code $exit_code."
          # Fail the job only if exit code is non-zero AND not 1
          if [ $exit_code -ne 0 ] && [ $exit_code -ne 1 ]; then
            echo "::error::Schedule generation failed with critical exit code $exit_code!"
            exit $exit_code
          fi
          # Always assume we might need to commit the JSON after generation
          echo "should_check_commit_json=true" >> $GITHUB_OUTPUT

      - name: Commit and push JSON changes
        # Check if the previous step indicated we should check for commits
        if: steps.generate_json.outputs.should_check_commit_json == 'true'
        run: |
          echo "Checking for scheduleData.json changes..."
          # Stage the potentially new/modified JSON file
          git add public/scheduleData.json
          # Check if there are staged changes to commit before committing
          if ! git diff --staged --quiet; then
            echo "Changes detected in scheduleData.json. Committing..."
            git config user.name "Taha Parker via GitHub Actions"
            git config user.email "98612931+tahayparker@users.noreply.github.com"
            git commit -m "Update timetable JSON data [skip ci]"
            git push
          else
            echo "No JSON changes to commit (file might be identical or generation failed before check)."
          fi

      - name: Cleanup # Optional: Add any other cleanup if needed
        run: |
          echo "Workflow finished."
          # rm -f some_other_temp_file.log # Example

</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.vercel

</file>

<file path=".vercel\project.json">
{"projectId":"prj_A0wYOqfsEBietAMMWur3pmUj167k","orgId":"team_CfHyqXfYIlvikuScJYIgdbll"}
</file>

<file path=".vercel\README.txt">
> Why do I have a folder named ".vercel" in my project?
The ".vercel" folder is created when you link a directory to a Vercel project.

> What does the "project.json" file contain?
The "project.json" file contains:
- The ID of the Vercel project that you linked ("projectId")
- The ID of the user or team your Vercel project is owned by ("orgId")

> Should I commit the ".vercel" folder?
No, you should not share the ".vercel" folder with anyone.
Upon creation, it will be automatically added to your ".gitignore" file.

</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/api-reference/config/typescript for more information.

</file>

<file path="next.config.ts">
// next.config.mjs (or next.config.ts)
import { NextConfig } from "next"; // Import type if using TypeScript

/** @type {import('next').NextConfig} */
const nextConfig: NextConfig = {
  // Use NextConfig type
  reactStrictMode: true,
  // Add other configurations if you have them

  async redirects() {
    return [
      // --- Redirects for "/available-now" ---
      {
        source: "/CurrentlyAvailable",
        destination: "/available-now",
        permanent: true,
      },
      {
        source: "/availablenow",
        destination: "/available-now",
        permanent: true,
      },
      {
        source: "/AvailableNow",
        destination: "/available-now",
        permanent: true,
      },
      {
        source: "/currentlyavailable",
        destination: "/available-now",
        permanent: true,
      },
      { source: "/available", destination: "/available-now", permanent: true }, // Common shortening
      { source: "/now", destination: "/available-now", permanent: true }, // Common shortening

      // --- Redirects for "/check" ---
      { source: "/CheckAvailability", destination: "/check", permanent: true },
      { source: "/checkAvailability", destination: "/check", permanent: true }, // camelCase
      { source: "/checkavailability", destination: "/check", permanent: true },
      { source: "/check-availability", destination: "/check", permanent: true },
      { source: "/availability", destination: "/check", permanent: true }, // Could redirect here too
      { source: "/search", destination: "/check", permanent: true }, // Based on icon

      // --- Redirects for "/rooms" ---
      { source: "/RoomDetails", destination: "/rooms", permanent: true },
      { source: "/roomdetails", destination: "/rooms", permanent: true },
      { source: "/details", destination: "/rooms", permanent: true }, // Common shortening
      { source: "/deets", destination: "/rooms", permanent: true }, // Possible alternative
      { source: "/room", destination: "/rooms", permanent: true }, // Singular to plural

      // --- Redirects for "/graph" (Optional additions) ---
      { source: "/GraphPage", destination: "/graph", permanent: true }, // From old example maybe
      { source: "/graphs", destination: "/graph", permanent: true }, // Plural to singular

      // --- Redirects for "/available-soon" (Optional additions) ---
      {
        source: "/AvailableSoon",
        destination: "/available-soon",
        permanent: true,
      },
      {
        source: "/availablesoon",
        destination: "/available-soon",
        permanent: true,
      },
      { source: "/soon", destination: "/available-soon", permanent: true },

      // --- Redirect for root variations (Optional but good) ---
      { source: "/home", destination: "/", permanent: true },
      { source: "/index", destination: "/", permanent: true },
      { source: "/test", destination: "/", permanent: true },

      // Add more redirects as needed following this pattern
    ];
  },
};

// Use default export for .mjs or .ts
export default nextConfig;

</file>

<file path="package.json">
{
  "name": "vacansee",
  "version": "2.0.0",
  "private": true,
  "scripts": {
    "dev": "prisma generate && next dev --turbopack",
    "build": "prisma generate && next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@prisma/client": "^6.6.0",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.6",
    "@radix-ui/react-popover": "^1.1.7",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.49.4",
    "@vercel/analytics": "^1.5.0",
    "@vercel/speed-insights": "^1.2.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "cookie": "^1.0.2",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.6.3",
    "fuse.js": "^7.1.0",
    "js-cookie": "^3.0.5",
    "lucide-react": "^0.487.0",
    "luxon": "^3.6.1",
    "next": "15.2.4",
    "react": "^18",
    "react-dom": "^18",
    "supabase": "^2.22.4",
    "tailwind-merge": "^3.2.0",
    "tw-animate-css": "^1.2.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/cookie": "^0.6.0",
    "@types/js-cookie": "^3.0.6",
    "@types/luxon": "^3.6.2",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "prisma": "^6.6.0",
    "tailwindcss": "^4",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5"
  }
}

</file>

<file path="public\classes.csv">
SubCode,Class,Day,StartTime,EndTime,Room,Teacher
ACCY121,Lecture,Wednesday,16:30,18:30,0.17-Lecture Theatre,Khairul Kamarudin
ACCY121,Lecture,Friday,14:30,16:30,0.17-Lecture Theatre,Khairul Kamarudin
ACCY121,Tutorial,Wednesday,13:30,15:30,4.48-Classroom B,Yusra Ghani
ACCY121,Tutorial,Wednesday,15:30,17:30,5.18-Classroom A,Yusra Ghani
ACCY121,Tutorial,Friday,10:30,12:30,6.39-Classroom A,Alfiya Thaha
ACCY121,Tutorial,Friday,10:30,12:30,4.467-Classroom A 4.46 & 4.47,Avneet Kaur
ACCY121,Tutorial,Friday,14:30,16:30,5.12-Informal Classroom,Alfiya Thaha
ACCY121,Tutorial,Tuesday,16:30,18:30,6.33-Classroom B,Alfiya Thaha
ACCY121,Tutorial,Friday,08:30,10:30,5.10-Classroom B,Avneet Kaur
ACCY121,Tutorial,Wednesday,09:30,11:30,5.19-Classroom A,Avneet Kaur
ACCY121,Tutorial,Wednesday,12:30,14:30,3.46-Classroom A,Avneet Kaur
ACCY121,Tutorial,Thursday,12:30,14:30,5.18-Classroom A,Marryam Yasir
ACCY121,Tutorial,Wednesday,10:30,12:30,5.17-Classroom VC,Marryam Yasir
ACCY121,Tutorial,Thursday,10:30,12:30,6.39-Classroom A,Marryam Yasir
ACCY121,Tutorial,Friday,08:30,10:30,6.38-Classroom B,Deepshikha Vyas
ACCY121,Tutorial,Friday,10:30,12:30,6.38-Classroom B,Deepshikha Vyas
ACCY200,Lecture,Monday,11:30,14:30,5.134-Classroom A 5.13 & 5.14,Khairul Kamarudin
ACCY200,Lecture,Wednesday,12:30,15:30,6.32-Classroom B,Khairul Kamarudin
ACCY200,Tutorial,Monday,14:30,16:30,6.39-Classroom A,Afrah Siddiqui
ACCY200,Tutorial,Wednesday,09:30,11:30,5.10-Classroom B,Nada Tchantchane
ACCY200,Tutorial,Thursday,12:30,14:30,4.50-Classroom B,Yusra Ghani
ACCY200,Tutorial,Tuesday,15:30,17:30,4.48-Classroom B,Yusra Ghani
ACCY200,Tutorial,Tuesday,12:30,14:30,6.33-Classroom B,Yusra Ghani
ACCY211,Lecture,Thursday,10:30,12:30,4.44-Classroom B,Namrata Gupta
ACCY211,Tutorial,Thursday,14:30,16:30,4.50-Classroom B,Yusra Ghani
ACCY211,Tutorial,Monday,13:30,15:30,4.48-Classroom B,Yusra Ghani
ACCY211,Tutorial,Monday,15:30,17:30,4.48-Classroom B,Yusra Ghani
ACCY211,Tutorial,Thursday,13:30,15:30,6.28-Seminar/Tutorial,Namrata Gupta
ACCY231,Lecture,Tuesday,15:30,17:30,4.44-Classroom B,Muhabie Mengistu
ACCY231,Tutorial,Thursday,08:30,10:30,4.42-Computer Lab (Single Screen),Afrah Siddiqui
ACCY231,Tutorial,Thursday,12:30,14:30,6.40-Computer Lab Single,Muhabie Mengistu
ACCY231,Tutorial,Friday,08:30,10:30,1.52-Computer Lab Single,Afrah Siddiqui
ACCY231,Tutorial,Monday,12:30,14:30,2.50-Computer Lab Single,Afrah Siddiqui
ACCY342,Lecture,Tuesday,12:30,14:30,4.467-Classroom A 4.46 & 4.47,Muhabie Mengistu
ACCY342,Tutorial,Thursday,10:30,12:30,3.42-Classroom B,Muhabie Mengistu
ACCY342,Tutorial,Wednesday,08:30,10:30,6.39-Classroom A,Marryam Yasir
ARA101,Tutorial A,Monday,11:30,13:30,4.50-Classroom B,Nancy El Sobkey
ARA101,Tutorial A,Monday,14:30,16:30,5.12-Informal Classroom,Nancy El Sobkey
ARA101,Tutorial A,Monday,09:30,11:30,4.45-Classroom B,Katia Freywat
ARA101,Tutorial A,Monday,12:30,14:30,6.38-Classroom B,Katia Freywat
ARA101,Tutorial A,Monday,08:30,10:30,4.48-Classroom B,Nancy El Sobkey
ARA101,Tutorial A,Monday,15:30,17:30,5.18-Classroom A,Katia Freywat
ARA101,Tutorial B,Wednesday,11:30,13:30,3.48-Classroom B,Nancy El Sobkey
ARA101,Tutorial B,Wednesday,14:30,16:30,5.12-Informal Classroom,Nancy El Sobkey
ARA101,Tutorial B,Thursday,09:30,11:30,5.10-Classroom B,Katia Freywat
ARA101,Tutorial B,Thursday,12:30,14:30,6.39-Classroom A,Katia Freywat
ARA101,Tutorial B,Wednesday,08:30,10:30,6.32-Classroom B,Nancy El Sobkey
ARA101,Tutorial B,Friday,10:30,12:30,4.50-Classroom B,Katia Freywat
BALA202,Lecture,Wednesday,13:30,15:30,4.44-Classroom B,Prithvi Bhattacharya
BALA202,Tutorial,Monday,08:30,10:30,1.52-Computer Lab Single,Nikita Kirplani
BALA202,Tutorial,Wednesday,08:30,10:30,1.52-Computer Lab Single,Nikita Kirplani
BALA202,Tutorial,Monday,10:30,12:30,1.52-Computer Lab Single,Nikita Kirplani
BALA202,Tutorial,Tuesday,12:30,14:30,6.40-Computer Lab Single,Nikita Kirplani
BALA301,Lecture,Wednesday,11:30,13:30,5.11-Classroom B,Yiyang Bian
BALA301,Tutorial,Monday,12:30,14:30,4.42-Computer Lab (Single Screen),Nada Tchantchane
BALA301,Tutorial,Wednesday,13:30,15:30,4.42-Computer Lab (Single Screen),Yiyang Bian
BALA301,Tutorial,Wednesday,16:30,18:30,4.42-Computer Lab (Single Screen),Khaled Eid
BCM110,Lecture,Monday,08:30,10:30,6.345-Classroom A 6.34 & 6.35,Michael Mallory
BCM110,Tutorial,Monday,12:30,14:30,6.33-Classroom B,Negin Chabook
BCM110,Tutorial,Tuesday,14:30,16:30,6.33-Classroom B,Negin Chabook
BCM110,Tutorial,Wednesday,14:30,16:30,3.46-Classroom A,Negin Chabook
BCM111,Lecture,Tuesday,10:30,12:30,0.17-Lecture Theatre,Deborah Hardt
BCM111,Tutorial,Wednesday,15:30,17:30,6.32-Classroom B,Roaa Ataya
BCM111,Tutorial,Wednesday,13:30,15:30,6.29-Multipurpose - Teaching & Research,Roaa Ataya
BCM111,Tutorial,Tuesday,13:30,15:30,6.345-Classroom A 6.34 & 6.35,Roaa Ataya
BCM111,Tutorial,Tuesday,15:30,17:30,6.39-Classroom A,Roaa Ataya
BCM111,Tutorial,Thursday,12:30,14:30,3.42-Classroom B,Roaa Ataya
BCM111,Tutorial,Thursday,14:30,16:30,5.17-Classroom VC,Roaa Ataya
BCM212,Lecture,Monday,10:30,12:30,6.32-Classroom B,Michael Mallory
BCM212,Tutorial,Wednesday,12:30,14:30,6.38-Classroom B,Rahaf Nassif
BCM212,Tutorial,Tuesday,08:30,10:30,3.42-Classroom B,Rahaf Nassif
BCM212,Tutorial,Monday,13:30,15:30,6.32-Classroom B,Elizaveta Vartanian
BCM212,Tutorial,Wednesday,08:30,10:30,3.48-Classroom B,Rahaf Nassif
BCM212,Tutorial,Wednesday,12:30,14:30,4.45-Classroom B,Elizaveta Vartanian
BCM214,Lecture,Tuesday,08:30,10:30,6.32-Classroom B,Ludmil Trenkov
BCM214,Tutorial,Tuesday,11:30,13:30,3.46-Classroom A,Mohammad Alkayyali
BCM214,Tutorial,Tuesday,13:30,15:30,3.48-Classroom B,Mohammad Alkayyali
BCM214,Tutorial,Thursday,10:30,12:30,6.33-Classroom B,Mohammad Alkayyali
BCM214,Tutorial,Thursday,08:30,10:30,6.39-Classroom A,Mohammad Alkayyali
BCM217,Lecture,Monday,08:30,10:30,4.44-Classroom B,Aaron Anderson
BCM217,Tutorial,Wednesday,10:30,12:30,5.15-MAC Lab,Daniel Chedid
BCM217,Tutorial,Friday,16:30,18:30,5.15-MAC Lab,Daniel Chedid
BCM302,Lecture,Monday,12:30,14:30,4.51-Tutorial Room,Michael Mallory
BCM302,Tutorial,Monday,14:30,16:30,4.51-Tutorial Room,Jad Yammine
BCM303,Lecture,Tuesday,10:30,12:30,6.39-Classroom A,Michael Mallory
BCM303,Tutorial,Tuesday,12:30,14:30,5.13-Classroom A,Negin Chabook
BCM303,Tutorial,Tuesday,12:30,14:30,5.14-Classroom A,Rahaf Nassif
BCM304,Lecture,Monday,10:30,12:30,4.48-Classroom B,Aaron Anderson
BCM304,Tutorial,Wednesday,14:30,16:30,5.15-MAC Lab,Daniel Chedid
BCM312,Lecture,Thursday,11:30,13:30,5.11-Classroom B,Deborah Hardt
BCM312,Tutorial,Thursday,14:30,16:30,6.39-Classroom A,Deborah Hardt
BCM320,Lecture,Wednesday,10:30,12:30,5.12-Informal Classroom,Deborah Hardt
BCM320,Tutorial,Wednesday,12:30,14:30,5.15-MAC Lab,Daniel Chedid
BCM320,Tutorial,Friday,14:30,16:30,5.15-MAC Lab,Daniel Chedid
BUS030,Lecture,Tuesday,14:30,16:30,5.11-Classroom B,Avneet Kaur
BUS030,Lecture,Tuesday,14:30,16:30,5.11-Classroom B,Nikita Kirplani
BUS030,Lecture,Tuesday,14:30,16:30,5.11-Classroom B,Sadaf Khurshid
BUS030,Tutorial,Wednesday,08:30,10:30,3.46-Classroom A,Donia Rawashdeh
BUS030,Tutorial,Wednesday,08:30,10:30,3.46-Classroom A,Lobna Mansour
BUS030,Tutorial,Wednesday,08:30,10:30,3.46-Classroom A,Raghida Araji
BUS030,Tutorial,Thursday,14:30,16:30,3.46-Classroom A,Donia Rawashdeh
BUS030,Tutorial,Thursday,14:30,16:30,3.46-Classroom A,Lobna Mansour
BUS030,Tutorial,Thursday,14:30,16:30,3.46-Classroom A,Raghida Araji
BUS121,Lecture,Monday,10:30,12:30,0.17-Lecture Theatre,Noor Rizvi
BUS121,Lecture,Tuesday,10:30,12:30,6.32-Classroom B,Noor Rizvi
BUS121,Lecture,Tuesday,08:30,10:30,6.345-Classroom A 6.34 & 6.35,Noor Rizvi
BUS121,Tutorial,Wednesday,11:30,13:30,3.42-Classroom B,Nikita Kirplani
BUS121,Tutorial,Monday,15:30,17:30,4.52-Classroom A,Sabreen Wahbeh
BUS121,Tutorial,Tuesday,15:30,17:30,4.50-Classroom B,Sabreen Wahbeh
BUS121,Tutorial,Wednesday,13:30,15:30,3.42-Classroom B,Nikita Kirplani
BUS121,Tutorial,Monday,16:30,18:30,6.28-Seminar/Tutorial,Ayush Mishra
BUS121,Tutorial,Tuesday,15:30,17:30,5.18-Classroom A,Sherwin Fernandes
BUS121,Tutorial,Monday,13:30,15:30,4.45-Classroom B,Sabreen Wahbeh
BUS121,Tutorial,Tuesday,13:30,15:30,4.48-Classroom B,Sabreen Wahbeh
BUS121,Tutorial,Monday,14:30,16:30,6.33-Classroom B,Ayush Mishra
BUS121,Tutorial,Thursday,12:30,14:30,3.45-Classroom B,Ayush Mishra
BUS121,Tutorial,Thursday,14:30,16:30,3.45-Classroom B,Ayush Mishra
BUS121,Tutorial,Tuesday,14:30,16:30,6.38-Classroom B,Shehnaz Al-Helo
BUS121,Tutorial,Thursday,12:30,14:30,4.52-Classroom A,Nada Tchantchane
BUS121,Tutorial,Thursday,14:30,16:30,4.52-Classroom A,Nada Tchantchane
BUS200,Lecture,Monday,12:30,14:30,5.11-Classroom B,Mohan Guruswamy
BUS200,Tutorial,Monday,14:30,16:30,5.10-Classroom B,Nazanin Tahsili
BUS200,Tutorial,Tuesday,14:30,16:30,4.52-Classroom A,Nazanin Tahsili
BUS200,Tutorial,Tuesday,16:30,18:30,4.52-Classroom A,Nazanin Tahsili
BUS331,Lecture,Tuesday,08:30,10:30,5.11-Classroom B,Jaeyoung Cho
BUS331,Tutorial,Tuesday,10:30,12:30,4.467-Classroom A 4.46 & 4.47,Jaeyoung Cho
BUS331,Tutorial,Tuesday,10:30,12:30,6.33-Classroom B,Sadaf Khurshid
BUS331,Tutorial,Tuesday,10:30,12:30,4.50-Classroom B,Shehnaz Al-Helo
BUS391,Lecture,Wednesday,13:30,15:30,6.28-Seminar/Tutorial,Flevy Lasrado
BUS391,Tutorial,Wednesday,15:30,17:30,6.28-Seminar/Tutorial,Flevy Lasrado
BUS980,Lecture,Friday,18:00,22:00,6.30-Multipurpose - Teaching & Research,Khairul Kamarudin
CIVL201,Computer Lab,Thursday,13:30,14:30,2.50-Computer Lab Single,Thahsin Saidarakath
CIVL201,Lecture,Thursday,08:30,11:30,0.201-Concrete / Geo Tech Lab,Kamal Jaafar
CIVL201,Tutorial,Thursday,11:30,12:30,6.36-Computer Lab (Single Screen),Kamal Jaafar
CIVL245,Computer Lab,Tuesday,10:30,12:30,0.201-Concrete / Geo Tech Lab,Karol Sikora
CIVL245,Computer Lab,Tuesday,10:30,12:30,0.201-Concrete / Geo Tech Lab,Mohammad AlRifai
CIVL245,Computer Lab,Tuesday,12:30,14:30,0.201-Concrete / Geo Tech Lab,Karol Sikora
CIVL245,Computer Lab,Tuesday,12:30,14:30,0.201-Concrete / Geo Tech Lab,Mohammad AlRifai
CIVL245,Lecture,Monday,08:30,12:30,3.46-Classroom A,Karol Sikora
CIVL245,Tutorial/Lab,Tuesday,12:30,14:30,0.201-Concrete / Geo Tech Lab,Karol Sikora
CIVL245,Tutorial/Lab,Tuesday,12:30,14:30,0.201-Concrete / Geo Tech Lab,Mohammad AlRifai
CIVL245,Tutorial/Lab,Tuesday,10:30,12:30,0.201-Concrete / Geo Tech Lab,Karol Sikora
CIVL245,Tutorial/Lab,Tuesday,10:30,12:30,0.201-Concrete / Geo Tech Lab,Mohammad AlRifai
CIVL458,Lecture,Wednesday,18:00,20:00,6.33-Classroom B,Kamal Jaafar
CIVL458,Lecture,Wednesday,18:00,20:00,6.33-Classroom B,Sana Amir
CIVL458,Tutorial/Lab,Wednesday,15:30,17:30,2.51-Project Lab,Sana Amir
CIVL458,Tutorial/Lab,Wednesday,15:30,17:30,2.51-Project Lab,Kamal Jaafar
CIVL462,Computer Lab,Wednesday,11:30,15:30,0.201-Concrete / Geo Tech Lab,Thahsin Saidarakath
CIVL462,Lecture,Monday,14:30,16:30,0.201-Concrete / Geo Tech Lab,Stephen Wilkinson
CIVL462,Tutorial,Tuesday,10:30,12:30,3.45-Classroom B,Thahsin Saidarakath
CIVL491,Lecture,Tuesday,08:30,10:30,6.36-Computer Lab (Single Screen),Sana Amir
CIVL491,Workshop,Thursday,12:30,16:30,6.36-Computer Lab (Single Screen),Sana Amir
CIVL491,Workshop,Thursday,12:30,16:30,6.36-Computer Lab (Single Screen),Abdulqader Hasan
CIVL958,Lecture,Wednesday,18:00,22:00,6.33-Classroom B,Sana Amir
CIVL958,Lecture,Wednesday,18:00,22:00,6.33-Classroom B,Kamal Jaafar
CONV000,Tutorial,Wednesday,13:30,14:30,5.08-Seminar / Tutorial,Alison Webster
CONV000,Tutorial,Wednesday,13:30,14:30,5.08-Seminar / Tutorial,Sabina Ashraf
CSCI203,Computer Lab,Friday,10:30,12:30,1.52-Computer Lab Single,Abdellatif Tchantchane
CSCI203,Computer Lab,Monday,10:30,12:30,2.50-Computer Lab Single,Sara Majeed
CSCI203,Computer Lab,Friday,08:30,10:30,6.36-Computer Lab (Single Screen),Sara Majeed
CSCI203,Computer Lab,Friday,10:30,12:30,4.42-Computer Lab (Single Screen),Sara Majeed
CSCI203,Lecture A,Wednesday,12:30,14:30,6.345-Classroom A 6.34 & 6.35,Abdellatif Tchantchane
CSCI203,Lecture B,Thursday,14:30,16:30,5.11-Classroom B,Abdellatif Tchantchane
CSCI251,Computer Lab,Tuesday,12:30,14:30,6.36-Computer Lab (Single Screen),Shahrul Sah
CSCI251,Computer Lab,Tuesday,18:30,20:30,2.50-Computer Lab Single,Shahrul Sah
CSCI251,Computer Lab,Tuesday,16:30,18:30,3.47-Game Dev Lab Dual Screens,Shahrul Sah
CSCI251,Computer Lab,Thursday,12:30,14:30,1.52-Computer Lab Single,Shahrul Sah
CSCI251,Computer Lab,Friday,10:30,12:30,6.36-Computer Lab (Single Screen),Omar Daoudi
CSCI251,Computer Lab,Tuesday,14:30,16:30,6.40-Computer Lab Single,Omar Daoudi
CSCI251,Computer Lab,Friday,16:30,18:30,6.40-Computer Lab Single,Omar Daoudi
CSCI251,Computer Lab,Tuesday,10:30,12:30,6.36-Computer Lab (Single Screen),Omar Daoudi
CSCI251,Computer Lab,Tuesday,18:30,20:30,3.47-Game Dev Lab Dual Screens,Sonia Dagou
CSCI251,Computer Lab,Tuesday,14:30,16:30,1.52-Computer Lab Single,Sonia Dagou
CSCI251,Computer Lab,Thursday,10:30,12:30,4.42-Computer Lab (Single Screen),Sonia Dagou
CSCI251,Computer Lab,Tuesday,12:30,14:30,1.52-Computer Lab Single,Sonia Dagou
CSCI251,Computer Lab,Tuesday,14:30,16:30,4.42-Computer Lab (Single Screen),Obaid Ullah
CSCI251,Computer Lab,Wednesday,12:30,14:30,6.40-Computer Lab Single,Obaid Ullah
CSCI251,Computer Lab,Wednesday,14:30,16:30,1.52-Computer Lab Single,Obaid Ullah
CSCI251,Lecture A,Monday,08:30,10:30,0.17-Lecture Theatre,HC Lim
CSCI251,Lecture A,Monday,12:30,14:30,0.17-Lecture Theatre,Abdellatif Tchantchane
CSCI251,Lecture A,Monday,16:30,18:30,0.17-Lecture Theatre,Abdellatif Tchantchane
CSCI251,Lecture B,Wednesday,08:30,10:30,0.17-Lecture Theatre,HC Lim
CSCI251,Lecture B,Tuesday,12:30,14:30,0.17-Lecture Theatre,Abdellatif Tchantchane
CSCI251,Lecture B,Tuesday,16:30,18:30,0.17-Lecture Theatre,Abdellatif Tchantchane
CSCI262,Computer Lab,Thursday,08:30,10:30,3.52-Computer Lab (Network),Tina Thomas
CSCI262,Computer Lab,Friday,10:30,12:30,3.52-Computer Lab (Network),Suzan Sallam
CSCI262,Computer Lab,Wednesday,12:30,14:30,3.52-Computer Lab (Network),Suzan Sallam
CSCI262,Computer Lab,Monday,10:30,12:30,3.52-Computer Lab (Network),Suzan Sallam
CSCI262,Computer Lab,Monday,08:30,10:30,3.52-Computer Lab (Network),Tina Thomas
CSCI262,Computer Lab,Friday,14:30,16:30,3.52-Computer Lab (Network),Suzan Sallam
CSCI262,Computer Lab,Thursday,14:30,16:30,3.52-Computer Lab (Network),Tina Thomas
CSCI262,Lecture A,Wednesday,10:30,12:30,0.17-Lecture Theatre,Mouhannad Al Attar
CSCI262,Lecture B,Thursday,10:30,12:30,0.17-Lecture Theatre,Mouhannad Al Attar
CSCI323,Computer Lab,Monday,10:30,12:30,6.40-Computer Lab Single,Obaid Ullah
CSCI323,Computer Lab,Monday,08:30,10:30,6.40-Computer Lab Single,Obaid Ullah
CSCI323,Computer Lab,Friday,14:30,16:30,4.42-Computer Lab (Single Screen),Abdullah El Nokiti
CSCI323,Computer Lab,Friday,10:30,12:30,5.15-MAC Lab,Abdullah El Nokiti
CSCI323,Computer Lab,Thursday,08:30,10:30,3.47-Game Dev Lab Dual Screens,Abdullah El Nokiti
CSCI323,Computer Lab,Thursday,10:30,12:30,1.52-Computer Lab Single,Abdullah El Nokiti
CSCI323,Lecture A,Tuesday,14:30,16:30,4.467-Classroom A 4.46 & 4.47,Patrick Mukala
CSCI323,Lecture A,Tuesday,16:30,18:30,5.134-Classroom A 5.13 & 5.14,Patrick Mukala
CSCI323,Lecture B,Wednesday,11:30,13:30,5.134-Classroom A 5.13 & 5.14,Patrick Mukala
CSCI323,Lecture B,Wednesday,14:30,16:30,3.44-Classroom B,Patrick Mukala
CSCI346,Computer Lab,Monday,12:30,14:30,3.47-Game Dev Lab Dual Screens,HC Lim
CSCI346,Lecture,Tuesday,12:30,14:30,6.39-Classroom A,HC Lim
CSCI346,Tutorial,Monday,11:30,12:30,5.12-Informal Classroom,HC Lim
CSCI350,Lecture,Tuesday,10:30,11:30,6.345-Classroom A 6.34 & 6.35,Halim Khelalfa
CSCI369,Computer Lab,Tuesday,14:30,16:30,3.52-Computer Lab (Network),Mohamed Hamouda
CSCI369,Computer Lab,Tuesday,16:30,18:30,3.52-Computer Lab (Network),Tina Thomas
CSCI369,Computer Lab,Monday,12:30,14:30,3.52-Computer Lab (Network),Manoj Kumar
CSCI369,Computer Lab,Tuesday,10:30,12:30,3.52-Computer Lab (Network),Mohamed Hamouda
CSCI369,Computer Lab,Friday,16:30,18:30,3.52-Computer Lab (Network),Suzan Sallam
CSCI369,Computer Lab,Wednesday,16:30,18:30,3.52-Computer Lab (Network),Suzan Sallam
CSCI369,Computer Lab,Monday,14:30,16:30,3.52-Computer Lab (Network),Manoj Kumar
CSCI369,Lecture,Tuesday,08:30,10:30,0.17-Lecture Theatre,Manoj Kumar
CSCI369,Tutorial,Monday,14:30,15:30,3.48-Classroom B,Tina Thomas
CSCI369,Tutorial,Monday,11:30,12:30,3.42-Classroom B,Tina Thomas
CSCI369,Tutorial,Tuesday,14:30,15:30,4.50-Classroom B,Tina Thomas
CSCI369,Tutorial,Monday,13:30,14:30,5.17-Classroom VC,Suzan Sallam
CSCI369,Tutorial,Monday,09:30,10:30,6.38-Classroom B,Suzan Sallam
CSCI369,Tutorial,Monday,13:30,14:30,5.10-Classroom B,Tina Thomas
CSCI369,Tutorial,Wednesday,15:30,16:30,4.52-Classroom A,Suzan Sallam
CSCI388,Computer Lab,Thursday,12:30,14:30,3.47-Game Dev Lab Dual Screens,Tauqeer Faiz
CSCI388,Computer Lab,Thursday,10:30,12:30,3.47-Game Dev Lab Dual Screens,Tauqeer Faiz
CSCI388,Lecture,Wednesday,10:30,12:30,6.39-Classroom A,George Tsaramirsis
CSCI388,Tutorial,Tuesday,15:30,16:30,3.48-Classroom B,Tauqeer Faiz
CSCI388,Tutorial,Tuesday,16:30,17:30,3.48-Classroom B,Tauqeer Faiz
CSCI435,Computer Lab,Wednesday,14:30,16:30,3.47-Game Dev Lab Dual Screens,Asma Damankesh
CSCI435,Computer Lab,Wednesday,16:30,18:30,3.47-Game Dev Lab Dual Screens,George Tsaramirsis
CSCI435,Computer Lab,Thursday,14:30,16:30,1.52-Computer Lab Single,George Tsaramirsis
CSCI435,Computer Lab,Monday,12:30,14:30,6.36-Computer Lab (Single Screen),Asma Damankesh
CSCI435,Lecture,Thursday,10:30,12:30,5.134-Classroom A 5.13 & 5.14,George Tsaramirsis
CSCI435,Tutorial,Monday,10:30,11:30,5.10-Classroom B,Asma Damankesh
CSCI435,Tutorial,Wednesday,11:30,12:30,4.48-Classroom B,Asma Damankesh
CSCI435,Tutorial,Monday,15:30,16:30,5.134-Classroom A 5.13 & 5.14,Asma Damankesh
CSCI435,Tutorial,Monday,09:30,10:30,5.18-Classroom A,Asma Damankesh
CSIT040,Lecture,Thursday,10:30,14:30,4.467-Classroom A 4.46 & 4.47,Tina Thomas
CSIT040,Lecture,Thursday,10:30,14:30,4.467-Classroom A 4.46 & 4.47,Mai El Barachi
CSIT040,Lecture,Thursday,10:30,14:30,4.467-Classroom A 4.46 & 4.47,Kiyan Afsari
CSIT114,Computer Lab,Friday,14:30,16:30,6.36-Computer Lab (Single Screen),Zeenath Khan
CSIT114,Computer Lab,Thursday,10:30,12:30,2.50-Computer Lab Single,Zeenath Khan
CSIT114,Computer Lab,Monday,12:30,14:30,6.40-Computer Lab Single,Sara Azeem Khan
CSIT114,Computer Lab,Monday,16:30,18:30,6.40-Computer Lab Single,Sara Majeed
CSIT114,Computer Lab,Wednesday,16:30,18:30,6.40-Computer Lab Single,Obaid Ullah
CSIT114,Computer Lab,Wednesday,14:30,16:30,6.40-Computer Lab Single,Omar Daoudi
CSIT114,Computer Lab,Friday,14:30,16:30,1.52-Computer Lab Single,Pradnya Bhagwat
CSIT114,Lecture,Friday,09:30,12:30,0.17-Lecture Theatre,Zeenath Khan
CSIT115,Computer Lab,Tuesday,12:30,14:30,3.52-Computer Lab (Network),Asma Damankesh
CSIT115,Computer Lab,Monday,16:30,18:30,2.50-Computer Lab Single,Asma Damankesh
CSIT115,Computer Lab,Tuesday,14:30,16:30,3.47-Game Dev Lab Dual Screens,Asma Damankesh
CSIT115,Computer Lab,Wednesday,12:30,14:30,6.36-Computer Lab (Single Screen),Asma Damankesh
CSIT115,Computer Lab,Tuesday,16:30,18:30,2.50-Computer Lab Single,Nkqubela Ruxwana
CSIT115,Lecture,Thursday,09:30,12:30,3.44-Classroom B,Nkqubela Ruxwana
CSIT121,Computer Lab,Tuesday,16:30,18:30,6.36-Computer Lab (Single Screen),Omar Daoudi
CSIT121,Computer Lab,Wednesday,10:30,12:30,6.40-Computer Lab Single,Omar Daoudi
CSIT121,Computer Lab,Wednesday,16:30,18:30,1.52-Computer Lab Single,Omar Daoudi
CSIT121,Computer Lab,Wednesday,08:30,10:30,2.50-Computer Lab Single,Asma Damankesh
CSIT121,Computer Lab,Tuesday,08:30,10:30,6.40-Computer Lab Single,Asma Damankesh
CSIT121,Lecture,Thursday,13:30,16:30,3.44-Classroom B,Farhad Oroumchian
CSIT127,Computer Lab,Wednesday,14:30,16:30,2.50-Computer Lab Single,Pradnya Bhagwat
CSIT127,Computer Lab,Friday,10:30,12:30,2.50-Computer Lab Single,Pradnya Bhagwat
CSIT127,Computer Lab,Wednesday,14:30,16:30,3.52-Computer Lab (Network),Akanksha Singh
CSIT127,Computer Lab,Tuesday,14:30,16:30,2.50-Computer Lab Single,Akanksha Singh
CSIT127,Computer Lab,Thursday,08:30,10:30,2.50-Computer Lab Single,Akanksha Singh
CSIT127,Lecture,Monday,10:30,12:30,3.44-Classroom B,Manoj Kumar
CSIT127,Tutorial,Wednesday,08:30,09:30,6.33-Classroom B,Pradnya Bhagwat
CSIT127,Tutorial,Monday,13:30,14:30,6.28-Seminar/Tutorial,Akanksha Singh
CSIT127,Tutorial,Tuesday,13:30,14:30,5.10-Classroom B,Akanksha Singh
CSIT127,Tutorial,Wednesday,13:30,14:30,3.48-Classroom B,Akanksha Singh
CSIT127,Tutorial,Tuesday,16:30,17:30,4.45-Classroom B,Akanksha Singh
CSIT128,Computer Lab,Wednesday,12:30,14:30,3.47-Game Dev Lab Dual Screens,Shahrul Sah
CSIT128,Computer Lab,Monday,16:30,18:30,3.47-Game Dev Lab Dual Screens,Shahrul Sah
CSIT128,Computer Lab,Monday,18:30,20:30,3.47-Game Dev Lab Dual Screens,Shahrul Sah
CSIT128,Computer Lab,Thursday,10:30,12:30,5.15-MAC Lab,Shahrul Sah
CSIT128,Computer Lab,Monday,14:30,16:30,3.47-Game Dev Lab Dual Screens,Shahrul Sah
CSIT128,Computer Lab,Monday,18:30,20:30,1.52-Computer Lab Single,Sonia Dagou
CSIT128,Computer Lab,Wednesday,10:30,12:30,3.47-Game Dev Lab Dual Screens,Sonia Dagou
CSIT128,Computer Lab,Monday,16:30,18:30,1.52-Computer Lab Single,Sonia Dagou
CSIT128,Computer Lab,Monday,14:30,16:30,2.50-Computer Lab Single,Sara Azeem Khan
CSIT128,Computer Lab,Monday,18:30,20:30,6.36-Computer Lab (Single Screen),Sara Azeem Khan
CSIT128,Computer Lab,Monday,12:30,14:30,1.52-Computer Lab Single,Deepa Keshavamurthy
CSIT128,Computer Lab,Monday,14:30,16:30,4.42-Computer Lab (Single Screen),Deepa Keshavamurthy
CSIT128,Computer Lab,Tuesday,12:30,14:30,4.42-Computer Lab (Single Screen),Tauqeer Faiz
CSIT128,Computer Lab,Tuesday,10:30,12:30,4.42-Computer Lab (Single Screen),Tauqeer Faiz
CSIT128,Computer Lab,Monday,13:30,15:30,5.15-MAC Lab,Sonia Dagou
CSIT128,Computer Lab,Tuesday,10:30,12:30,3.47-Game Dev Lab Dual Screens,Sara Majeed
CSIT128,Computer Lab,Friday,08:30,10:30,4.42-Computer Lab (Single Screen),Shahrul Sah
CSIT128,Lecture,Monday,14:30,16:30,0.17-Lecture Theatre,Haitham Yaish
CSIT128,Lecture,Tuesday,14:30,16:30,0.17-Lecture Theatre,Haitham Yaish
CSIT128,Lecture,Monday,10:30,12:30,4.44-Classroom B,Soly Mathew
CSIT128,Lecture,Tuesday,08:30,10:30,4.44-Classroom B,Soly Mathew
CSIT128,Tutorial,Wednesday,15:30,16:30,3.45-Classroom B,Tauqeer Faiz
CSIT128,Tutorial,Wednesday,13:30,14:30,5.134-Classroom A 5.13 & 5.14,Tauqeer Faiz
CSIT128,Tutorial,Monday,16:30,17:30,6.33-Classroom B,Deepa Keshavamurthy
CSIT128,Tutorial,Wednesday,13:30,14:30,4.51-Tutorial Room,Sara Majeed
CSIT128,Tutorial,Monday,14:30,15:30,6.38-Classroom B,Sara Majeed
CSIT128,Tutorial,Monday,13:30,14:30,4.52-Classroom A,Sara Majeed
CSIT128,Tutorial,Tuesday,10:30,11:30,3.42-Classroom B,Haitham Yaish
CSIT128,Tutorial,Monday,16:30,17:30,3.46-Classroom A,Haitham Yaish
CSIT128,Tutorial,Tuesday,11:30,12:30,4.52-Classroom A,Haitham Yaish
CSIT128,Tutorial,Monday,12:30,13:30,4.48-Classroom B,Haitham Yaish
CSIT128,Tutorial,Tuesday,12:30,13:30,4.52-Classroom A,Haitham Yaish
CSIT128,Tutorial,Tuesday,11:30,12:30,5.17-Classroom VC,Soly Mathew
CSIT128,Tutorial,Tuesday,12:30,13:30,5.17-Classroom VC,Soly Mathew
CSIT128,Tutorial,Tuesday,10:30,11:30,5.12-Informal Classroom,Soly Mathew
CSIT128,Tutorial,Monday,13:30,14:30,3.48-Classroom B,Soly Mathew
CSIT128,Tutorial,Monday,12:30,13:30,3.46-Classroom A,Soly Mathew
CSIT128,Tutorial,Tuesday,13:30,14:30,4.52-Classroom A,Soly Mathew
CSIT128,Tutorial,Monday,12:30,13:30,3.42-Classroom B,Abdullah El Nokiti
CSIT314,Computer Lab,Wednesday,18:30,20:30,3.47-Game Dev Lab Dual Screens,Deepa Keshavamurthy
CSIT314,Computer Lab,Tuesday,12:30,14:30,3.47-Game Dev Lab Dual Screens,Deepa Keshavamurthy
CSIT314,Computer Lab,Tuesday,10:30,12:30,6.40-Computer Lab Single,Deepa Keshavamurthy
CSIT314,Computer Lab,Thursday,14:30,16:30,3.47-Game Dev Lab Dual Screens,Sara Azeem Khan
CSIT314,Computer Lab,Wednesday,14:30,16:30,6.36-Computer Lab (Single Screen),Sara Azeem Khan
CSIT314,Computer Lab,Wednesday,18:30,20:30,6.40-Computer Lab Single,Tauqeer Faiz
CSIT314,Computer Lab,Monday,14:30,16:30,1.52-Computer Lab Single,Tauqeer Faiz
CSIT314,Computer Lab,Monday,14:30,16:30,6.40-Computer Lab Single,Obaid Ullah
CSIT314,Computer Lab,Friday,14:30,16:30,3.47-Game Dev Lab Dual Screens,Omar Daoudi
CSIT314,Computer Lab,Friday,08:30,10:30,2.50-Computer Lab Single,Deepa Keshavamurthy
CSIT314,Computer Lab,Wednesday,12:30,14:30,2.50-Computer Lab Single,Pradnya Bhagwat
CSIT314,Computer Lab,Wednesday,10:30,12:30,2.50-Computer Lab Single,Pradnya Bhagwat
CSIT314,Lecture,Wednesday,12:30,14:30,0.17-Lecture Theatre,Nkqubela Ruxwana
CSIT314,Lecture,Wednesday,14:30,16:30,0.17-Lecture Theatre,Nkqubela Ruxwana
CSIT314,Lecture,Thursday,14:30,16:30,6.32-Classroom B,Nkqubela Ruxwana
CSIT314,Tutorial,Monday,13:30,14:30,3.46-Classroom A,Tauqeer Faiz
CSIT314,Tutorial,Tuesday,13:30,14:30,5.12-Informal Classroom,Tina Thomas
CSIT314,Tutorial,Wednesday,15:30,16:30,4.48-Classroom B,Deepa Keshavamurthy
CSIT314,Tutorial,Monday,10:30,11:30,3.42-Classroom B,Tina Thomas
CSIT314,Tutorial,Wednesday,08:30,09:30,5.12-Informal Classroom,Sara Majeed
CSIT314,Tutorial,Wednesday,09:30,10:30,5.12-Informal Classroom,Sara Majeed
CSIT314,Tutorial,Wednesday,14:30,15:30,4.52-Classroom A,Sara Majeed
CSIT314,Tutorial,Wednesday,11:30,12:30,5.18-Classroom A,Sara Majeed
CSIT314,Tutorial,Thursday,09:30,10:30,4.48-Classroom B,Sonia Dagou
CSIT314,Tutorial,Thursday,08:30,09:30,4.48-Classroom B,Sonia Dagou
CSIT314,Tutorial,Wednesday,16:30,17:30,3.48-Classroom B,Deepa Keshavamurthy
CSIT314,Tutorial,Wednesday,16:30,17:30,5.12-Informal Classroom,Sara Azeem Khan
CSIT314,Tutorial,Thursday,13:30,14:30,6.38-Classroom B,Sara Azeem Khan
CSIT321,Lecture A,Tuesday,13:30,15:30,4.44-Classroom B,Farhad Oroumchian
CSIT321,Lecture A,Monday,16:30,18:30,3.44-Classroom B,Patrick Mukala
CSIT321,Lecture B,Friday,10:30,12:30,3.44-Classroom B,Farhad Oroumchian
CSIT321,Lecture B,Wednesday,16:30,18:30,3.44-Classroom B,Patrick Mukala
ECON253,Lecture,Tuesday,14:30,16:30,3.44-Classroom B,Ziang Wang
ECON253,Lecture,Tuesday,12:30,14:30,3.44-Classroom B,Ziang Wang
ECON253,Tutorial,Tuesday,16:30,18:30,6.40-Computer Lab Single,Nada Tchantchane
ECON253,Tutorial,Friday,08:30,10:30,6.40-Computer Lab Single,Nada Tchantchane
ECON253,Tutorial,Friday,10:30,12:30,6.40-Computer Lab Single,Nada Tchantchane
ECON253,Tutorial,Monday,08:30,10:30,3.47-Game Dev Lab Dual Screens,Nada Tchantchane
ECON253,Tutorial,Monday,10:30,12:30,3.47-Game Dev Lab Dual Screens,Nada Tchantchane
ECON253,Tutorial,Monday,16:30,18:30,4.42-Computer Lab (Single Screen),Nikita Kirplani
ECON253,Tutorial,Friday,16:30,18:30,1.52-Computer Lab Single,Khaled Eid
ECON253,Tutorial,Friday,16:30,18:30,4.42-Computer Lab (Single Screen),Nikita Kirplani
ECON939,Lecture,Thursday,18:00,22:00,2.50-Computer Lab Single,Kashif Saleem
ECON939,Lecture,Thursday,18:00,22:00,3.48-Classroom B,Kashif Saleem
ECTE203,Computer Lab,Tuesday,11:30,14:30,2.50-Computer Lab Single,Ayesha Qureshi
ECTE203,Computer Lab,Thursday,08:30,11:30,6.36-Computer Lab (Single Screen),Ayesha Qureshi
ECTE203,Computer Lab,Thursday,14:30,17:30,2.50-Computer Lab Single,Ayesha Qureshi
ECTE203,Computer Lab,Friday,14:30,17:30,2.50-Computer Lab Single,Mahmoud Alkakuri
ECTE203,Computer Lab,Wednesday,09:30,12:30,3.52-Computer Lab (Network),Mahmoud Alkakuri
ECTE203,Computer Lab,Friday,14:30,17:30,1.38-Circuits Lab,Razveen Kashif
ECTE203,Computer Lab,Thursday,08:30,11:30,5.17-Classroom VC,Mahmoud Alkakuri
ECTE203,Lecture,Monday,08:30,11:30,5.19-Classroom A,Abeer El Khouly
ECTE203,Lecture,Tuesday,08:30,11:30,5.19-Classroom A,Obada Al Khatib
ECTE203,Tutorial,Monday,11:30,13:30,5.10-Classroom B,Abeer El Khouly
ECTE203,Tutorial,Tuesday,14:30,16:30,3.45-Classroom B,Abeer El Khouly
ECTE203,Tutorial,Tuesday,11:30,13:30,5.10-Classroom B,Abeer El Khouly
ECTE203,Tutorial,Tuesday,08:30,10:30,4.52-Classroom A,Sana Sahir
ECTE203,Tutorial,Tuesday,14:30,16:30,5.12-Informal Classroom,Mary George
ECTE203,Tutorial,Monday,12:30,14:30,5.18-Classroom A,Sana Sahir
ECTE212,Computer Lab,Tuesday,13:30,16:30,1.38-Circuits Lab,Eva Barbulescu
ECTE212,Computer Lab,Thursday,11:30,14:30,1.38-Circuits Lab,Akanksha Singh
ECTE212,Computer Lab,Wednesday,14:30,17:30,1.38-Circuits Lab,Yasmine Abualroos
ECTE212,Computer Lab,Tuesday,10:30,13:30,1.38-Circuits Lab,Yasmine Abualroos
ECTE212,Computer Lab,Thursday,08:30,11:30,1.38-Circuits Lab,Yasmine Abualroos
ECTE212,Workshop A,Monday,15:30,17:30,5.11-Classroom B,Mary George
ECTE212,Workshop A,Monday,15:30,17:30,5.11-Classroom B,Haile Rajamani
ECTE212,Workshop A,Monday,15:30,17:30,5.11-Classroom B,Akanksha Singh
ECTE212,Workshop B,Thursday,14:30,16:30,6.345-Classroom A 6.34 & 6.35,Haile Rajamani
ECTE250,Computer Lab,Wednesday,10:30,12:30,2.51-Project Lab,Ashna Sreejith
ECTE250,Computer Lab,Tuesday,11:30,13:30,2.51-Project Lab,Sana Sahir
ECTE250,Computer Lab,Wednesday,13:30,15:30,2.51-Project Lab,Eva Barbulescu
ECTE250,Computer Lab,Monday,10:30,12:30,2.51-Project Lab,Habiba Ahmed
ECTE250,Lecture\Tutorial,Thursday,11:30,13:30,5.19-Classroom A,Mohamed Malek
ECTE250,Lecture\Tutorial,Thursday,09:30,11:30,5.19-Classroom A,Mohamed Malek
ECTE323,Computer Lab,Thursday,11:30,14:30,1.51-Power Lab,Habiba Ahmed
ECTE323,Lecture,Monday,08:30,10:30,3.48-Classroom B,Mohamad Nassereddine
ECTE323,Tutorial,Monday,10:30,12:30,3.48-Classroom B,Mohamad Nassereddine
ECTE331,Computer Lab,Tuesday,16:30,18:30,4.42-Computer Lab (Single Screen),Kiyan Afsari
ECTE331,Computer Lab,Wednesday,12:30,14:30,1.52-Computer Lab Single,Kiyan Afsari
ECTE331,Lecture\Tutorial,Tuesday,09:30,12:30,5.18-Classroom A,Abdsamad Benkrid
ECTE331,Tutorial,Tuesday,12:30,13:30,5.18-Classroom A,Abdsamad Benkrid
ECTE331,Tutorial,Tuesday,12:30,13:30,3.48-Classroom B,Kiyan Afsari
ECTE351,Computer Lab,Monday,13:30,15:30,2.51-Project Lab,Kiyan Afsari
ECTE351,Lecture,Friday,14:30,16:30,5.19-Classroom A,Haile Rajamani
ECTE351,Tutorial,Friday,16:30,18:30,5.19-Classroom A,Haile Rajamani
ECTE363,Computer Lab,Wednesday,09:30,12:30,4.42-Computer Lab (Single Screen),Ayesha Qureshi
ECTE363,Computer Lab,Monday,09:30,12:30,4.42-Computer Lab (Single Screen),Ayesha Qureshi
ECTE363,Lecture,Wednesday,15:30,17:30,4.44-Classroom B,Obada Al Khatib
ECTE363,Tutorial,Thursday,14:30,16:30,6.30-Multipurpose - Teaching & Research,Ashna Sreejith
ECTE363,Tutorial,Friday,10:30,12:30,5.10-Classroom B,Ashna Sreejith
ECTE363,Tutorial,Thursday,08:30,10:30,4.467-Classroom A 4.46 & 4.47,Ashna Sreejith
ECTE412,Computer Lab,Friday,09:30,12:30,1.51-Power Lab,Akanksha Singh
ECTE412,Lecture,Tuesday,11:30,13:30,1.51-Power Lab,Haile Rajamani
ECTE412,Tutorial,Tuesday,14:30,16:30,1.51-Power Lab,Haile Rajamani
ECTE433,Computer Lab,Thursday,12:30,14:30,3.52-Computer Lab (Network),Ashna Sreejith
ECTE433,Workshop,Wednesday,09:30,13:30,3.45-Classroom B,Abdsamad Benkrid
ECTE465,Computer Lab,Monday,16:30,18:30,3.52-Computer Lab (Network),Ayesha Qureshi
ECTE465,Lecture,Thursday,14:30,16:30,5.134-Classroom A 5.13 & 5.14,Mohamed Malek
ECTE465,Tutorial,Monday,14:30,16:30,6.28-Seminar/Tutorial,Abeer El Khouly
ECTE469,Computer Lab A,Tuesday,08:30,09:30,2.50-Computer Lab Single,Ashna Sreejith
ECTE469,Computer Lab B,Friday,08:30,10:30,1.38-Circuits Lab,Ashna Sreejith
ECTE469,Workshop A,Tuesday,14:30,16:30,6.29-Multipurpose - Teaching & Research,Abdsamad Benkrid
ECTE469,Workshop B,Wednesday,08:30,09:30,5.18-Classroom A,Abdsamad Benkrid
ECTE469,Workshop C,Wednesday,14:30,15:30,5.18-Classroom A,Abdsamad Benkrid
EDGI900,Lecture,Thursday,18:00,22:00,6.33-Classroom B,Christopher Tuffnell
EDGI900,Lecture,Thursday,18:00,22:00,6.33-Classroom B,Dima Yousef
EDGP920,Lecture,Wednesday,18:00,22:00,6.28-Seminar/Tutorial,Afnan Boutrid
EDGP940,Lecture,Tuesday,18:00,20:00,6.29-Multipurpose - Teaching & Research,Muna Amr
EDGT932,Lecture,Tuesday,18:00,22:00,3.42-Classroom B,Afnan Boutrid
EDGZ906,Lecture,Monday,18:00,22:00,4.53-Seminar/Tutorial,Muna Amr
EDGZ921,Lecture,Wednesday,18:00,22:00,3.48-Classroom B,Imene Ajala
ENGG100,Computer Lab,Wednesday,16:30,18:30,6.36-Computer Lab (Single Screen),Dana Ghibeh
ENGG100,Computer Lab,Thursday,08:30,10:30,6.40-Computer Lab Single,Obai Alashram
ENGG100,Computer Lab,Thursday,10:30,12:30,6.40-Computer Lab Single,Dana Ghibeh
ENGG100,Computer Lab,Friday,16:30,18:30,3.47-Game Dev Lab Dual Screens,Dana Ghibeh
ENGG100,Computer Lab,Friday,16:30,18:30,6.36-Computer Lab (Single Screen),Obai Alashram
ENGG100,Computer Lab,Wednesday,16:30,18:30,2.50-Computer Lab Single,Obai Alashram
ENGG100,Computer Lab,Friday,10:30,12:30,3.47-Game Dev Lab Dual Screens,Razveen Kashif
ENGG100,Computer Lab,Friday,08:30,10:30,3.52-Computer Lab (Network),Razveen Kashif
ENGG100,Computer Lab,Monday,16:30,18:30,6.36-Computer Lab (Single Screen),Obai Alashram
ENGG100,Computer Lab,Monday,08:30,10:30,6.36-Computer Lab (Single Screen),Dana Ghibeh
ENGG100,Workshop A,Wednesday,08:30,10:30,3.44-Classroom B,Nayab Nadeem
ENGG100,Workshop A,Wednesday,08:30,10:30,3.44-Classroom B,Mohamad Nassereddine
ENGG100,Workshop A,Wednesday,08:30,10:30,3.44-Classroom B,Habiba Ahmed
ENGG100,Workshop A,Wednesday,08:30,10:30,3.44-Classroom B,Eva Barbulescu
ENGG100,Workshop A,Wednesday,08:30,10:30,3.44-Classroom B,Akanksha Singh
ENGG100,Workshop A,Tuesday,08:30,10:30,5.134-Classroom A 5.13 & 5.14,Nayab Nadeem
ENGG100,Workshop A,Tuesday,08:30,10:30,5.134-Classroom A 5.13 & 5.14,Mohamad Nassereddine
ENGG100,Workshop A,Tuesday,08:30,10:30,5.134-Classroom A 5.13 & 5.14,Habiba Ahmed
ENGG100,Workshop A,Tuesday,08:30,10:30,5.134-Classroom A 5.13 & 5.14,Eva Barbulescu
ENGG100,Workshop A,Tuesday,08:30,10:30,5.134-Classroom A 5.13 & 5.14,Akanksha Singh
ENGG100,Workshop A,Tuesday,08:30,10:30,4.467-Classroom A 4.46 & 4.47,Ahmed Mohamed
ENGG100,Workshop A,Tuesday,08:30,10:30,4.467-Classroom A 4.46 & 4.47,Mary George
ENGG100,Workshop A,Tuesday,08:30,10:30,4.467-Classroom A 4.46 & 4.47,Mohamed Malek
ENGG100,Workshop A,Tuesday,08:30,10:30,4.467-Classroom A 4.46 & 4.47,Yasmine Abualroos
ENGG100,Workshop B,Wednesday,10:30,12:30,3.44-Classroom B,Nayab Nadeem
ENGG100,Workshop B,Wednesday,10:30,12:30,3.44-Classroom B,Mohamad Nassereddine
ENGG100,Workshop B,Wednesday,10:30,12:30,3.44-Classroom B,Habiba Ahmed
ENGG100,Workshop B,Wednesday,10:30,12:30,3.44-Classroom B,Eva Barbulescu
ENGG100,Workshop B,Wednesday,10:30,12:30,3.44-Classroom B,Akanksha Singh
ENGG100,Workshop B,Tuesday,11:30,13:30,6.345-Classroom A 6.34 & 6.35,Nayab Nadeem
ENGG100,Workshop B,Tuesday,11:30,13:30,6.345-Classroom A 6.34 & 6.35,Mohamad Nassereddine
ENGG100,Workshop B,Tuesday,11:30,13:30,6.345-Classroom A 6.34 & 6.35,Habiba Ahmed
ENGG100,Workshop B,Tuesday,11:30,13:30,6.345-Classroom A 6.34 & 6.35,Eva Barbulescu
ENGG100,Workshop B,Tuesday,11:30,13:30,6.345-Classroom A 6.34 & 6.35,Akanksha Singh
ENGG100,Workshop B,Wednesday,12:30,14:30,4.467-Classroom A 4.46 & 4.47,Ahmed Mohamed
ENGG100,Workshop B,Wednesday,12:30,14:30,4.467-Classroom A 4.46 & 4.47,Mary George
ENGG100,Workshop B,Wednesday,12:30,14:30,4.467-Classroom A 4.46 & 4.47,Mohamed Malek
ENGG100,Workshop B,Wednesday,12:30,14:30,4.467-Classroom A 4.46 & 4.47,Yasmine Abualroos
ENGG103,Computer Lab,Tuesday,16:30,18:30,1.53-Chemistry & Materials Science Lab,Thahsin Saidarakath
ENGG103,Computer Lab,Wednesday,13:30,15:30,1.53-Chemistry & Materials Science Lab,Mohammad AlRifai
ENGG103,Computer Lab,Wednesday,15:30,17:30,1.53-Chemistry & Materials Science Lab,Mohammad AlRifai
ENGG103,Computer Lab,Thursday,14:30,16:30,1.53-Chemistry & Materials Science Lab,Thahsin Saidarakath
ENGG103,Computer Lab,Thursday,11:30,13:30,1.53-Chemistry & Materials Science Lab,Thahsin Saidarakath
ENGG103,Computer Lab,Tuesday,12:30,14:30,1.53-Chemistry & Materials Science Lab,Razveen Kashif
ENGG103,Computer Lab,Wednesday,11:30,13:30,1.53-Chemistry & Materials Science Lab,Razveen Kashif
ENGG103,Computer Lab,Tuesday,14:30,16:30,1.53-Chemistry & Materials Science Lab,Razveen Kashif
ENGG103,Computer Lab,Monday,09:30,11:30,1.53-Chemistry & Materials Science Lab,Razveen Kashif
ENGG103,Lecture,Thursday,12:30,14:30,6.32-Classroom B,Ciara O'Driscoll
ENGG103,Lecture,Wednesday,09:30,11:30,4.44-Classroom B,Ciara O'Driscoll
ENGG103,Lecture,Thursday,08:30,10:30,6.32-Classroom B,Ciara O'Driscoll
ENGG103,Tutorial,Monday,13:30,15:30,6.29-Multipurpose - Teaching & Research,Abdulqader Hasan
ENGG103,Tutorial,Wednesday,10:30,12:30,3.46-Classroom A,Mohammad AlRifai
ENGG103,Tutorial,Tuesday,15:30,17:30,5.19-Classroom A,Mohammad Yousuf
ENGG103,Tutorial,Tuesday,11:30,13:30,5.19-Classroom A,Abdulqader Hasan
ENGG103,Tutorial,Monday,15:30,17:30,3.48-Classroom B,Abdulqader Hasan
ENGG103,Tutorial,Tuesday,14:30,16:30,3.42-Classroom B,Thahsin Saidarakath
ENGG103,Tutorial,Monday,15:30,17:30,6.38-Classroom B,Thahsin Saidarakath
ENGG103,Tutorial,Monday,10:30,12:30,6.38-Classroom B,Mohammad AlRifai
ENGG103,Tutorial,Monday,13:30,15:30,4.50-Classroom B,Mohammad AlRifai
ENGG103,Tutorial,Monday,10:30,12:30,5.18-Classroom A,Mohammad Yousuf
ENGG103,Tutorial,Tuesday,13:30,15:30,6.28-Seminar/Tutorial,Mohammad Yousuf
ENGG104,Computer Lab,Wednesday,08:30,10:30,1.38-Circuits Lab,Razveen Kashif
ENGG104,Computer Lab,Thursday,14:30,16:30,1.38-Circuits Lab,Nayab Nadeem
ENGG104,Computer Lab,Monday,14:30,16:30,1.38-Circuits Lab,Nayab Nadeem
ENGG104,Workshop A,Monday,08:30,10:30,4.467-Classroom A 4.46 & 4.47,Mohamed Malek
ENGG104,Workshop B,Monday,10:30,12:30,4.467-Classroom A 4.46 & 4.47,Mary George
ENGG104,Workshop B,Monday,10:30,12:30,4.467-Classroom A 4.46 & 4.47,Mohamed Malek
ENGG104,Workshop B,Monday,10:30,12:30,4.467-Classroom A 4.46 & 4.47,Sana Sahir
ENGG252,Computer Lab,Thursday,12:30,14:30,1.47-Fluids Lab,Yousef Al-Helo
ENGG252,Computer Lab,Monday,13:30,15:30,1.47-Fluids Lab,Yousef Al-Helo
ENGG252,Computer Lab,Tuesday,14:30,16:30,1.47-Fluids Lab,Yousef Al-Helo
ENGG252,Computer Lab,Thursday,10:30,12:30,1.47-Fluids Lab,Yousef Al-Helo
ENGG252,Computer Lab,Tuesday,12:30,14:30,1.47-Fluids Lab,Ahmed Mohamed
ENGG252,Computer Lab,Tuesday,09:30,11:30,1.47-Fluids Lab,Yousef Al-Helo
ENGG252,Computer Lab,Monday,11:30,13:30,1.47-Fluids Lab,Ahmed Mohamed
ENGG252,Lecture\Tutorial,Wednesday,08:30,11:30,5.134-Classroom A 5.13 & 5.14,Mama Chacha
ENGG252,Tutorial,Thursday,08:30,10:30,3.45-Classroom B,Abdulqader Hasan
ENGG252,Tutorial,Thursday,14:30,16:30,5.12-Informal Classroom,Asarudheen Abdudeen
ENGG252,Tutorial,Wednesday,15:30,17:30,6.39-Classroom A,Asarudheen Abdudeen
ENGG452,Lecture,Wednesday,09:30,10:30,6.33-Classroom B,Karol Sikora
ENGG462,Lecture,Monday,18:00,20:00,Online,Stephen Wilkinson
ENGG462,Tutorial,Tuesday,18:00,21:00,Online,Stephen Wilkinson
ENGG940,Lecture,Tuesday,18:00,22:00,5.12-Informal Classroom,Mama Chacha
ENGG954,Lecture,Thursday,18:00,22:00,5.12-Informal Classroom,Hazem Gouda
ENGG956,Lecture,Monday,18:00,22:00,4.44-Classroom B,Osama Al Hares
ENGG957,Lecture,Friday,18:00,22:00,6.33-Classroom B,Hazem Gouda
ENGG964,Lecture,Monday,18:00,20:00,Online,Stephen Wilkinson
ENGG964,Tutorial,Tuesday,18:00,21:00,Online,Stephen Wilkinson
ENTR904,Lecture,Tuesday,18:00,22:00,5.17-Classroom VC,Subhadeep Datta
FIN111,Lecture,Monday,15:30,17:30,6.345-Classroom A 6.34 & 6.35,Namrata Gupta
FIN111,Lecture,Monday,12:30,14:30,4.44-Classroom B,Namrata Gupta
FIN111,Lecture,Wednesday,10:30,12:30,6.32-Classroom B,Namrata Gupta
FIN111,Tutorial,Thursday,08:30,10:30,3.48-Classroom B,Avneet Kaur
FIN111,Tutorial,Tuesday,11:30,13:30,5.12-Informal Classroom,Raghida Araji
FIN111,Tutorial,Tuesday,08:30,10:30,5.12-Informal Classroom,Lobna Mansour
FIN111,Tutorial,Thursday,10:30,12:30,3.48-Classroom B,Avneet Kaur
FIN111,Tutorial,Wednesday,14:30,16:30,3.48-Classroom B,Avneet Kaur
FIN111,Tutorial,Tuesday,09:30,11:30,5.17-Classroom VC,Sherwin Fernandes
FIN111,Tutorial,Monday,10:30,12:30,6.39-Classroom A,Sherwin Fernandes
FIN111,Tutorial,Tuesday,12:30,14:30,3.42-Classroom B,Sherwin Fernandes
FIN111,Tutorial,Monday,10:30,12:30,6.33-Classroom B,Tania Abillama
FIN111,Tutorial,Wednesday,08:30,10:30,4.467-Classroom A 4.46 & 4.47,Tania Abillama
FIN111,Tutorial,Wednesday,10:30,12:30,4.467-Classroom A 4.46 & 4.47,Tania Abillama
FIN222,Lecture,Wednesday,08:30,10:30,6.345-Classroom A 6.34 & 6.35,Burcu Kapar
FIN222,Lecture,Wednesday,11:30,13:30,4.44-Classroom B,Burcu Kapar
FIN222,Tutorial,Monday,14:30,16:30,5.17-Classroom VC,Sherwin Fernandes
FIN222,Tutorial,Friday,08:30,10:30,3.48-Classroom B,Sherwin Fernandes
FIN222,Tutorial,Friday,10:30,12:30,3.48-Classroom B,Sherwin Fernandes
FIN222,Tutorial,Tuesday,12:30,14:30,6.38-Classroom B,Burcu Kapar
FIN222,Tutorial,Monday,09:30,11:30,3.45-Classroom B,Burcu Kapar
FIN222,Tutorial,Friday,14:30,16:30,3.42-Classroom B,Deepshikha Vyas
FIN222,Tutorial,Friday,16:30,18:30,3.42-Classroom B,Deepshikha Vyas
FIN222,Tutorial,Monday,08:30,10:30,6.33-Classroom B,Tania Abillama
FIN226,Lecture,Thursday,14:30,16:30,4.467-Classroom A 4.46 & 4.47,Haroon Khan
FIN226,Tutorial,Wednesday,13:30,15:30,3.45-Classroom B,Haroon Khan
FIN244,Lecture,Wednesday,15:30,17:30,5.11-Classroom B,Vikash Ramiah
FIN244,Lecture,Wednesday,13:30,15:30,5.11-Classroom B,Vikash Ramiah
FIN244,Tutorial,Thursday,08:30,10:30,3.42-Classroom B,Lobna Mansour
FIN244,Tutorial,Thursday,12:30,14:30,4.44-Classroom B,Lobna Mansour
FIN244,Tutorial,Thursday,08:30,10:30,5.12-Informal Classroom,Katia Lopez
FIN244,Tutorial,Wednesday,15:30,17:30,4.467-Classroom A 4.46 & 4.47,Katia Lopez
FIN244,Tutorial,Friday,08:30,10:30,3.45-Classroom B,Katia Lopez
FIN244,Tutorial,Friday,10:30,12:30,3.45-Classroom B,Katia Lopez
FIN324,Lecture,Thursday,14:30,16:30,4.44-Classroom B,Kashif Saleem
FIN324,Tutorial,Wednesday,10:30,12:30,1.52-Computer Lab Single,Kashif Saleem
FIN324,Tutorial,Tuesday,08:30,10:30,4.42-Computer Lab (Single Screen),Raghida Araji
FIN324,Tutorial,Wednesday,10:30,12:30,6.36-Computer Lab (Single Screen),Raghida Araji
FIN924,Lecture,Friday,18:00,22:00,4.44-Classroom B,Osama Al Hares
FIN928,Lecture,Monday,18:00,22:00,6.38-Classroom B,Faisal Rana
FIN954,Lecture,Thursday,18:00,22:00,4.44-Classroom B,Haroon Khan
FIN956,Lecture,Wednesday,18:00,22:00,4.50-Classroom B,Noor Rizvi
FIN962,Lecture,Tuesday,18:00,22:00,6.38-Classroom B,Vikash Ramiah
FSPD116,Consultation,Wednesday,16:30,18:30,6.29-Multipurpose - Teaching & Research,Sandunie Wijesekara
GEOG222,Lecture,Tuesday,09:30,11:30,3.46-Classroom A,Amina Khan
GEOG222,Tutorial,Tuesday,11:30,13:30,4.48-Classroom B,Amina Khan
GEOG222,Tutorial,Wednesday,09:30,11:30,4.50-Classroom B,Aswina Sreekumar
GESF000,Tutorial A,Monday,08:30,13:30,4.53-Seminar/Tutorial,Rachel Gillner
GESF000,Tutorial B,Tuesday,08:30,13:30,4.53-Seminar/Tutorial,Rachel Gillner
GESF000,Tutorial C,Wednesday,08:30,13:30,4.53-Seminar/Tutorial,Rachel Gillner
GESF000,Tutorial D,Thursday,08:30,13:30,4.53-Seminar/Tutorial,Rachel Gillner
GESF000,Tutorial E,Friday,08:30,12:30,4.53-Seminar/Tutorial,Rachel Gillner
GESF100,Tutorial A,Monday,08:30,13:30,6.28-Seminar/Tutorial,Fauzia Rafi
GESF100,Tutorial B,Tuesday,08:30,13:30,6.28-Seminar/Tutorial,Fauzia Rafi
GESF100,Tutorial C,Wednesday,08:30,13:30,6.28-Seminar/Tutorial,Fauzia Rafi
GESF100,Tutorial D,Thursday,08:30,13:30,6.28-Seminar/Tutorial,Fauzia Rafi
GESF100,Tutorial E,Friday,08:30,12:30,6.28-Seminar/Tutorial,Fauzia Rafi
GESF200,Tutorial A,Monday,08:30,13:30,6.29-Multipurpose - Teaching & Research,Alison Webster
GESF200,Tutorial A,Monday,08:30,13:30,6.29-Multipurpose - Teaching & Research,Magdalena Halim
GESF200,Tutorial B,Tuesday,08:30,13:30,6.29-Multipurpose - Teaching & Research,Alison Webster
GESF200,Tutorial B,Tuesday,08:30,13:30,6.29-Multipurpose - Teaching & Research,Magdalena Halim
GESF200,Tutorial C,Wednesday,08:30,13:30,6.29-Multipurpose - Teaching & Research,Alison Webster
GESF200,Tutorial C,Wednesday,08:30,13:30,6.29-Multipurpose - Teaching & Research,Magdalena Halim
GESF200,Tutorial D,Thursday,08:30,13:30,6.29-Multipurpose - Teaching & Research,Alison Webster
GESF200,Tutorial D,Thursday,08:30,13:30,6.29-Multipurpose - Teaching & Research,Magdalena Halim
GESF200,Tutorial E,Friday,08:30,12:30,6.29-Multipurpose - Teaching & Research,Alison Webster
GESF200,Tutorial E,Friday,08:30,12:30,6.29-Multipurpose - Teaching & Research,Magdalena Halim
GESF300,Tutorial A,Monday,08:30,13:30,6.30-Multipurpose - Teaching & Research,Hortence Kenswil
GESF300,Tutorial A,Monday,08:30,13:30,6.30-Multipurpose - Teaching & Research,Sabina Ashraf
GESF300,Tutorial B,Tuesday,08:30,13:30,6.30-Multipurpose - Teaching & Research,Hortence Kenswil
GESF300,Tutorial B,Tuesday,08:30,13:30,6.30-Multipurpose - Teaching & Research,Sabina Ashraf
GESF300,Tutorial C,Wednesday,08:30,13:30,6.30-Multipurpose - Teaching & Research,Hortence Kenswil
GESF300,Tutorial C,Wednesday,08:30,13:30,6.30-Multipurpose - Teaching & Research,Sabina Ashraf
GESF300,Tutorial D,Thursday,08:30,13:30,6.30-Multipurpose - Teaching & Research,Hortence Kenswil
GESF300,Tutorial D,Thursday,08:30,13:30,6.30-Multipurpose - Teaching & Research,Sabina Ashraf
GESF300,Tutorial E,Friday,08:30,12:30,6.30-Multipurpose - Teaching & Research,Hortence Kenswil
GESF300,Tutorial E,Friday,08:30,12:30,6.30-Multipurpose - Teaching & Research,Sabina Ashraf
GESF400,Tutorial A,Monday,08:30,13:30,5.08-Seminar / Tutorial,Ferzana Aslam
GESF400,Tutorial A,Monday,08:30,13:30,5.08-Seminar / Tutorial,Sabina Ashraf
GESF400,Tutorial B,Tuesday,08:30,13:30,5.08-Seminar / Tutorial,Ferzana Aslam
GESF400,Tutorial B,Tuesday,08:30,13:30,5.08-Seminar / Tutorial,Sabina Ashraf
GESF400,Tutorial C,Wednesday,08:30,13:30,5.08-Seminar / Tutorial,Ferzana Aslam
GESF400,Tutorial C,Wednesday,08:30,13:30,5.08-Seminar / Tutorial,Sabina Ashraf
GESF400,Tutorial D,Thursday,08:30,13:30,5.08-Seminar / Tutorial,Ferzana Aslam
GESF400,Tutorial D,Thursday,08:30,13:30,5.08-Seminar / Tutorial,Sabina Ashraf
GESF400,Tutorial E,Friday,08:30,12:30,5.08-Seminar / Tutorial,Ferzana Aslam
GESF400,Tutorial E,Friday,08:30,12:30,5.08-Seminar / Tutorial,Sabina Ashraf
IELT200,Tutorial A,Monday,18:00,21:00,5.08-Seminar / Tutorial,Ferzana Aslam
IELT200,Tutorial B,Tuesday,18:00,21:00,5.08-Seminar / Tutorial,Ferzana Aslam
IELT200,Tutorial C,Wednesday,18:00,21:00,5.08-Seminar / Tutorial,Ferzana Aslam
IELT200,Tutorial D,Thursday,18:00,21:00,5.08-Seminar / Tutorial,Ferzana Aslam
IELT200,Tutorial E,Friday,18:00,21:00,5.08-Seminar / Tutorial,Ferzana Aslam
IELT700,Tutorial A,Monday,08:30,13:30,4.52-Classroom A,Alison Webster
IELT700,Tutorial B,Tuesday,08:30,13:30,4.51-Tutorial Room,Alison Webster
IELT700,Tutorial C,Wednesday,08:30,13:30,4.51-Tutorial Room,Alison Webster
IELT700,Tutorial D,Thursday,08:30,13:30,6.38-Classroom B,Alison Webster
IELT700,Tutorial D,Thursday,08:30,13:30,Function Room 6.26,Alison Webster
IELT700,Tutorial E,Friday,08:30,12:30,4.52-Classroom A,Alison Webster
IFBS002,Tutorial A,Wednesday,10:30,12:30,4.52-Classroom A,Sadaf Khurshid
IFBS002,Tutorial B,Thursday,10:30,12:30,6.32-Classroom B,Sadaf Khurshid
IFCH002,Computer Lab,Thursday,10:30,11:30,1.53-Chemistry & Materials Science Lab,Akanksha Singh
IFCH002,Tutorial,Monday,08:30,12:30,4.51-Tutorial Room,Akanksha Singh
IFEC002,Tutorial A,Tuesday,15:30,17:30,6.30-Multipurpose - Teaching & Research,Asima Shirazi
IFEC002,Tutorial B,Wednesday,14:30,16:30,6.30-Multipurpose - Teaching & Research,Asima Shirazi
IFME002,Tutorial A,Monday,13:30,15:30,6.30-Multipurpose - Teaching & Research,Ziad Choucair
IFME002,Tutorial B,Wednesday,10:30,12:30,6.33-Classroom B,Ziad Choucair
IFPH002,Computer Lab,Thursday,12:30,13:30,3.53-Physics/Robotics Lab,Baharek Tajali
IFPH002,Tutorial A,Tuesday,12:30,14:30,4.50-Classroom B,Baharek Tajali
IFPH002,Tutorial B,Tuesday,15:30,17:30,4.51-Tutorial Room,Baharek Tajali
IFRC002,Tutorial A,Wednesday,08:30,10:30,4.52-Classroom A,Ajrina Hysaj
IFRC002,Tutorial B,Thursday,13:30,15:30,6.29-Multipurpose - Teaching & Research,Ajrina Hysaj
IFSC001,Tutorial,Friday,08:30,12:30,4.51-Tutorial Room,Amina Khan
INE301,Lecture,Friday,10:30,12:30,6.345-Classroom A 6.34 & 6.35,Marouane Khallouk
INE301,Lecture,Thursday,09:30,11:30,5.11-Classroom B,Marouane Khallouk
INE301,Tutorial,Monday,12:30,14:30,6.39-Classroom A,Shehnaz Al-Helo
INE301,Tutorial,Wednesday,09:30,11:30,4.48-Classroom B,Shehnaz Al-Helo
INE301,Tutorial,Wednesday,14:30,16:30,4.45-Classroom B,Shehnaz Al-Helo
INE301,Tutorial,Monday,14:30,16:30,3.46-Classroom A,Shehnaz Al-Helo
INE301,Tutorial,Tuesday,08:30,10:30,6.33-Classroom B,Umme Kulsoom
INE301,Tutorial,Tuesday,12:30,14:30,4.45-Classroom B,Amna Moeen
INE301,Tutorial,Friday,08:30,10:30,4.48-Classroom B,Umme Kulsoom
INE301,Tutorial,Tuesday,15:30,17:30,5.17-Classroom VC,Umme Kulsoom
INFO411,Computer Lab,Thursday,16:30,18:30,6.36-Computer Lab (Single Screen),Abdullah El Nokiti
INFO411,Lecture,Tuesday,10:30,12:30,3.44-Classroom B,Farhad Oroumchian
INFO411,Tutorial,Thursday,10:30,11:30,4.51-Tutorial Room,Farhad Oroumchian
INFO411,Tutorial,Thursday,12:30,13:30,4.51-Tutorial Room,Abdullah El Nokiti
IRAE135,Lecture,Tuesday,10:30,12:30,5.11-Classroom B,Imene Ajala
IRAE135,Lecture,Tuesday,12:30,14:30,5.11-Classroom B,Imene Ajala
IRAE135,Lecture,Wednesday,14:30,16:30,6.345-Classroom A 6.34 & 6.35,Imene Ajala
IRAE135,Tutorial,Thursday,08:30,10:30,4.52-Classroom A,Dana Charkaoui
IRAE135,Tutorial,Wednesday,08:30,10:30,5.17-Classroom VC,Dana Charkaoui
IRAE135,Tutorial,Thursday,14:30,16:30,4.48-Classroom B,Aswina Sreekumar
IRAE135,Tutorial,Thursday,12:30,14:30,4.48-Classroom B,Dana Charkaoui
IRAE135,Tutorial,Wednesday,11:30,13:30,5.19-Classroom A,Dana Charkaoui
IRAE135,Tutorial,Wednesday,12:30,14:30,5.17-Classroom VC,Noor Suwwan
IRAE135,Tutorial,Thursday,12:30,14:30,4.45-Classroom B,Aswina Sreekumar
IRAE135,Tutorial,Thursday,14:30,16:30,4.45-Classroom B,Noor Suwwan
IRAE135,Tutorial,Friday,08:30,10:30,3.42-Classroom B,Dana Charkaoui
IRAE135,Tutorial,Friday,10:30,12:30,3.42-Classroom B,Dana Charkaoui
IRAE135,Tutorial,Friday,10:30,12:30,4.48-Classroom B,Noor Suwwan
ISIT040,Lecture,Monday,08:30,12:30,5.11-Classroom B,Tauqeer Faiz
ISIT040,Lecture,Monday,08:30,12:30,5.11-Classroom B,Abdullah El Nokiti
ISIT224,Computer Lab,Thursday,12:30,14:30,4.42-Computer Lab (Single Screen),Pradnya Bhagwat
ISIT224,Computer Lab,Thursday,14:30,16:30,4.42-Computer Lab (Single Screen),Pradnya Bhagwat
ISIT224,Computer Lab,Monday,10:30,12:30,6.36-Computer Lab (Single Screen),Pradnya Bhagwat
ISIT224,Lecture,Thursday,08:30,10:30,4.44-Classroom B,Zeenath Khan
LANG030,Tutorial A,Tuesday,08:30,11:30,5.10-Classroom B,Nicola Sabry
LANG030,Tutorial B,Wednesday,14:30,17:30,6.33-Classroom B,Nicola Sabry
LANG040,Tutorial A,Wednesday,12:30,14:30,4.50-Classroom B,Ajrina Hysaj
LANG040,Tutorial A,Tuesday,13:30,15:30,4.51-Tutorial Room,Nicola Sabry
LANG040,Tutorial A,Monday,14:30,16:30,4.44-Classroom B,Sonia Adams
LANG040,Tutorial B,Monday,09:30,11:30,4.50-Classroom B,Ajrina Hysaj
LANG040,Tutorial B,Wednesday,11:30,13:30,5.10-Classroom B,Nicola Sabry
LANG040,Tutorial B,Wednesday,10:30,12:30,6.38-Classroom B,Sonia Adams
MARK230,Lecture,Monday,10:30,12:30,6.345-Classroom A 6.34 & 6.35,Sourjo Mukherjee
MARK230,Tutorial,Monday,14:30,16:30,4.467-Classroom A 4.46 & 4.47,Sourjo Mukherjee
MARK230,Tutorial,Thursday,10:30,12:30,4.50-Classroom B,Nazanin Tahsili
MARK270,Lecture,Tuesday,13:30,15:30,6.32-Classroom B,Rumaila Abbas
MARK270,Tutorial,Tuesday,15:30,17:30,6.32-Classroom B,Rumaila Abbas
MARK270,Tutorial,Wednesday,15:30,17:30,4.51-Tutorial Room,Vidhi Sharma
MARK270,Tutorial,Thursday,08:30,10:30,5.18-Classroom A,Vidhi Sharma
MARK270,Tutorial,Wednesday,09:30,11:30,5.18-Classroom A,Vidhi Sharma
MARK333,Lecture,Monday,16:30,18:30,4.467-Classroom A 4.46 & 4.47,Prakash Vel
MARK333,Tutorial,Tuesday,15:30,17:30,6.28-Seminar/Tutorial,Prakash Vel
MARK333,Tutorial,Wednesday,12:30,14:30,5.12-Informal Classroom,Vidhi Sharma
MARK333,Tutorial,Tuesday,09:30,11:30,4.48-Classroom B,Vidhi Sharma
MARK333,Tutorial,Thursday,10:30,12:30,5.18-Classroom A,Vidhi Sharma
MARK804,Lecture,Tuesday,18:00,22:00,3.48-Classroom B,Prakash Vel
MARK920,Lecture,Wednesday,18:00,22:00,4.467-Classroom A 4.46 & 4.47,Sourjo Mukherjee
MARK920,Lecture,Friday,18:00,22:00,4.50-Classroom B,Sourjo Mukherjee
MARK956,Lecture,Monday,18:00,22:00,3.48-Classroom B,Rumaila Abbas
MARK980,Lecture,Tuesday,18:00,22:00,4.48-Classroom B,Munyar Nyadzayo
MATH030,Lecture,Wednesday,14:30,16:30,5.134-Classroom A 5.13 & 5.14,Sara Abdelaziz
MATH030,Lecture,Wednesday,12:30,14:30,5.18-Classroom A,Sara Abdelaziz
MATH030,Workshop,Friday,14:30,16:30,4.51-Tutorial Room,Sara Abdelaziz
MATH030,Workshop,Friday,08:30,10:30,3.46-Classroom A,Sara Abdelaziz
MATH030,Workshop,Thursday,12:30,14:30,3.48-Classroom B,Sara Abdelaziz
MATH030,Workshop,Thursday,14:30,16:30,4.51-Tutorial Room,Sara Abdelaziz
MATH030,Workshop,Friday,10:30,12:30,3.46-Classroom A,Sara Abdelaziz
MATH030,Workshop,Friday,14:30,16:30,6.38-Classroom B,Baharek Tajali
MATH042,Lecture,Wednesday,14:30,16:30,5.08-Seminar / Tutorial,Abeer El Khouly
MATH042,Workshop,Thursday,14:30,16:30,5.08-Seminar / Tutorial,Abeer El Khouly
MATH043,Lecture,Wednesday,09:30,11:30,5.11-Classroom B,Sara Abdelaziz
MATH043,Workshop,Wednesday,12:30,14:30,4.52-Classroom A,Faibin Poyil
MATH043,Workshop,Friday,10:30,12:30,4.45-Classroom B,Faibin Poyil
MATH142,Lecture A,Thursday,08:30,10:30,5.134-Classroom A 5.13 & 5.14,Assane Lo
MATH142,Lecture A,Monday,08:30,10:30,6.39-Classroom A,Assane Lo
MATH142,Lecture B,Friday,08:30,10:30,5.19-Classroom A,Assane Lo
MATH142,Lecture B,Tuesday,14:30,16:30,5.134-Classroom A 5.13 & 5.14,Assane Lo
MATH142,Tutorial,Monday,15:30,17:30,3.45-Classroom B,Ziad Choucair
MATH142,Tutorial,Thursday,10:30,12:30,3.45-Classroom B,Ziad Choucair
MATH142,Tutorial,Friday,10:30,12:30,5.19-Classroom A,Ziad Choucair
MATH142,Tutorial,Wednesday,13:30,15:30,5.10-Classroom B,Ziad Choucair
MATH255,Computer Lab,Thursday,18:30,20:30,4.52-Classroom A,Mohamad Klot
MATH255,Computer Lab,Wednesday,18:30,20:30,5.12-Informal Classroom,Mohamad Klot
MATH255,Computer Lab,Wednesday,09:30,11:30,3.42-Classroom B,Halim Khelalfa
MATH255,Computer Lab,Wednesday,14:30,16:30,5.17-Classroom VC,Halim Khelalfa
MATH255,Lecture A,Monday,12:30,14:30,3.44-Classroom B,Halim Khelalfa
MATH255,Lecture B,Tuesday,08:30,10:30,3.44-Classroom B,Halim Khelalfa
MBA901,Lecture A,Saturday,09:00,17:00,4.44-Classroom B,Osama Al Hares
MBA901,Lecture B,Sunday,09:00,17:00,4.44-Classroom B,Osama Al Hares
MBA903,Lecture A,Saturday,09:00,17:00,4.45-Classroom B,Ruwan Bandara
MBA903,Lecture B,Sunday,09:00,17:00,4.45-Classroom B,Ruwan Bandara
MBA905,Lecture A,Saturday,09:00,17:00,4.45-Classroom B,Subhadeep Datta
MBA905,Lecture B,Sunday,09:00,17:00,4.45-Classroom B,Subhadeep Datta
MBA907,Lecture A,Saturday,09:00,17:00,4.45-Classroom B,Mohan Guruswamy
MBA907,Lecture B,Sunday,09:00,17:00,4.45-Classroom B,Mohan Guruswamy
MBA908,Lecture,Monday,18:00,22:00,3.46-Classroom A,Arijit Sikdar
MBA911,Lecture A,Saturday,09:00,17:00,5.19-Classroom A,Faisal Rana
MBA911,Lecture A,Saturday,09:00,17:00,4.50-Classroom B,Faisal Rana
MBA911,Lecture B,Sunday,09:00,17:00,5.19-Classroom A,Faisal Rana
MBA911,Lecture B,Sunday,09:00,17:00,4.50-Classroom B,Faisal Rana
MBAS901,Lecture A,Saturday,09:00,16:00,6.345-Classroom A 6.34 & 6.35,Prithvi Bhattacharya
MBAS901,Lecture A,Saturday,09:00,16:00,6.40-Computer Lab Single,Prithvi Bhattacharya
MBAS901,Lecture B,Sunday,09:00,16:00,6.345-Classroom A 6.34 & 6.35,Prithvi Bhattacharya
MBAS901,Lecture B,Sunday,09:00,16:00,6.40-Computer Lab Single,Prithvi Bhattacharya
MBAS903,Lecture A,Saturday,09:00,16:00,5.11-Classroom B,Ziang Wang
MBAS903,Lecture A,Saturday,09:00,16:00,6.40-Computer Lab Single,Ziang Wang
MBAS903,Lecture B,Sunday,09:00,16:00,5.11-Classroom B,Ziang Wang
MBAS903,Lecture B,Sunday,09:00,16:00,6.40-Computer Lab Single,Ziang Wang
MBAS905,Lecture A,Saturday,09:00,16:00,2.50-Computer Lab Single,Yiyang Bian
MBAS905,Lecture A,Saturday,09:00,16:00,5.17-Classroom VC,Yiyang Bian
MBAS905,Lecture B,Sunday,09:00,16:00,2.50-Computer Lab Single,Yiyang Bian
MBAS905,Lecture B,Sunday,09:00,16:00,5.17-Classroom VC,Yiyang Bian
MBAS906,Lecture A,Saturday,09:00,16:00,2.50-Computer Lab Single,Prithvi Bhattacharya
MBAS906,Lecture A,Saturday,09:00,16:00,5.17-Classroom VC,Prithvi Bhattacharya
MBAS906,Lecture B,Sunday,09:00,16:00,2.50-Computer Lab Single,Prithvi Bhattacharya
MBAS906,Lecture B,Sunday,09:00,16:00,5.17-Classroom VC,Prithvi Bhattacharya
MDT905,Lecture A,Saturday,10:00,16:00,3.44-Classroom B,Mai El Barachi
MDT905,Lecture B,Sunday,10:00,16:00,3.44-Classroom B,Mai El Barachi
MDT917,Lecture A,Saturday,10:00,16:00,3.44-Classroom B,Mouhannad Al Attar
MDT917,Lecture B,Sunday,10:00,16:00,3.44-Classroom B,Mouhannad Al Attar
MDT919,Lecture A,Saturday,10:00,16:00,5.18-Classroom A,Patrick Mukala
MDT919,Lecture B,Sunday,10:00,16:00,5.18-Classroom A,Patrick Mukala
MDT999,Lecture A,Saturday,10:00,16:00,4.44-Classroom B,Mai El Barachi
MDT999,Lecture A,Saturday,10:00,16:00,4.467-Classroom A 4.46 & 4.47,George Tsaramirsis
MDT999,Lecture B,Sunday,10:00,16:00,4.44-Classroom B,Mai El Barachi
MDT999,Lecture B,Sunday,10:00,16:00,4.467-Classroom A 4.46 & 4.47,George Tsaramirsis
MECH201,Computer Lab,Monday,08:30,10:30,2.50-Computer Lab Single,Mohammad AlRifai
MECH201,Computer Lab,Tuesday,16:30,18:30,1.52-Computer Lab Single,Mohammad AlRifai
MECH201,Lecture,Tuesday,09:30,11:30,3.48-Classroom B,Assane Lo
MECH201,Tutorial,Tuesday,11:30,12:30,3.48-Classroom B,Assane Lo
MECH215,Computer Lab,Friday,08:30,10:30,1.49-Manufacturing & Workshop Lab,Asarudheen Abdudeen
MECH215,Computer Lab,Thursday,12:30,14:30,1.49-Manufacturing & Workshop Lab,Ahmed Mohamed
MECH215,Computer Lab,Friday,10:30,12:30,1.49-Manufacturing & Workshop Lab,Asarudheen Abdudeen
MECH215,Computer Lab,Thursday,10:30,12:30,1.49-Manufacturing & Workshop Lab,Ahmed Mohamed
MECH215,Computer Lab,Thursday,08:30,10:30,1.49-Manufacturing & Workshop Lab,Ahmed Mohamed
MECH215,Lecture\Tutorial,Wednesday,13:30,15:30,5.19-Classroom A,Ciara O'Driscoll
MECH215,Tutorial,Monday,15:30,17:30,3.42-Classroom B,Mohammad Yousuf
MECH215,Tutorial,Tuesday,10:30,12:30,4.45-Classroom B,Mohammad Yousuf
MECH311,Computer Lab,Friday,14:30,16:30,6.40-Computer Lab Single,Umar Asghar
MECH311,Lecture,Friday,08:30,10:30,5.12-Informal Classroom,Umar Asghar
MECH311,Tutorial,Friday,10:30,12:30,5.12-Informal Classroom,Umar Asghar
MECH419,Lecture,Tuesday,08:30,10:30,6.36-Computer Lab (Single Screen),Sana Amir
MECH419,Workshop,Thursday,12:30,16:30,6.36-Computer Lab (Single Screen),Abdulqader Hasan
MECH419,Workshop,Thursday,12:30,16:30,6.36-Computer Lab (Single Screen),Sana Amir
MECH431,Lecture,Tuesday,12:30,14:30,3.45-Classroom B,Mama Chacha
MECH431,Tutorial,Tuesday,14:30,16:30,6.36-Computer Lab (Single Screen),Mama Chacha
MECH470,Computer Lab,Thursday,10:30,12:30,3.52-Computer Lab (Network),Mohammad Yousuf
MECH470,Lecture,Monday,12:30,14:30,6.345-Classroom A 6.34 & 6.35,Ciara O'Driscoll
MECH470,Lecture,Monday,12:30,14:30,6.345-Classroom A 6.34 & 6.35,Haile Rajamani
MECH470,Tutorial,Thursday,08:30,10:30,6.33-Classroom B,Haile Rajamani
MECH482,Computer Lab,Wednesday,08:30,10:30,6.40-Computer Lab Single,Mohammad Yousuf
MECH482,Lecture,Monday,11:30,13:30,3.45-Classroom B,Umar Asghar
MECH482,Tutorial,Monday,13:30,15:30,3.45-Classroom B,Mohammad Yousuf
MGNT102,Lecture,Thursday,12:30,14:30,0.17-Lecture Theatre,Marouane Khallouk
MGNT102,Lecture,Thursday,14:30,16:30,0.17-Lecture Theatre,Marouane Khallouk
MGNT102,Lecture,Friday,08:30,10:30,4.467-Classroom A 4.46 & 4.47,Marouane Khallouk
MGNT102,Tutorial,Wednesday,13:30,15:30,6.39-Classroom A,Mahshid Baghestani
MGNT102,Tutorial,Tuesday,13:30,15:30,5.19-Classroom A,Mahshid Baghestani
MGNT102,Tutorial,Thursday,14:30,16:30,3.48-Classroom B,Mahshid Baghestani
MGNT102,Tutorial,Wednesday,12:30,14:30,6.33-Classroom B,Sadaf Khurshid
MGNT102,Tutorial,Wednesday,15:30,17:30,5.10-Classroom B,Sadaf Khurshid
MGNT102,Tutorial,Tuesday,14:30,16:30,5.10-Classroom B,Shaimaa Elsaid
MGNT102,Tutorial,Monday,15:30,17:30,4.50-Classroom B,Shaimaa Elsaid
MGNT102,Tutorial,Thursday,08:30,10:30,4.50-Classroom B,Amna Moeen
MGNT102,Tutorial,Tuesday,16:30,18:30,5.10-Classroom B,Shaimaa Elsaid
MGNT102,Tutorial,Wednesday,15:30,17:30,3.42-Classroom B,Muhammad Latif
MGNT102,Tutorial,Monday,11:30,13:30,4.45-Classroom B,Shaimaa Elsaid
MGNT102,Tutorial,Monday,15:30,17:30,4.45-Classroom B,Donia Rawashdeh
MGNT102,Tutorial,Tuesday,13:30,15:30,5.17-Classroom VC,Umme Kulsoom
MGNT102,Tutorial,Tuesday,13:30,15:30,5.18-Classroom A,Donia Rawashdeh
MGNT102,Tutorial,Thursday,08:30,10:30,6.345-Classroom A 6.34 & 6.35,Muhammad Latif
MGNT102,Tutorial,Thursday,12:30,14:30,6.345-Classroom A 6.34 & 6.35,Muhammad Latif
MGNT102,Tutorial,Thursday,10:30,12:30,6.345-Classroom A 6.34 & 6.35,Muhammad Latif
MGNT102,Tutorial,Wednesday,10:30,12:30,4.45-Classroom B,Donia Rawashdeh
MGNT210,Lecture,Wednesday,10:30,12:30,6.345-Classroom A 6.34 & 6.35,Mahshid Baghestani
MGNT210,Lecture,Thursday,12:30,14:30,5.134-Classroom A 5.13 & 5.14,Mahshid Baghestani
MGNT210,Tutorial,Thursday,10:30,12:30,4.52-Classroom A,Shehnaz Al-Helo
MGNT210,Tutorial,Wednesday,15:30,17:30,5.19-Classroom A,Odelia Mathews
MGNT210,Tutorial,Thursday,12:30,14:30,6.33-Classroom B,Odelia Mathews
MGNT210,Tutorial,Thursday,14:30,16:30,6.38-Classroom B,Odelia Mathews
MGNT210,Tutorial,Tuesday,10:30,12:30,6.38-Classroom B,Mahshid Baghestani
MGNT210,Tutorial,Tuesday,14:30,16:30,4.45-Classroom B,Amna Moeen
MGNT210,Tutorial,Thursday,08:30,10:30,3.46-Classroom A,Odelia Mathews
MGNT220,Lecture,Monday,09:30,11:30,5.134-Classroom A 5.13 & 5.14,Sadaf Khurshid
MGNT220,Lecture,Monday,12:30,14:30,4.467-Classroom A 4.46 & 4.47,Sadaf Khurshid
MGNT220,Tutorial,Monday,14:30,16:30,5.19-Classroom A,Sadaf Khurshid
MGNT220,Tutorial,Friday,08:30,10:30,6.33-Classroom B,Agata Jach
MGNT220,Tutorial,Friday,10:30,12:30,6.33-Classroom B,Agata Jach
MGNT220,Tutorial,Friday,14:30,16:30,4.50-Classroom B,Agata Jach
MGNT220,Tutorial,Thursday,14:30,16:30,5.19-Classroom A,Agata Jach
MGNT322,Lecture,Thursday,11:30,13:30,5.10-Classroom B,Sabiha Mumtaz
MGNT322,Tutorial,Thursday,13:30,15:30,5.10-Classroom B,Sabiha Mumtaz
MGNT341,Lecture,Friday,08:30,10:30,6.32-Classroom B,Greig Taylor
MGNT341,Tutorial,Friday,10:30,12:30,6.32-Classroom B,Greig Taylor
MGNT341,Tutorial,Friday,10:30,12:30,5.18-Classroom A,Amna Moeen
MGNT803,Lecture,Wednesday,18:00,22:00,3.46-Classroom A,Sabiha Mumtaz
MGNT910,Lecture,Thursday,18:00,22:00,4.467-Classroom A 4.46 & 4.47,Jaeyoung Cho
MGNT915,Lecture,Wednesday,18:00,22:00,4.44-Classroom B,Payyazhi Jayashree
MGNT918,Lecture,Friday,18:00,22:00,4.45-Classroom B,Ruwan Bandara
MGNT922,Lecture,Monday,18:00,22:00,3.46-Classroom A,Arijit Sikdar
MGNT947,Lecture,Thursday,18:00,22:00,3.47-Game Dev Lab Dual Screens,Ruwan Bandara
MGNT947,Lecture,Thursday,18:00,22:00,3.47-Game Dev Lab Dual Screens,Prithvi Bhattacharya
MGNT947,Lecture,Thursday,18:00,22:00,3.45-Classroom B,Ruwan Bandara
MGNT947,Lecture,Thursday,18:00,22:00,3.45-Classroom B,Prithvi Bhattacharya
MGNT949,Lecture,Tuesday,18:00,22:00,4.45-Classroom B,Mohan Guruswamy
MGNT978,Lecture,Wednesday,18:00,22:00,5.11-Classroom B,Greig Taylor
MIR901,Lecture,Wednesday,18:00,22:00,3.48-Classroom B,Imene Ajala
MMD901,Lecture,Tuesday,18:00,22:00,5.15-MAC Lab,Noor Yusoff
MMD901,Lecture,Tuesday,18:00,22:00,5.18-Classroom A,Noor Yusoff
MMD902,Lecture,Thursday,18:00,22:00,5.15-MAC Lab,Daniel Chedid
MMD902,Lecture,Thursday,18:00,22:00,5.15-MAC Lab,Aaron Anderson
MMD902,Lecture,Thursday,18:00,22:00,5.134-Classroom A 5.13 & 5.14,Daniel Chedid
MMD902,Lecture,Thursday,18:00,22:00,5.134-Classroom A 5.13 & 5.14,Aaron Anderson
MMD908,Lecture,Wednesday,18:00,22:00,5.15-MAC Lab,Ludmil Trenkov
NMIH102,Lecture,Saturday,08:30,11:30,5.10-Classroom B,Sarah Hatahet
NMIH304,Lecture,Saturday,12:00,15:00,5.10-Classroom B,Sarah Hatahet
NMIH307,Lecture,Sunday,12:00,15:00,6.30-Multipurpose - Teaching & Research,Sarah Hatahet
NMIH319,Lecture,Sunday,08:30,11:30,3.42-Classroom B,Ibrahim Alananzeh
OPS350,Lecture,Tuesday,13:30,15:30,3.46-Classroom A,Flevy Lasrado
OPS350,Tutorial,Tuesday,15:30,17:30,3.46-Classroom A,Flevy Lasrado
OPS802,Lecture,Thursday,18:00,22:00,4.45-Classroom B,Lina Gharaibeh
OPS908,Lecture,Monday,18:00,22:00,5.11-Classroom B,Balan Sundarkani
OPS908,Lecture,Wednesday,18:00,22:00,3.45-Classroom B,Balan Sundarkani
OPS922,Lecture,Tuesday,18:00,22:00,4.50-Classroom B,Balan Sundarkani
OPS935,Lecture,Wednesday,18:00,22:00,4.45-Classroom B,Lina Gharaibeh
OPS935,Lecture,Friday,18:00,22:00,4.48-Classroom B,Lina Gharaibeh
PHY040,Computer Lab,Tuesday,08:30,10:30,3.53-Physics/Robotics Lab,Baharek Tajali
PHY040,Lecture,Friday,14:30,16:30,6.28-Seminar/Tutorial,Hazem Gouda
PHYS143,Computer Lab,Thursday,10:30,12:30,3.53-Physics/Robotics Lab,Nayab Nadeem
PHYS143,Computer Lab,Monday,12:30,14:30,3.53-Physics/Robotics Lab,Nayab Nadeem
PHYS143,Computer Lab,Thursday,08:30,10:30,3.53-Physics/Robotics Lab,Habiba Ahmed
PHYS143,Computer Lab,Thursday,14:30,16:30,3.53-Physics/Robotics Lab,Habiba Ahmed
PHYS143,Computer Lab,Monday,16:30,18:30,3.53-Physics/Robotics Lab,Eva Barbulescu
PHYS143,Computer Lab,Monday,14:30,16:30,3.53-Physics/Robotics Lab,Eva Barbulescu
PHYS143,Lecture A,Tuesday,16:30,18:30,3.44-Classroom B,Mervat Madi
PHYS143,Lecture A,Tuesday,16:30,18:30,3.44-Classroom B,Obada Al Khatib
PHYS143,Lecture B,Wednesday,12:30,14:30,3.44-Classroom B,Obada Al Khatib
PHYS143,Lecture B,Wednesday,12:30,14:30,3.44-Classroom B,Abeer El Khouly
PHYS143,Tutorial,Wednesday,14:30,16:30,6.38-Classroom B,Mary George
PHYS143,Tutorial,Wednesday,16:30,18:30,6.38-Classroom B,Mary George
PHYS143,Tutorial,Wednesday,14:30,16:30,4.50-Classroom B,Sana Sahir
PHYS143,Tutorial,Wednesday,16:30,18:30,5.17-Classroom VC,Sana Sahir
PSYC120,Lecture,Monday,12:30,14:30,5.12-Informal Classroom,Oliver Bones
PSYC120,Tutorial,Monday,09:30,11:30,5.12-Informal Classroom,Oliver Bones
PSYC121,Lecture,Thursday,12:30,14:30,5.12-Informal Classroom,Oliver Bones
PSYC121,Tutorial,Thursday,09:30,11:30,4.45-Classroom B,Oliver Bones
PUBH115,Lecture,Thursday,08:30,10:30,0.17-Lecture Theatre,Amina Khan
PUBH115,Tutorial,Thursday,10:30,12:30,3.46-Classroom A,Amina Khan
PUBH115,Tutorial,Thursday,12:30,14:30,3.46-Classroom A,Amina Khan
PUBH115,Tutorial,Thursday,10:30,12:30,4.48-Classroom B,Noor Suwwan
PUBH115,Tutorial,Thursday,12:30,14:30,5.17-Classroom VC,Noor Suwwan
PUBH115,Tutorial,Monday,12:30,14:30,5.19-Classroom A,Amina Khan
PUBH115,Tutorial,Friday,08:30,10:30,4.50-Classroom B,Noor Suwwan
PUBH115,Tutorial,Monday,09:30,11:30,5.17-Classroom VC,Amina Khan
PVT000,Tutorial A,Monday,13:30,16:30,5.08-Seminar / Tutorial,Hortence Kenswil
PVT000,Tutorial B,Tuesday,13:30,16:30,5.08-Seminar / Tutorial,Alison Webster
PVT000,Tutorial C,Thursday,13:30,16:30,4.53-Seminar/Tutorial,Magdalena Halim
RESH900,Lecture,Thursday,18:00,22:00,4.53-Seminar/Tutorial,Sourjo Mukherjee
RESH905,Lecture,Saturday,12:00,15:00,4.52-Classroom A,Khalil Yousef
RESH905,Lecture,Wednesday,18:00,21:00,3.42-Classroom B,Ibrahim Alananzeh
SMAH917,Lecture,Saturday,08:30,11:30,4.52-Classroom A,Jackie Chan
SNPG927,Lecture,Sunday,08:30,11:30,5.12-Informal Classroom,Suzanne Malt
SNPG959,Lecture,Sunday,12:00,15:00,3.42-Classroom B,Ibrahim Alananzeh
STAT040,Lecture,Tuesday,10:30,12:30,5.134-Classroom A 5.13 & 5.14,Baharek Tajali
STAT040,Workshop,Thursday,10:30,12:30,5.12-Informal Classroom,Baharek Tajali
STAT040,Workshop,Thursday,14:30,16:30,5.18-Classroom A,Baharek Tajali
STAT040,Workshop,Friday,08:30,10:30,5.17-Classroom VC,Baharek Tajali
STAT040,Workshop,Friday,10:30,12:30,5.17-Classroom VC,Baharek Tajali
VCD101,Lecture,Monday,14:30,16:30,3.44-Classroom B,Noor Yusoff
VCD101,Tutorial,Tuesday,16:30,18:30,5.15-MAC Lab,Mirna Kamel
VCD101,Tutorial,Thursday,12:30,14:30,5.15-MAC Lab,Mirna Kamel
VCD203,Lecture,Tuesday,10:30,12:30,5.15-MAC Lab,Ludmil Trenkov
VCD203,Lecture,Monday,15:30,17:30,5.15-MAC Lab,Ludmil Trenkov
VCD203,Tutorial,Thursday,14:30,16:30,5.15-MAC Lab,Mirna Kamel
VCD203,Tutorial,Tuesday,14:30,16:30,5.15-MAC Lab,Mirna Kamel
VCD390,Lecture,Monday,08:30,10:30,3.42-Classroom B,Noor Yusoff
VCD390,Tutorial,Tuesday,08:30,10:30,5.15-MAC Lab,Samira Sobeih

</file>

<file path="public\manifest.json">
{
  "name": "vacansee",
  "short_name": "vacansee",
  "icons": [
    {
      "src": "/public/web-app-manifest-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "/public/web-app-manifest-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable"
    }
  ],
  "theme_color": "#000000",
  "background_color": "#000000",
  "display": "standalone"
}

</file>

<file path="public\robots.txt">
User-agent: Googlebot
Disallow: /
User-agent: googlebot-image
Disallow: /
User-agent: *
Disallow: /
Disallow: /
Sitemap: https://vacansee.vercel.app

</file>

<file path="public\scheduleData.json">
[
  {
    "day": "Monday",
    "rooms": [
      {
        "room": "0.17",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "0.201",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.38",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.47",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.49",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.53",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.50",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.51",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.42",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.44",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.45",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.46",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.47",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.48",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.42",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.44",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.45",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.467",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.48",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.50",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.51",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.53",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.08",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.10",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.11",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.12",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.134",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.13",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.14",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.15",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.17",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.18",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.19",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.28",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.29",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.30",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.32",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.33",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.345",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.36",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.38",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "6.39",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.40",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "day": "Tuesday",
    "rooms": [
      {
        "room": "0.17",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "0.201",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.38",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.47",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.49",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.52",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.50",
        "availability": [
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.42",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.44",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.45",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.46",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.47",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.48",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.52",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.53",
        "availability": [
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.42",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.44",
        "availability": [
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.45",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.467",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.48",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.50",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.51",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.52",
        "availability": [
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.53",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.08",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.10",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.11",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.12",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.134",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.13",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.14",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.15",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.17",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.18",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.19",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.28",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.29",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.30",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.32",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.33",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.345",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.36",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.38",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "6.39",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.40",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "day": "Wednesday",
    "rooms": [
      {
        "room": "0.17",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "0.201",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.38",
        "availability": [
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.47",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.49",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.50",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.51",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.42",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.44",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.45",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.46",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.47",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.48",
        "availability": [
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.52",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.42",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.44",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.45",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.467",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.48",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.50",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.51",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.53",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.08",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.10",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.11",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.12",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.134",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.13",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.14",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.15",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.17",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.18",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.19",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.28",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "6.29",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.30",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.32",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.33",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "6.345",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.36",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.38",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.39",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.40",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "day": "Thursday",
    "rooms": [
      {
        "room": "0.17",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "0.201",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.38",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.47",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.49",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.52",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.53",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.50",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "2.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.42",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.44",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.45",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.46",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.47",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.48",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "3.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.53",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.42",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.44",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.45",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.467",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.48",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.50",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.51",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          1,
          1,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.53",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.08",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.10",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.11",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.12",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.134",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.13",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.14",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.15",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "5.17",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.18",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.19",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.28",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.29",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.30",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.32",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.33",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "6.345",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.36",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.38",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.39",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.40",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "day": "Friday",
    "rooms": [
      {
        "room": "0.17",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "0.201",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.38",
        "availability": [
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.47",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.49",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.51",
        "availability": [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.50",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.42",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.44",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.45",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.46",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.47",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.48",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.42",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.44",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.45",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.467",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.48",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.50",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "4.51",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.53",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.08",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.10",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.11",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.12",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.134",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.13",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.14",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.15",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.17",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.18",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.19",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.28",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.29",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.30",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "6.32",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.33",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "room": "6.345",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.36",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.38",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.39",
        "availability": [
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.40",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "day": "Saturday",
    "rooms": [
      {
        "room": "0.17",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "0.201",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.38",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.47",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.49",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.52",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.50",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.42",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.44",
        "availability": [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.45",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.46",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.47",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.48",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.52",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.42",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.44",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.45",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.467",
        "availability": [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.48",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.50",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.52",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.08",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.10",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.11",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.12",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.134",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.13",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.14",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.15",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.17",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.18",
        "availability": [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.19",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.28",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.29",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.30",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.32",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.33",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.345",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.36",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.38",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.39",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.40",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "day": "Sunday",
    "rooms": [
      {
        "room": "0.17",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "0.201",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.38",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.47",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.49",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.52",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "1.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.50",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "2.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.42",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.44",
        "availability": [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.45",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.46",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.47",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.48",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.52",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "3.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.42",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.44",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.45",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.467",
        "availability": [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.48",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.50",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.51",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.52",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "4.53",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.08",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.10",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.11",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.12",
        "availability": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.134",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.13",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.14",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.15",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.17",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.18",
        "availability": [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "5.19",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.28",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.29",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.30",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.32",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.33",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.345",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.36",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.38",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.39",
        "availability": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "room": "6.40",
        "availability": [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  }
]
</file>

<file path="README.md">
# vacansee 🎓

[![forthebadge](https://forthebadge.com/images/badges/built-with-love.svg)](https://forthebadge.com) [![forthebadge](https://forthebadge.com/images/badges/built-with-resentment.svg)](https://forthebadge.com) [![forthebadge](https://forthebadge.com/images/badges/for-you.svg)](https://forthebadge.com)

A modern web application designed to help students find available rooms on campus. Built with Next.js, Prisma, and TypeScript.

## Features 🚀

- **Real-time Room Availability** - Check which rooms are currently available
- **Room Search** - Search for specific rooms and their availability
- **Visual Timetable** - View room schedules in an interactive graph
- **Automatic Updates** - Timetable data is automatically updated daily
- **Mobile Responsive** - Works seamlessly on all devices

## Tech Stack 💻

- **Frontend**: Next.js, TypeScript, TailwindCSS
- **Backend**: Next.js API Routes, [Prisma](https://www.prisma.io/orm)
- **Database**: PostgreSQL hosted on [Supabase](https://supabase.com)
- **Deployment**: [Vercel](https://vercel.com)
- **Data Updates**: [GitHub Actions](https://github.com/actions)
- **Styling**: [Tailwind CSS](https://tailwindcss.com/) with custom animations
- **Badges**: [ForTheBadge](https://forthebadge.com)
- **AI Assistance**: [Google AI Studio](https://www.aistudio.google.com/)

## Getting Started 🏁

### Prerequisites

- Node.js 16+
- npm or yarn
- PostgreSQL database

### Installation

1. Clone the repository

```bash
git clone https://github.com/tahayparker/vacansee.git
cd vacansee
```

2. Install dependencies

```bash
npm install
# or
yarn install
```

3. Set up environment variables

```bash
# Create a .env file with the following variables
DATABASE_URL="postgresql://username:password@localhost:5432/vacansee"
```

4. Initialize the database

```bash
npx prisma db push
```

5. Run the development server

```bash
npm run dev
# or
yarn dev
```

The application will be available at `http://localhost:3000`

## Automatic Updates ⚡

The timetable data is automatically updated every day at 00:00 GST (04:00 UTC) using GitHub Actions. The workflow:

1. Scrapes the latest timetable data
2. Updates the database
3. Generates a new schedule JSON
4. Commits the changes

## Contributing 🤝

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## Inspiration ✨

- Built for my friends so they can stop eating my head and finally use a website to search empty rooms
- Inspired by the need for an easier way to find available rooms

## Acknowledgments 🙏

- Thank you Mom Dad for not kicking me out of the house
- Thank you Claude & OpenAI engineers for making a really good product
- Thank you Cursor devs for making a really really amazing product, and for the free trial
- Thank you UOWD for finally getting rid of the PDF timetable and switching to the [website](https://my.uowdubai.ac.ae/timetable/viewer) instead (please keep it open for non-authenticated users, otherwise this project will die </3)

## Contact 📧

Taha Parker - [@tahayparker](https://github.com/tahayparker)

Project Link: [https://github.com/tahayparker/vacansee](https://github.com/tahayparker/vacansee)

[![forthebadge](https://forthebadge.com/images/badges/open-source.svg)](https://forthebadge.com)[![forthebadge](https://forthebadge.com/images/badges/powered-by-black-magic.svg)](https://forthebadge.com)[![forthebadge](https://forthebadge.com/images/badges/it-works-dont-ask-me-how.svg)](https://forthebadge.com)

</file>

<file path="scripts\db_connection.py">
# \scripts\db_connection.py
import os
from dotenv import load_dotenv
# Import ClientOptions if you might use it for other settings like headers/schema later
from supabase import create_client, Client, ClientOptions

# Load environment variables from .env file in the current directory
load_dotenv()

def get_supabase_client() -> Client:
    """
    Initializes and returns a Supabase client instance using environment variables.

    Uses the SERVICE ROLE KEY for administrative access, bypassing RLS.
    Ensure the key is kept secret and secure. For supabase==2.15.0, specific auth
    options like auto_refresh_token are not passed directly to ClientOptions.
    """
    url = os.getenv("SUPABASE_URL")
    key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

    if not url:
        raise ValueError("Supabase URL not set in environment variables (SUPABASE_URL).")
    if not key:
        raise ValueError("Supabase Service Role Key not set in environment variables (SUPABASE_SERVICE_ROLE_KEY).")

    try:
        # --- Corrected Options for supabase==2.15.0 ---
        # Initialize ClientOptions without the auth-related arguments that caused the TypeError.
        # The library likely handles defaults appropriately when the service key is provided.
        # If you needed to set headers or schema, you would pass them here, e.g.:
        # options = ClientOptions(schema="public", headers={"X-Custom": "Value"})
        options = ClientOptions() # Create default options object
        # --- End Correction ---

        # Pass the ClientOptions instance using the 'options' keyword argument.
        # Alternatively, you could try passing options=None or omitting it if
        # ClientOptions() is not needed, but this is safer for future additions.
        supabase: Client = create_client(url, key, options=options)

        print("Supabase client initialized successfully (using Service Role Key - RLS bypassed).")
        return supabase
    except Exception as e:
        print(f"Error initializing Supabase client: {e}")
        raise # Re-raise the exception after printing
</file>

<file path="scripts\generate_schedule.py">
# \scripts\generate_schedule.py
# pylint: disable=invalid-name, broad-except, logging-fstring-interpolation

import json
import sys
import traceback
from pathlib import Path
from collections import defaultdict
from typing import List, Dict, Any, Tuple, DefaultDict  # Added type hints

# Third-party imports (adjust based on actual client if needed)
from postgrest.exceptions import APIError
from httpx import RequestError

# Local imports
from db_connection import get_supabase_client

# --- Constants ---
DAYS_OF_WEEK = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
]
TIME_SLOTS = [
    "08:30",
    "09:00",
    "09:30",
    "10:00",
    "10:30",
    "11:00",
    "11:30",
    "12:00",
    "12:30",
    "13:00",
    "13:30",
    "14:00",
    "14:30",
    "15:00",
    "15:30",
    "16:00",
    "16:30",
    "17:00",
    "17:30",
    "18:00",
    "18:30",
    "19:00",
    "19:30",
    "20:00",
    "20:30",
    "21:00",
    "21:30",
    "22:00",
    "22:30",
]
SCRIPT_DIR = Path(__file__).parent
OUTPUT_JSON_PATH = SCRIPT_DIR.parent / "public" / "scheduleData.json"

# --- Supabase Client Initialization ---
try:
    supabase = get_supabase_client()
except ValueError as config_err:
    print(f"Configuration Error: {config_err}", file=sys.stderr)
    sys.exit("Exiting due to missing Supabase configuration.")
except Exception as init_err:
    print(f"Unexpected error initializing Supabase client: {init_err}", file=sys.stderr)
    sys.exit("Exiting due to Supabase client initialization failure.")

# --- Functions ---

RoomInfo = Dict[str, str]
TimingsDict = DefaultDict[str, DefaultDict[str, List[Tuple[str, str]]]]


def fetch_rooms_data() -> List[RoomInfo]:
    """
    Fetches rooms to include in the schedule from the 'Rooms' table.
    Returns a list of dictionaries, each containing 'short_code' and 'full_name'.
    Excludes rooms where the Name is exactly 'Consultation' or 'Online'.
    """
    print("Fetching rooms data from Supabase (excluding 'Consultation', 'Online')...")
    rooms_info: List[RoomInfo] = []
    try:
        # Fetch ShortCode and Name
        # Use .neq() to exclude specific exact names
        response = (
            supabase.table("Rooms")
            .select("ShortCode, Name")
            .neq("Name", "Consultation")
            .neq("Name", "Online")
            .order("Name", desc=False)
            .execute()
        )

        if response.data:
            for room in response.data:
                if room.get("ShortCode") and room.get("Name"):
                    rooms_info.append(
                        {"short_code": room["ShortCode"], "full_name": room["Name"]}
                    )
            print(f"Filtered rooms fetched: {len(rooms_info)}")
            # print(f"Rooms data: {rooms_info}")
            return rooms_info
        else:
            print("No rooms found matching the criteria.")
            return []
    except (APIError, RequestError) as db_err:
        print(
            f"Error fetching rooms: {type(db_err).__name__} - {db_err}", file=sys.stderr
        )
    except Exception as e:
        print(f"Unexpected error fetching rooms: {e}", file=sys.stderr)
        traceback.print_exc()

    raise RuntimeError("Failed to fetch rooms data.")


def fetch_all_timings() -> TimingsDict:
    """
    Fetches all timings and organizes them by Day and Full Room Name.
    Returns defaultdict: timings_by_day[day][full_room_name] = list of (start, end)
    """
    print("Fetching all timings from Supabase...")
    timings_by_day: TimingsDict = defaultdict(lambda: defaultdict(list))
    try:
        response = (
            supabase.table("Timings").select("Day, Room, StartTime, EndTime").execute()
        )

        if response.data:
            processed_count = 0
            for timing in response.data:
                day = timing.get("Day")
                full_room_name = timing.get("Room")
                start_time = timing.get("StartTime")
                end_time = timing.get("EndTime")

                if day and full_room_name and start_time and end_time:
                    timings_by_day[day][full_room_name].append((start_time, end_time))
                    processed_count += 1

            print(f"Fetched and processed {processed_count} valid timing entries.")
            return timings_by_day
        else:
            print("No timings found in the database.")
            return timings_by_day
    except (APIError, RequestError) as db_err:
        print(
            f"Error fetching timings: {type(db_err).__name__} - {db_err}",
            file=sys.stderr,
        )
    except Exception as e:
        print(f"Unexpected error fetching timings: {e}", file=sys.stderr)
        traceback.print_exc()

    raise RuntimeError("Failed to fetch timings data.")


def is_slot_available(
    slot_start: str, slot_end: str, room_timings: List[Tuple[str, str]]
) -> bool:
    """
    Checks if a given time slot overlaps with any existing timings for a room.
    """
    for timing_start, timing_end in room_timings:
        if timing_start < slot_end and timing_end > slot_start:
            return False
    return True


def generate_schedule_data(
    rooms_to_schedule: List[RoomInfo], all_timings: TimingsDict
) -> List[Dict[str, Any]]:
    """
    Generates schedule availability data for given rooms and timings.
    Uses Full Room Name for lookup, but outputs ShortCode in the JSON.
    """
    print("Starting schedule data generation...")
    schedule: List[Dict[str, Any]] = []

    for day in DAYS_OF_WEEK:
        print(f"Processing day: {day}")
        day_data: Dict[str, Any] = {"day": day, "rooms": []}
        timings_for_day: DefaultDict[str, List[Tuple[str, str]]] = all_timings.get(
            day, defaultdict(list)
        )

        for room_info in rooms_to_schedule:
            room_short_code = room_info["short_code"]
            room_full_name = room_info["full_name"]

            room_output_data = {"room": room_short_code, "availability": []}
            timings_for_this_room = timings_for_day.get(room_full_name, [])

            slot_count = len(TIME_SLOTS)
            for i in range(slot_count - 1):
                start_time = TIME_SLOTS[i]
                end_time = TIME_SLOTS[i + 1]
                available = is_slot_available(
                    start_time, end_time, timings_for_this_room
                )
                room_output_data["availability"].append(1 if available else 0)

            day_data["rooms"].append(room_output_data)

        schedule.append(day_data)

    print("Schedule data generation complete.")
    return schedule


def save_schedule_to_json(schedule_data: List[Dict[str, Any]]) -> bool:
    """Saves the generated schedule data to a JSON file. Returns True on success."""
    print(f"Saving schedule data to JSON file: {OUTPUT_JSON_PATH}...")
    try:
        OUTPUT_JSON_PATH.parent.mkdir(parents=True, exist_ok=True)
        with OUTPUT_JSON_PATH.open("w", encoding="utf-8") as file:
            json.dump(schedule_data, file, indent=2)
        print(f"Schedule data saved successfully to {OUTPUT_JSON_PATH.resolve()}")
        return True
    except (IOError, OSError) as file_err:
        print(f"Error saving JSON file: {file_err}", file=sys.stderr)
    except TypeError as json_err:
        print(f"Error converting data to JSON: {json_err}", file=sys.stderr)
    except Exception as e:
        print(f"An unexpected error occurred during JSON saving: {e}", file=sys.stderr)
        traceback.print_exc()

    return False


# --- Main Execution ---
if __name__ == "__main__":
    print("Starting schedule generation process...")
    final_success = False
    try:
        room_info_list = fetch_rooms_data()
        all_timings_data = fetch_all_timings()

        if room_info_list:
            generated_schedule = generate_schedule_data(
                room_info_list, all_timings_data
            )
            final_success = save_schedule_to_json(generated_schedule)
        else:
            print("Cannot generate schedule as no rooms were found or fetched.")
            final_success = False

    except (RuntimeError, Exception) as main_err:
        print(f"Script failed: {main_err}", file=sys.stderr)
        final_success = False

    if final_success:
        print("Script finished successfully.")
        sys.exit(0)
    else:
        print("Script finished with errors.", file=sys.stderr)
        sys.exit(1)

</file>

<file path="scripts\requirements.txt">
beautifulsoup4
cloudscraper
httpx
postgrest
python-dotenv
supabase
</file>

<file path="scripts\scrape_timetable.py">
# \scripts\scrape_timetable.py

# pylint: disable=invalid-name, too-many-lines, too-many-locals, too-many-statements
# pylint: disable=too-many-branches, broad-except


import argparse
import csv
import json
import random
import re
import sys
import time
import datetime # Ensure datetime is imported
import traceback
from pathlib import Path
from typing import Optional, Dict, List, Any

# Third-party imports
import cloudscraper
from bs4 import BeautifulSoup, Tag  # Added Tag for type hinting
from httpx import RequestError, HTTPStatusError, TimeoutException
from postgrest.exceptions import APIError  # If using supabase-py v1 or similar

# Local imports
from db_connection import get_supabase_client

# --- Constants ---
BASE_URL = "https://my.uowdubai.ac.ae/timetable/viewer"
DEFAULT_TIMEOUT = 45
MAX_RETRIES = 5
LINE_LENGTH_LIMIT = 99


# --- Helper Functions ---
def normalize_whitespace(text: Optional[str]) -> str:
    """
    Replaces consecutive whitespace chars with a single space
    and strips leading/trailing whitespace. Returns empty string if input is None.
    """
    if not isinstance(text, str):
        return ""  # Return empty string for None or non-string types
    return " ".join(text.split())


def format_time_to_hh_mm(time_str: Optional[str]) -> str:
    """
    Converts a time string from formats like 'H:mm' or 'HH:mm' to 'HH:mm'.
    Examples: "8:30" -> "08:30", "14:00" -> "14:00".
    Returns an empty string if the input is None, empty, or just whitespace.
    Returns the original (normalized) string if parsing fails, with a warning.
    """
    if time_str is None:
        return ""

    normalized_time = normalize_whitespace(time_str)
    if not normalized_time:  # Handles empty string or string with only whitespace
        return ""

    try:
        # datetime.strptime with %H can parse single-digit hours (e.g., "8")
        # and double-digit hours (e.g., "08" or "14").
        # It expects minutes to be two digits (e.g., "05", "30").
        dt_obj = datetime.datetime.strptime(normalized_time, "%H:%M")
        # datetime.strftime with %H:%M will format it with a leading zero for the hour if needed.
        return dt_obj.strftime("%H:%M")
    except ValueError:
        # This occurs if normalized_time is not in a recognizable "H:M" or "HH:MM" format.
        print(
            f"Warning: Could not parse time '{normalized_time}' to HH:MM format. "
            "Using the normalized original string."
        )
        return normalized_time


# --- Supabase Client Initialization ---
try:
    supabase = get_supabase_client()
    print("Connected to Supabase (using Service Role Key - RLS bypassed).")
except ValueError as exc:
    print(f"Configuration Error: {exc}")
    sys.exit("Exiting due to missing Supabase configuration.")
except Exception as exc:  # Catch other potential init errors
    print(f"Unexpected error initializing Supabase client: {exc}")
    sys.exit("Exiting due to Supabase client initialization failure.")


# --- Fetch Room Mapping (ShortCode -> Name) ---
def fetch_room_mapping() -> Dict[str, str]:
    """Fetches room ShortCode to Name mapping from Supabase"""
    print("Fetching room mapping (ShortCode -> Name) from Supabase...")
    room_mapping: Dict[str, str] = {}
    try:
        response = (
            supabase.table("Rooms")
            .select("Name, ShortCode")
            .neq("Name", "%Consultation%")
            .neq("Name", "%Online%")
            .execute()
        )

        if response.data:
            for row in response.data:
                short_code = row.get("ShortCode")
                name = row.get("Name")
                # Normalize both before storing/using
                if short_code and name:
                    norm_short_code = normalize_whitespace(short_code)
                    norm_name = normalize_whitespace(name)
                    if (
                        norm_short_code and norm_name
                    ):  # Ensure not empty after normalize
                        # ShortCode is key, Name is value
                        room_mapping[norm_short_code] = norm_name

            print(
                f"Room mapping (ShortCode -> Name) fetched: "
                f"{len(room_mapping)} entries."
            )
            # Sort keys by length descending - helps prioritize longer matches
            sorted_keys = sorted(room_mapping.keys(), key=len, reverse=True)
            sorted_room_mapping = {key: room_mapping[key] for key in sorted_keys}
            # print(f"Mapping fetched (sorted): {sorted_room_mapping}")
            return sorted_room_mapping
        else:
            print(
                "Warning: No rooms found in Supabase matching criteria " "for mapping."
            )
            return {}

    except APIError as api_exc:
        print(f"Supabase API Error fetching room mapping: {api_exc}")
        print(f"  Details: {getattr(api_exc, 'details', 'N/A')}")
        return {}
    except RequestError as req_exc:
        print(f"Network Error fetching room mapping: {req_exc}")
        return {}
    except Exception as gen_exc:  # Catch other unexpected errors during fetch
        print(f"Unexpected error fetching room mapping: {gen_exc}")
        traceback.print_exc()
        return {}


# Global room mapping fetched once (Normalized ShortCode -> Normalized Name), sorted
ROOM_MAPPING: Dict[str, str] = fetch_room_mapping()
# --- End Mapping Fetch ---


class TimetableScraper:
    """Scrapes timetable data from UOW Dubai website."""

    def __init__(self):
        """Initialize scraper with cloudscraper instance and headers."""
        self.scraper = self.create_scraper()
        # self.semester_cache = {} # Consider removing if unused
        self.headers = {
            "Accept": (
                "text/html,application/xhtml+xml,application/xml;" "q=0.9,*/*;q=0.8"
            ),
            "Accept-Language": "en-US,en;q=0.5",
            "Referer": BASE_URL.split("/timetable", maxsplit=1)[0] + "/",
            "DNT": "1",
            "User-Agent": self.random_user_agent(),
        }
        print("TimetableScraper initialized.")

    def create_scraper(self) -> cloudscraper.CloudScraper:
        """Create a new cloudscraper instance."""
        print("Creating CloudScraper instance...")
        return cloudscraper.create_scraper(
            browser={
                "browser": "chrome",
                "platform": "windows",
                "desktop": True,
                "mobile": False,
            },
            delay=random.uniform(3, 7),
        )

    def random_user_agent(self) -> str:
        """Return a random user agent string from a predefined list."""
        user_agents = [
            (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                "(KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"
            ),
            (
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
                "AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 "
                "Safari/605.1.15"
            ),
            (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) "
                "Gecko/20100101 Firefox/107.0"
            ),
            (
                "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
                "(KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"
            ),
        ]
        return random.choice(user_agents)

    def get_current_semester_text(self) -> str:
        # pylint: disable=too-many-return-statements
        """
        Return the current semester text based on date.
        Normalizes the generated text just in case.
        """
        today = datetime.datetime.now()
        year = today.year
        current_month = today.month
        current_week = (today.day - 1) // 7 + 1

        semester_text = "Unknown Semester"  # Default

        if current_month in [1, 2]:
            semester_text = f"Winter {year}"
        elif current_month == 3:
            semester_text = f"Winter {year}" if current_week <= 3 else f"Spring {year}"
        elif current_month in [4, 5]:
            semester_text = f"Spring {year}"
        elif current_month == 6:
            semester_text = f"Spring {year}"
        elif current_month == 7:
            semester_text = f"Summer {year}"
        elif current_month == 8:
            semester_text = f"Summer {year}" if current_week <= 2 else f"Autumn {year}"
        elif current_month in [9, 10, 11]:
            semester_text = f"Autumn {year}"
        elif current_month == 12:
            semester_text = f"Autumn {year}" if current_week <= 1 else f"Winter {year}"

        if semester_text == "Unknown Semester":
            print("Warning: Could not determine semester for current date.")

        return normalize_whitespace(semester_text)  # Normalize before returning

    def fetch_page(
        self, url: str, max_retries: int = MAX_RETRIES, timeout: int = DEFAULT_TIMEOUT
    ) -> cloudscraper.requests.Response:
        """Fetch a page with retries and handling specific errors."""
        print(f"Attempting to fetch: {url}")
        last_exception: Optional[Exception] = None  # Keep track of the last error

        for attempt in range(max_retries):
            try:
                self.headers["User-Agent"] = self.random_user_agent()
                ua_short = self.headers["User-Agent"][:30]
                print(f"  Attempt {attempt+1}/{max_retries} with UA: {ua_short}...")

                response = self.scraper.get(url, headers=self.headers, timeout=timeout)
                response.raise_for_status()

                print(f"  Successfully fetched {url} (Status: {response.status_code})")
                time.sleep(random.uniform(1, 4))
                return response

            # Specific error handling
            except cloudscraper.exceptions.CloudflareChallengeError as cf_exc:
                print(f"  Attempt {attempt+1} failed: Cloudflare challenge. {cf_exc}")
                print("  Recreating scraper and waiting longer...")
                self.scraper = self.create_scraper()
                wait_time = random.uniform(10, 25)
                time.sleep(wait_time)
                last_exception = cf_exc
            except HTTPStatusError as http_err:
                print(
                    f"  Attempt {attempt+1} failed: HTTP Error "
                    f"{http_err.response.status_code} for url {url}. {http_err}"
                )
                last_exception = http_err
            except TimeoutException as timeout_err:
                print(f"  Attempt {attempt+1} failed: Request timed out. {timeout_err}")
                last_exception = timeout_err
            except RequestError as req_err:
                print(f"  Attempt {attempt+1} failed: Network error. {req_err}")
                last_exception = req_err
            except Exception as exc:
                print(f"  Attempt {attempt+1} failed: Unexpected error. {exc}")
                traceback.print_exc()
                last_exception = exc

            # Wait before retrying if it wasn't the last attempt
            if attempt < max_retries - 1:
                wait_time = random.uniform(5, 15) * (attempt + 1)
                print(f"  Waiting {wait_time:.2f} seconds before retrying...")
                time.sleep(wait_time)
            else:
                print(f"  Max retries reached for {url}. Raising last error.")
                # Raise the last exception encountered if all retries fail
                if last_exception:
                    raise last_exception
                # Should not happen if loop ran, but safety fallback
                raise RuntimeError(
                    f"Failed to fetch {url} after {max_retries} "
                    "attempts, but no exception was recorded."
                )

        # Should only be reached if max_retries is 0 (or logic error)
        raise RuntimeError(f"Loop finished unexpectedly for fetch_page({url}).")

    def extract_semester_ids(self, html_content: str) -> Dict[str, str]:
        """Extract semester IDs and labels from the base page HTML."""
        print("Extracting semester IDs...")
        semesters: Dict[str, str] = {}
        try:
            soup = BeautifulSoup(html_content, "html.parser")
            selector = "div.custom-control.custom-radio, div.form-check"

            for div in soup.select(selector):
                radio: Optional[Tag] = div.find(
                    "input", {"type": "radio", "name": re.compile(r"semester", re.I)}
                )
                label: Optional[Tag] = div.find("label")

                if radio and label and radio.has_attr("value"):
                    # Get text and normalize whitespace immediately
                    label_text = normalize_whitespace(label.get_text())
                    value = radio["value"]
                    if label_text and value:  # Ensure not empty after normalizing
                        semesters[label_text] = value
                        # Log the *normalized* label found
                        print(f"  Found semester: '{label_text}' -> ID: {value}")

            if not semesters:
                print(
                    "Warning: Could not find any semester radio buttons using "
                    f"selector '{selector}'."
                )
            return semesters
        except Exception as exc:
            print(f"Error parsing HTML for semester IDs: {exc}")
            traceback.print_exc()
            return {}

    def get_target_semester_id(self, base_page_html: str) -> Optional[str]:
        """Find the semester ID that matches the current target semester."""
        print("Determining target semester ID...")
        # Ensure target text is also normalized for comparison
        target_semester_text = self.get_current_semester_text()
        print(f"  Target semester text (normalized): '{target_semester_text}'")
        available_semesters = self.extract_semester_ids(base_page_html)

        if not available_semesters:
            print("Error: No semesters found on the page.")
            return None

        # Comparison uses lower case but relies on normalized spacing
        target_lower = target_semester_text.lower()

        # Try exact match first
        for label, sid in available_semesters.items():
            if target_lower == label.lower():
                print(f"  Found exact match: '{label}' -> ID: {sid}")
                return sid

        # Try partial match (contains)
        for label, sid in available_semesters.items():
            if target_lower in label.lower():
                print(f"  Found partial match: '{label}' -> ID: {sid}")
                return sid

        # Fallback to the *first* available semester if no match found
        try:
            fallback_sid = next(iter(available_semesters.values()))
            fallback_label = next(
                key
                for key, value in available_semesters.items()
                if value == fallback_sid
            )
            print(
                f"  Warning: No match found for '{target_semester_text}'. "
                f"Falling back to first available: '{fallback_label}' -> "
                f"ID: {fallback_sid}"
            )
            return fallback_sid
        except StopIteration:
            print(
                f"  Warning: No match found for '{target_semester_text}' "
                "and no fallback available."
            )
            return None

    def extract_timetable_data(self, timetable_page_html: str) -> Optional[List[Dict]]:
        """Extract timetable data JSON embedded in the page's script tags."""
        print("Extracting timetable data from HTML script...")
        try:
            soup = BeautifulSoup(timetable_page_html, "html.parser")
            scripts: List[Tag] = soup.find_all("script")

            for script in scripts:
                if script.string and "timetableData" in script.string:
                    regex = r"timetableData\s*=\s*(\[.*\])\s*;"
                    match = re.search(regex, script.string, re.DOTALL | re.MULTILINE)
                    if match:
                        json_str = match.group(1)
                        try:
                            timetable_data: List[Dict] = json.loads(json_str)
                            count = len(timetable_data)
                            print(
                                f"  Successfully extracted timetableData JSON "
                                f"({count} entries)."
                            )
                            return timetable_data
                        except json.JSONDecodeError as json_err:
                            print(f"Error decoding timetableData JSON: {json_err}")
                            return None
                    else:
                        print(
                            "  Found script with 'timetableData' but regex "
                            "didn't match expected structure."
                        )

            print("Error: Could not find 'timetableData' variable in any script tag.")
            return None
        except Exception as exc:
            print(f"Error parsing HTML for timetable data: {exc}")
            traceback.print_exc()
            return None

    def process_data_to_csv(
        self, raw_data: List[Dict[str, Any]], output_path: Path
    ) -> None:
        # pylint: disable=too-many-nested-blocks
        """Process raw data and write to CSV, using prefix mapping as fallback."""
        print(
            f"Processing {len(raw_data)} raw entries and writing to CSV: "
            f"{output_path}..."
        )
        processed_count = 0
        required_fields = [
            "subject_code",
            "location",
            "week_day",
            "start_time",
            "end_time",
        ]

        try:
            output_path.parent.mkdir(parents=True, exist_ok=True)

            with output_path.open("w", newline="", encoding="utf-8") as csvfile:
                fieldnames = [
                    "SubCode",
                    "Class",
                    "Day",
                    "StartTime",
                    "EndTime",
                    "Room",
                    "Teacher",
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()

                for entry in raw_data:
                    if not all(entry.get(field) for field in required_fields):
                        continue

                    # Normalize locations immediately after splitting and stripping
                    raw_locations = entry.get("location", "").split(";")
                    locations = [
                        normalize_whitespace(loc)
                        for loc in raw_locations
                        if loc.strip()
                    ] or [
                        "Unknown"
                    ]  # Ensure Unknown is also normalized if used

                    # Normalize teachers immediately
                    raw_lecturers = entry.get("lecturer", "").split(";")
                    teachers = [
                        normalize_whitespace(t) for t in raw_lecturers if t.strip()
                    ] or [normalize_whitespace("Unknown")]

                    # Iterate through normalized locations
                    for loc_full_norm in locations:

                        # --- Room Name Logic (Prefix Matching on Normalized) ---
                        final_room_name = loc_full_norm  # Default

                        # Check against normalized mapping keys/values
                        for short_code_norm, full_name_norm in ROOM_MAPPING.items():
                            if loc_full_norm.startswith(short_code_norm):
                                if loc_full_norm != full_name_norm:
                                    print(
                                        f"  Mapping Applied: Scraped/Norm "
                                        f"'{loc_full_norm}' starts with Norm "
                                        f"SC '{short_code_norm}'. Using Norm "
                                        f"FN '{full_name_norm}'."
                                    )
                                    final_room_name = full_name_norm
                                # Found most specific prefix match, stop checking
                                break
                        # --- End Room Name Logic ---

                        # Use normalized teacher names
                        for teacher_norm in teachers:
                            # Normalize other text fields just before writing
                            subcode = entry.get("subject_code", "").replace(" ", "")
                            class_type = normalize_whitespace(
                                entry.get("type_with_section", "")
                            )
                            day = normalize_whitespace(entry.get("week_day", ""))

                            # Get raw time strings
                            raw_start_time = entry.get("start_time")
                            raw_end_time = entry.get("end_time")

                            # Format time strings to HH:mm
                            start_time_str = format_time_to_hh_mm(raw_start_time)
                            end_time_str = format_time_to_hh_mm(raw_end_time)

                            row_data = {
                                "SubCode": subcode,
                                "Class": class_type,
                                "Day": day,
                                "StartTime": start_time_str, # Use formatted time
                                "EndTime": end_time_str,   # Use formatted time
                                "Room": final_room_name,  # Already normalized/mapped
                                "Teacher": teacher_norm,  # Already normalized
                            }
                            writer.writerow(row_data)
                            processed_count += 1

            print(
                f"Successfully processed and wrote {processed_count} rows to "
                f"{output_path.resolve()}"
            )

        except (IOError, OSError) as file_err:
            print(f"Error writing CSV file '{output_path}': {file_err}")
            raise
        except csv.Error as csv_err:
            print(f"Error processing CSV data: {csv_err}")
            raise
        except Exception as proc_err:
            print(f"An unexpected error occurred during data processing: {proc_err}")
            traceback.print_exc()
            raise

    def scrape(self, output_csv_path: Path) -> bool:
        """Main scraping orchestration logic."""
        print("Starting timetable scraping process...")
        start_time_proc = time.time() # Renamed to avoid conflict with time module

        try:
            print("\n--- Step 1: Fetching Base Page ---")
            base_response = self.fetch_page(BASE_URL)

            print("\n--- Step 2: Determining Semester ID ---")
            semester_id = self.get_target_semester_id(base_response.text)
            if not semester_id:
                raise RuntimeError(
                    "Fatal: Could not determine target " "semester ID. Exiting."
                )

            print("\n--- Step 3: Fetching Timetable Page ---")
            target_url = f"{BASE_URL}?semester={semester_id}"
            final_response = self.fetch_page(target_url)

            print("\n--- Step 4: Extracting Timetable Data ---")
            timetable_data = self.extract_timetable_data(final_response.text)
            if not timetable_data:
                raise RuntimeError(
                    "Fatal: Failed to extract timetable data " "from the page. Exiting."
                )

            print("\n--- Step 5: Processing Data and Saving to CSV ---")
            self.process_data_to_csv(timetable_data, output_csv_path)

            end_time_proc = time.time() # Renamed to avoid conflict
            duration = end_time_proc - start_time_proc
            print(f"\nScraping completed successfully in {duration:.2f} seconds.")
            return True

        # Catch specific known errors first
        except (
            RuntimeError,
            IOError,
            csv.Error,
            RequestError,
            HTTPStatusError,
            TimeoutException,
            APIError,
            cloudscraper.exceptions.CloudflareChallengeError,
            json.JSONDecodeError,
        ) as known_err:
            end_time_proc = time.time() # Renamed
            duration = end_time_proc - start_time_proc
            print(
                f"\nScraping failed after {duration:.2f} seconds: "
                f"{type(known_err).__name__} - {known_err}"
            )
            return False
        except Exception as unknown_err:  # Catch truly unexpected errors
            end_time_proc = time.time() # Renamed
            duration = end_time_proc - start_time_proc
            print(
                f"\nScraping failed unexpectedly after {duration:.2f} seconds: "
                f"{type(unknown_err).__name__} - {unknown_err}"
            )
            traceback.print_exc()
            return False


def main():
    """Main script entry point: Parse args and run scraper."""
    parser = argparse.ArgumentParser(
        description="Scrape UOW Dubai timetable data and save to CSV."
    )
    parser.add_argument(
        "--output",
        required=True,
        help="Output CSV file path (e.g., ./public/classes.csv)",
        type=Path,
    )
    args = parser.parse_args()
    output_path = args.output.resolve()
    print(f"Output CSV will be saved to: {output_path}")

    scraper = TimetableScraper()
    success = scraper.scrape(output_path)

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()

</file>

<file path="scripts\upload_timetable.py">
import csv
import sys
import traceback
from pathlib import Path
from typing import List, Dict, Any  # Added type hints

# Third-party imports (adjust based on actual client if needed)
from postgrest.exceptions import APIError
from httpx import RequestError, HTTPStatusError

# Local imports
from db_connection import get_supabase_client

# --- Configuration ---
SCRIPT_DIR = Path(__file__).parent
# Assumes 'public' is one level up from 'scripts'
DEFAULT_CSV_PATH = SCRIPT_DIR.parent / "public" / "classes.csv"
TARGET_TABLE = "Timings"
BATCH_SIZE = 500

# --- Supabase Client Initialization ---
try:
    # This uses the SERVICE_ROLE_KEY by default, bypassing RLS
    supabase = get_supabase_client()
except ValueError as config_err:
    print(f"Configuration Error: {config_err}", file=sys.stderr)
    sys.exit("Exiting due to missing Supabase configuration.")
except Exception as init_err:
    print(f"Unexpected error initializing Supabase client: {init_err}", file=sys.stderr)
    sys.exit("Exiting due to Supabase client initialization failure.")


# --- Functions ---
def delete_existing_timings() -> bool:
    """Deletes all existing rows from the target table using service key."""
    print(f"Attempting to delete all existing data from '{TARGET_TABLE}' table...")
    try:
        # Using '.gt("id", -1)' assumes 'id' is a non-null PK and targets all rows.
        # RLS is bypassed due to the service key.
        delete_response = supabase.table(TARGET_TABLE).delete().gt("id", -1).execute()
        deleted_count = (
            len(delete_response.data)
            if hasattr(delete_response, "data")
            else "Unknown number of"
        )
        print(
            f"Successfully deleted {deleted_count} existing rows from '{TARGET_TABLE}'."
        )
        return True

    except (APIError, RequestError, HTTPStatusError) as db_err:
        print(
            f"Error deleting data from '{TARGET_TABLE}': {type(db_err).__name__} - {db_err}",
            file=sys.stderr,
        )
    except Exception as e:
        print(
            f"Unexpected error deleting data from '{TARGET_TABLE}': {e}",
            file=sys.stderr,
        )
        traceback.print_exc()

    print("Upload process aborted due to deletion failure.", file=sys.stderr)
    return False


def insert_timings_from_csv(csv_path: Path) -> bool:
    """
    Reads the CSV and inserts data into the target table in batches.
    Returns True if the entire process completes without error, False otherwise.
    """
    print(f"Reading data from CSV: {csv_path}...")
    rows_to_insert: List[Dict[str, Any]] = []
    total_rows_in_csv = 0
    inserted_count = 0
    skipped_count = 0
    # --- Start of main try block ---
    try:
        if not csv_path.is_file():
            # Let the FileNotFoundError be caught below
            raise FileNotFoundError(f"CSV file not found at {csv_path}")

        with csv_path.open("r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            expected_headers = {
                "SubCode",
                "Class",
                "Day",
                "StartTime",
                "EndTime",
                "Room",
                "Teacher",
            }
            csv_headers = set(reader.fieldnames or [])

            if not expected_headers.issubset(csv_headers):
                missing = expected_headers - csv_headers
                extra = csv_headers - expected_headers
                err_msg = "CSV file header mismatch."
                if missing:
                    err_msg += f" Missing: {missing}."
                if extra:
                    err_msg += f" Extra: {extra}."
                # Let this ValueError be caught below
                raise ValueError(err_msg)

            print(f"CSV Headers look good: {reader.fieldnames}")

            # --- Process Rows and Insert Loop ---
            for i, row in enumerate(reader):
                total_rows_in_csv += 1
                insert_dict = {
                    "SubCode": row.get("SubCode"),
                    "Class": row.get("Class"),
                    "Day": row.get("Day"),
                    "StartTime": row.get("StartTime"),
                    "EndTime": row.get("EndTime"),
                    "Room": row.get("Room"),
                    "Teacher": row.get("Teacher"),
                }

                # Basic validation for non-empty required values
                if not all(insert_dict.get(h) for h in expected_headers):
                    print(
                        f"Warning: Skipping CSV row {i+1} due to missing/empty "
                        f"required data: {row}"
                    )
                    skipped_count += 1
                    continue

                rows_to_insert.append(insert_dict)

                # Insert in batches
                if len(rows_to_insert) >= BATCH_SIZE:
                    print(f"Inserting batch of {len(rows_to_insert)} rows...")
                    # The actual insert operation happens here. If it fails,
                    # it will raise an exception caught by the outer except blocks.
                    response = (
                        supabase.table(TARGET_TABLE).insert(rows_to_insert).execute()
                    )
                    inserted_count += (
                        len(response.data) if hasattr(response, "data") else 0
                    )
                    rows_to_insert = []  # Clear batch

            # Insert any remaining rows after the loop
            if rows_to_insert:
                print(f"Inserting final batch of {len(rows_to_insert)} rows...")
                response = supabase.table(TARGET_TABLE).insert(rows_to_insert).execute()
                inserted_count += len(response.data) if hasattr(response, "data") else 0
            # --- End Process Rows and Insert Loop ---

        # If we reach here, the file reading, parsing, and all inserts were successful
        print("-" * 30)
        print("Upload Summary:")
        print(f"  Total rows read from CSV: {total_rows_in_csv}")
        print(f"  Rows skipped: {skipped_count}")
        print(f"  Rows successfully inserted: {inserted_count}")
        print("-" * 30)
        return True  # Indicate success

    # --- Simplified Exception Handling ---
    except FileNotFoundError as fnf_err:
        print(f"Error: {fnf_err}", file=sys.stderr)
    except (
        ValueError,
        csv.Error,
    ) as csv_proc_err:  # Catches header errors & CSV format errors
        print(f"Error processing CSV file: {csv_proc_err}", file=sys.stderr)
    except (
        APIError,
        RequestError,
        HTTPStatusError,
    ) as db_err:  # Catches DB/Network errors during insert
        print(
            f"Error during database insertion: {type(db_err).__name__} - {db_err}",
            file=sys.stderr,
        )
        traceback.print_exc()  # Show details for these potentially complex errors
    except Exception as e:  # Catch-all for any other unexpected errors
        print(f"An unexpected error occurred during upload: {e}", file=sys.stderr)
        traceback.print_exc()

    # If any exception occurred, we end up here
    print("Upload process failed due to an error.", file=sys.stderr)
    return False  # Indicate failure
    # --- End Simplified Exception Handling ---


if __name__ == "__main__":
    print("Starting timetable upload process...")
    # You can add argparse here if you want to specify the CSV file via command line
    csv_file_to_upload = DEFAULT_CSV_PATH

    # Step 1: Delete existing data
    if delete_existing_timings():
        # Step 2: Insert new data from CSV
        if insert_timings_from_csv(csv_file_to_upload):
            print("Upload script finished successfully.")
            sys.exit(0)  # Exit with success code
        else:
            # Insertion failed, error message already printed by insert_timings_from_csv
            sys.exit(1)  # Exit with error code
    else:
        # Deletion failed, error message already printed by delete_existing_timings
        sys.exit(1)  # Exit with error code

</file>

<file path="src\components\GradientBackground.module.css">
.gradientBg {
  width: 100vw;
  height: 100vh;
  position: fixed;
  overflow: hidden;
  /* Darker radial gradient */
  background: radial-gradient(circle at center, rgb(25, 0, 50), rgb(0, 5, 20));
  /* Make background larger than viewport to allow movement */
  background-size: 400% 400%;
  /* Apply animation */
  animation: animateGradient 15s ease infinite;
  top: 0;
  left: 0;
  z-index: 0;
}

/* New keyframes for the background gradient animation */
@keyframes animateGradient {
  0% {
    background-position: 0% 50%;
  }
  25% {
    background-position: 100% 0%; /* Move top-right */
  }
  50% {
    background-position: 100% 100%; /* Move bottom-right */
  }
  75% {
    background-position: 0% 100%; /* Move bottom-left */
  }
  100% {
    background-position: 0% 50%; /* Return to start */
  }
}

</file>

<file path="src\components\GradientBackground.tsx">
import React from "react";
import styles from "./GradientBackground.module.css";

const GradientBackground: React.FC<{ children?: React.ReactNode }> = ({
  children,
}) => {
  return <div className={styles.gradientBg}>{children}</div>;
};

export default GradientBackground;

</file>

<file path="src\components\SiteFooter.tsx">
// src/components/SiteFooter.tsx
import React from "react";
import Link from "next/link";

export default function SiteFooter() {
  return (
    <footer
      className={
        "w-full border-t border-white/10 " +
        "px-4 sm:px-6 md:px-8 py-4 " +
        "bg-black/5 backdrop-blur-sm "
      }
    >
      <div className="max-w-7xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-y-2">
        {/* Left Links */}
        <nav className="flex items-center gap-x-4 sm:gap-x-6">
          <Link
            href="/docs"
            className="text-sm text-white/70 hover:text-white transition-colors"
          >
            Docs
          </Link>
          <Link
            href="/legal"
            className="text-sm text-white/70 hover:text-white transition-colors"
          >
            Legal
          </Link>
          <Link
            href="/privacy"
            className="text-sm text-white/70 hover:text-white transition-colors"
          >
            Privacy
          </Link>
        </nav>

        {/* Right Copyright */}
        <p className="text-sm text-white/60">
          © {new Date().getFullYear()} vacansee
        </p>
      </div>
    </footer>
  );
}

</file>

<file path="src\components\SiteHeader.tsx">
// src/components/SiteHeader.tsx
import React, { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import { motion, AnimatePresence } from "framer-motion";
import type { User } from "@supabase/supabase-js";
import { getSupabaseBrowserClient } from "@/lib/supabase/client";
import {
  DoorOpen,
  Clock,
  Search,
  Grid3x3,
  BadgeInfo,
  LogIn,
  UserRound,
  LogOut,
} from "lucide-react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import localFont from "next/font/local"; // Import next/font/local

// Configure the local font loader
const qurovaFont = localFont({
  src: "../../public/fonts/Qurova-SemiBold.otf", // Adjust the path as necessary
  weight: "600", // Corresponds to Semibold
  display: "swap", // Good practice for font loading
});

// --- Navigation Items ---
const navItems = [
  { name: "Currently Available", href: "/available-now", icon: DoorOpen },
  { name: "Available Soon", href: "/available-soon", icon: Clock },
  { name: "Check Availability", href: "/check", icon: Search },
  { name: "Graph", href: "/graph", icon: Grid3x3 },
  { name: "Room Details", href: "/rooms", icon: BadgeInfo },
];
type NavItemType = (typeof navItems)[0];

// --- NavLink Component ---
const NavLink = React.forwardRef<
  React.ElementRef<"li">,
  Omit<React.ComponentPropsWithoutRef<typeof Link>, "href" | "children"> & {
    item: NavItemType;
    isMobile?: boolean;
    isDesktop?: boolean;
    currentPath: string;
    isHovered: boolean;
    onHoverStart: () => void;
    onHoverEnd: () => void;
    onClick?: () => void;
  }
>(
  (
    {
      className,
      item,
      isMobile,
      isDesktop,
      currentPath,
      isHovered,
      onHoverStart,
      onHoverEnd,
      onClick,
    },
    ref,
  ) => {
    const isActuallyActive = item.href === currentPath;
    const layoutTransition = { type: "spring", stiffness: 500, damping: 35 };
    const labelTransition = { duration: 0.2, ease: "easeInOut" };

    if (isMobile) {
      return (
        <li ref={ref}>
          <Link
            href={item.href}
            className={
              "flex items-center gap-3 w-full p-3 rounded-md transition-colors duration-200 ease-in-out " +
              (isActuallyActive
                ? "text-purple-300 font-semibold bg-white/5"
                : "text-white/80 hover:text-white hover:bg-white/10 ") +
              (className ?? "")
            }
            onClick={onClick}
            aria-current={isActuallyActive ? "page" : undefined}
          >
            {item.icon && <item.icon className="h-5 w-5 flex-shrink-0" />}
            <span className="flex-grow text-base">{item.name}</span>
          </Link>
        </li>
      );
    }

    if (isDesktop) {
      const showActiveState = isHovered || isActuallyActive;
      const textColorClass = isHovered
        ? "text-white"
        : isActuallyActive
          ? "text-white/90"
          : "text-white/70";

      return (
        <motion.li
          ref={ref}
          layout
          transition={layoutTransition}
          onHoverStart={onHoverStart}
          onHoverEnd={onHoverEnd}
          className="flex"
        >
          <Link
            href={item.href}
            aria-current={isActuallyActive ? "page" : undefined}
            className={
              `relative flex items-center justify-center rounded-full transition-colors duration-200 ease-in-out overflow-hidden ` +
              (showActiveState
                ? `bg-white/10 px-3 py-1.5 `
                : `p-2 hover:hover:bg-white/10 `) +
              textColorClass +
              (className ?? "")
            }
          >
            {item.icon && <item.icon className="h-5 w-5 flex-shrink-0" />}
            <AnimatePresence>
              {showActiveState && (
                <motion.span
                  key="label"
                  initial={{ width: 0, opacity: 0, marginLeft: 0 }}
                  animate={{
                    width: "auto",
                    opacity: 1,
                    marginLeft: "0.375rem",
                  }}
                  exit={{ width: 0, opacity: 0, marginLeft: 0 }}
                  transition={labelTransition}
                  className="text-sm font-medium whitespace-nowrap"
                  style={{ lineHeight: "normal" }}
                >
                  {item.name}
                </motion.span>
              )}
            </AnimatePresence>
          </Link>
        </motion.li>
      );
    }
    // Fallback return, should ideally not be reached in this component structure
    return <li ref={ref}></li>;
  },
);
NavLink.displayName = "NavLink";

// --- Header Component ---
export default function SiteHeader() {
  // --- State Variables ---
  const [isMounted, setIsMounted] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [hoveredHref, setHoveredHref] = useState<string | null>(null);
  const [isAuthHovered, setIsAuthHovered] = useState(false);
  const [isPopoverOpen, setIsPopoverOpen] = useState(false);
  const router = useRouter();
  const currentPath = router.pathname;

  // --- Supabase Auth State ---
  const [user, setUser] = useState<User | null>(null);
  const [loadingAuth, setLoadingAuth] = useState(true);
  const supabase = getSupabaseBrowserClient();

  // --- Effects ---
  useEffect(() => {
    // Auth Listener
    setIsMounted(true);
    let isSubscribed = true;
    const fetchUserAndListen = async () => {
      try {
        const {
          data: { session },
        } = await supabase.auth.getSession();
        if (isSubscribed) {
          setUser(session?.user ?? null);
          setLoadingAuth(false);
        }
      } catch (error) {
        console.error("Error fetching initial session:", error);
        if (isSubscribed) setLoadingAuth(false);
      }
      const { data: authListener } = supabase.auth.onAuthStateChange(
        (_event, session) => {
          if (isSubscribed) {
            console.log("Auth state changed:", _event);
            setUser(session?.user ?? null);
            setLoadingAuth(false);
            if (_event === "SIGNED_IN" || _event === "SIGNED_OUT") {
              setIsMenuOpen(false);
              setIsPopoverOpen(false);
            }
          }
        },
      );
      // Return the unsubscribe function
      return () => {
        authListener?.subscription.unsubscribe();
      };
    };

    let unsubscribeListener: (() => void) | undefined;
    fetchUserAndListen()
      .then((cleanup) => {
        unsubscribeListener = cleanup;
      })
      .catch((error) => {
        console.error("Error setting up auth listener:", error);
        if (isSubscribed) setLoadingAuth(false);
      });

    // Cleanup function for the useEffect hook
    return () => {
      isSubscribed = false;
      unsubscribeListener?.(); // Call the unsubscribe function returned by fetchUserAndListen
    };
  }, [supabase]); // Dependency array is correct

  useEffect(() => {
    // Close menu on route change
    setIsMenuOpen(false);
  }, [currentPath]);

  // --- Handlers ---
  const handleSignOut = async () => {
    setIsMenuOpen(false);
    setIsPopoverOpen(false);
    setLoadingAuth(true);
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error("Error signing out:", error);
        setLoadingAuth(false); // Reset loading on error
      } else {
        console.log("Signed out successfully");
        router.push("/"); // Redirect after successful sign out
        // setLoadingAuth(false) will happen via onAuthStateChange listener
      }
    } catch (error) {
      console.error("Exception during sign out:", error);
      setLoadingAuth(false); // Reset loading on exception
    }
  }; // <--- Ensure this closing brace is correct

  // --- Constants ---
  const menuToggleTransition = { duration: 0.2 };
  const mobilePanelTransition = { duration: 0.2, ease: "easeOut" };
  const mobileBackdropTransition = { duration: 0.2, ease: "linear" };
  const authLayoutTransition = { type: "spring", stiffness: 400, damping: 30 };
  const authLabelTransition = { duration: 0.2, ease: "easeInOut" };
  const userDisplayName =
    user?.user_metadata?.full_name || user?.email?.split("@")[0] || "User";
  const userEmail = user?.email || "No email provided";
  const showActiveAuthStyle = isAuthHovered || isPopoverOpen;

  // --- Component Return ---
  return (
    <>
      {/* --- Header Element --- */}
      <header
        className={
          "fixed top-0 left-0 right-0 z-50 flex h-16 items-center justify-between px-4 sm:px-6 md:px-8 bg-black/5 backdrop-blur-lg border-b border-white/10"
        }
      >
        {/* Left side: Brand */}
        <div className="flex-shrink-0 z-10 flex items-center">
          <Link
            href="/"
            className="flex items-center gap-2 text-white font-semibold transition-opacity hover:opacity-80"
          >
            <DoorOpen className="h-6 w-6 text-purple-400" />
            <span className={`sm:inline text-xl mt-1 ${qurovaFont.className}`}>
              vacansee
            </span>
          </Link>
        </div>

        {/* Right side: Desktop Nav, Auth, Mobile Trigger */}
        <div className="flex items-center gap-1 sm:gap-2">
          {isMounted ? (
            <>
              {/* Desktop Navigation */}
              <nav className="hidden md:flex">
                <ul className="flex items-center gap-x-1">
                  {navItems.map((navItem) => (
                    <NavLink
                      key={navItem.href}
                      item={navItem}
                      isDesktop={true}
                      currentPath={currentPath}
                      isHovered={hoveredHref === navItem.href}
                      onHoverStart={() => setHoveredHref(navItem.href)}
                      onHoverEnd={() => setHoveredHref(null)}
                    />
                  ))}
                </ul>
              </nav>

              {/* Auth Status - DESKTOP */}
              <div className="hidden md:flex items-center ml-2 h-10">
                <AnimatePresence mode="wait" initial={false}>
                  {loadingAuth ? (
                    <motion.div
                      key="auth-loader"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      className="w-8 h-8 flex items-center justify-center"
                    >
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white/50"></div>
                    </motion.div>
                  ) : user ? (
                    <motion.div
                      key="profile-container-desktop"
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.8 }}
                      transition={{ duration: 0.2 }}
                      className="flex items-center"
                      onHoverStart={() => setIsAuthHovered(true)}
                      onHoverEnd={() => setIsAuthHovered(false)}
                    >
                      <Popover
                        open={isPopoverOpen}
                        onOpenChange={setIsPopoverOpen}
                      >
                        <PopoverTrigger asChild>
                          <Button
                            variant="ghost"
                            className={
                              `relative flex items-center justify-center rounded-full transition-colors duration-200 ease-in-out overflow-hidden ` +
                              (showActiveAuthStyle
                                ? `bg-white/10 px-3 py-1.5 `
                                : `p-2 hover:hover:bg-white/10 `) +
                              (showActiveAuthStyle
                                ? "text-white"
                                : "text-white/80")
                            }
                            aria-label="User menu"
                          >
                            <span className="flex items-center justify-center">
                              <UserRound className="h-5 w-5 flex-shrink-0" />
                              <AnimatePresence>
                                {showActiveAuthStyle && (
                                  <motion.span
                                    key="profile-label"
                                    initial={{
                                      width: 0,
                                      opacity: 0,
                                      marginLeft: 0,
                                    }}
                                    animate={{
                                      width: "auto",
                                      opacity: 1,
                                      marginLeft: "0.375rem",
                                    }}
                                    exit={{
                                      width: 0,
                                      opacity: 0,
                                      marginLeft: 0,
                                    }}
                                    transition={authLabelTransition}
                                    className="text-sm font-medium whitespace-nowrap"
                                    style={{ lineHeight: "normal" }}
                                  >
                                    Profile
                                  </motion.span>
                                )}
                              </AnimatePresence>
                            </span>
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent
                          className="w-60 bg-gradient-to-br from-[#100643]/65 to-black/60 backdrop-blur-3xl border border-white/15 text-white p-0 mr-4 shadow-xl z-[70]"
                          align="end"
                        >
                          <div className="p-4">
                            <p
                              className="font-semibold text-sm truncate"
                              title={userDisplayName}
                            >
                              {userDisplayName}
                            </p>
                            <p
                              className="text-xs text-white/70 truncate"
                              title={userEmail}
                            >
                              {userEmail}
                            </p>
                          </div>
                          <Separator className="bg-white/10" />
                          <Button
                            variant="ghost"
                            onClick={handleSignOut}
                            className="w-full justify-start p-4 text-red-400 hover:text-red-300 hover:bg-white/5 rounded-none rounded-b-md text-sm"
                          >
                            <LogOut className="h-4 w-4 mr-2" /> Sign Out
                          </Button>
                        </PopoverContent>
                      </Popover>
                    </motion.div>
                  ) : (
                    <motion.div
                      key="signin-button-desktop"
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.8 }}
                      transition={authLayoutTransition}
                      onHoverStart={() => setIsAuthHovered(true)}
                      onHoverEnd={() => setIsAuthHovered(false)}
                      className="flex"
                    >
                      <Link
                        href="/auth/login"
                        className={
                          `relative flex items-center justify-center rounded-full transition-colors duration-200 ease-in-out overflow-hidden ` +
                          (isAuthHovered
                            ? `bg-white/10 px-3 py-1.5 `
                            : `p-2 hover:hover:bg-white/10 `) +
                          (isAuthHovered ? "text-white" : "text-white/70")
                        }
                      >
                        <LogIn className="h-5 w-5 flex-shrink-0" />
                        <AnimatePresence>
                          {isAuthHovered && (
                            <motion.span
                              key="auth-label"
                              initial={{ width: 0, opacity: 0, marginLeft: 0 }}
                              animate={{
                                width: "auto",
                                opacity: 1,
                                marginLeft: "0.375rem",
                              }}
                              exit={{ width: 0, opacity: 0, marginLeft: 0 }}
                              transition={authLabelTransition}
                              className="text-sm font-medium whitespace-nowrap"
                              style={{ lineHeight: "normal" }}
                            >
                              Sign In
                            </motion.span>
                          )}
                        </AnimatePresence>
                      </Link>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>

              {/* Mobile Menu Trigger */}
              <div className="flex md:hidden ml-1">
                <motion.button
                  onClick={() => setIsMenuOpen(!isMenuOpen)}
                  className="relative z-[65] flex flex-col justify-center items-center gap-[7px] p-2 rounded-full transition-colors"
                  aria-label="Toggle menu"
                  aria-expanded={isMenuOpen}
                  whileTap={{ scale: 0.95 }}
                >
                  <motion.span
                    className="w-5 h-px bg-white block rounded-full"
                    animate={
                      isMenuOpen ? { rotate: 45, y: 4 } : { rotate: 0, y: 0 }
                    }
                    transition={menuToggleTransition}
                  />
                  <motion.span
                    className="w-5 h-px bg-white block rounded-full"
                    animate={
                      isMenuOpen ? { rotate: -45, y: -4 } : { rotate: 0, y: 0 }
                    }
                    transition={menuToggleTransition}
                  />
                </motion.button>
              </div>
            </>
          ) : (
            /* Placeholder */
            <div className="flex items-center gap-1 sm:gap-2">
              <div className="hidden md:block w-48 h-8 bg-white/5 rounded-full animate-pulse"></div>
              <div className="w-8 h-8 bg-white/5 rounded-full animate-pulse"></div>
              <div className="w-8 h-8 bg-white/5 rounded-full animate-pulse md:hidden"></div>
            </div>
          )}
        </div>
      </header>

      {/* --- Mobile Menu Backdrop & Panel --- */}
      <AnimatePresence>
        {isMounted && isMenuOpen && (
          <motion.div
            key="mobile-backdrop"
            className="fixed inset-0 top-16 bg-black/60 backdrop-blur-sm z-40 md:hidden"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={mobileBackdropTransition}
            onClick={() => setIsMenuOpen(false)}
          />
        )}
      </AnimatePresence>
      <AnimatePresence>
        {isMounted && isMenuOpen && (
          <motion.div
            key="mobile-menu-panel"
            className={
              "fixed inset-x-4 top-20 z-50 md:hidden bg-gradient-to-br from-black/80 to-black/90 backdrop-blur-xl border border-white/15 shadow-xl rounded-lg overflow-hidden"
            }
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={mobilePanelTransition}
          >
            <div className="max-h-[calc(100vh-6rem)] overflow-y-auto p-4 flex flex-col">
              <nav className="mb-4">
                <ul className="flex flex-col gap-1">
                  {navItems.map((navItem) => (
                    <NavLink
                      key={navItem.href}
                      item={navItem}
                      isMobile={true}
                      currentPath={currentPath}
                      isHovered={false}
                      onHoverStart={() => {}}
                      onHoverEnd={() => {}}
                      onClick={() => setIsMenuOpen(false)}
                    />
                  ))}
                </ul>
              </nav>
              <Separator className="bg-white/20 my-2" />
              <div className="mt-auto pt-2">
                {loadingAuth ? (
                  <div className="flex justify-center items-center p-3 h-[76px]">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white/50"></div>
                  </div>
                ) : user ? (
                  <div className="space-y-3">
                    <div className="px-3">
                      <p
                        className="font-semibold text-sm text-white truncate"
                        title={userDisplayName}
                      >
                        {userDisplayName}
                      </p>
                      <p
                        className="text-xs text-white/60 truncate"
                        title={userEmail}
                      >
                        {userEmail}
                      </p>
                    </div>
                    <button
                      onClick={handleSignOut}
                      className="flex items-center gap-3 w-full p-3 rounded-md text-red-400 hover:text-red-300 hover:bg-white/10 transition-colors duration-200 ease-in-out"
                    >
                      <LogOut className="h-5 w-5 flex-shrink-0" />
                      <span className="flex-grow text-base text-left">
                        Sign Out
                      </span>
                    </button>
                  </div>
                ) : (
                  <Link
                    href="/auth/login"
                    onClick={() => setIsMenuOpen(false)}
                    className="flex items-center gap-3 w-full p-3 rounded-md text-white/80 hover:text-white hover:bg-white/10 transition-colors duration-200 ease-in-out"
                  >
                    <LogIn className="h-5 w-5 flex-shrink-0" />
                    <span className="flex-grow text-base">Sign In</span>
                  </Link>
                )}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
} // Ensure this is the final closing brace for the component

</file>

<file path="src\components\ui\accordion.tsx">
import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDownIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />;
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  );
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className,
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  );
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  );
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };

</file>

<file path="src\components\ui\alert.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  );
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className,
      )}
      {...props}
    />
  );
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className,
      )}
      {...props}
    />
  );
}

export { Alert, AlertTitle, AlertDescription };

</file>

<file path="src\components\ui\button.tsx">
// src/components/ui/button.tsx
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        // Make sure your 'icon' size matches what you use in SiteHeader (h-10 w-10)
        // If SiteHeader uses h-10 w-10, change this:
        icon: "size-10", // Changed from size-9 to size-10 to match potential SiteHeader use
        // If SiteHeader uses h-8 w-8, change icon to "size-8" instead. Adjust as needed.
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

// Define the props interface separately for clarity
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

// --- MODIFICATION START ---
// Wrap the component definition in React.forwardRef
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        data-slot="button" // Keep your data-slot attribute if needed
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref} // Pass the ref down to the actual element (Slot or button)
        {...props}
      />
    );
  },
);
// Add display name for better debugging
Button.displayName = "Button";
// --- MODIFICATION END ---

export { Button, buttonVariants };

</file>

<file path="src\components\ui\command.tsx">
import * as React from "react";
import { Command as CommandPrimitive } from "cmdk";
import { SearchIcon } from "lucide-react";

import { cn } from "@/lib/utils";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className,
      )}
      {...props}
    />
  );
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string;
  description?: string;
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        {...props}
      />
    </div>
  );
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className,
      )}
      {...props}
    />
  );
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  );
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className,
      )}
      {...props}
    />
  );
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  );
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className,
      )}
      {...props}
    />
  );
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};

</file>

<file path="src\components\ui\dialog.tsx">
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className,
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className,
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className,
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};

</file>

<file path="src\components\ui\input.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className,
      )}
      {...props}
    />
  );
}

export { Input };

</file>

<file path="src\components\ui\navigation-menu.tsx">
import * as React from "react";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDownIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean;
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center",
        className,
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  );
}

function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        "group flex flex-1 list-none items-center justify-center gap-1",
        className,
      )}
      {...props}
    />
  );
}

function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn("relative", className)}
      {...props}
    />
  );
}

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1",
);

function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...props}
    >
      {children}{" "}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  );
}

function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className,
      )}
      {...props}
    />
  );
}

function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={cn(
        "absolute top-full left-0 isolate z-50 flex justify-center",
      )}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
          className,
        )}
        {...props}
      />
    </div>
  );
}

function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        className,
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  );
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
};

</file>

<file path="src\components\ui\popover.tsx">
import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />;
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />;
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className,
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  );
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />;
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };

</file>

<file path="src\components\ui\select.tsx">
import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default";
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className,
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1",
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className,
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};

</file>

<file path="src\components\ui\separator.tsx">
import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className,
      )}
      {...props}
    />
  );
}

export { Separator };

</file>

<file path="src\components\ui\sheet.tsx">
import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />;
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />;
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />;
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />;
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className,
      )}
      {...props}
    />
  );
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left";
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className,
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  );
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  );
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  );
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  );
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};

</file>

<file path="src\components\ui\switch.tsx">
import * as React from "react";
import * as SwitchPrimitive from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0",
        )}
      />
    </SwitchPrimitive.Root>
  );
}

export { Switch };

</file>

<file path="src\components\ui\table.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  );
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  );
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  );
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className,
      )}
      {...props}
    />
  );
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className,
      )}
      {...props}
    />
  );
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className,
      )}
      {...props}
    />
  );
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className,
      )}
      {...props}
    />
  );
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  );
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};

</file>

<file path="src\components\ui\toggle.tsx">
"use client";

import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Toggle, toggleVariants };

</file>

<file path="src\components\ui\tooltip.tsx">
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  );
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  );
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className,
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  );
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };

</file>

<file path="src\lib\paths.ts">
// src/lib/paths.ts

/**
 * Defines paths accessible without authentication (no session required).
 * This list MUST be kept in sync for both middleware (authentication)
 * and _app.tsx (client-side authorization logic - primarily for loader display).
 */
export const PUBLIC_PATHS: string[] = [
  "/", // Homepage
  "/auth/login", // Login page itself
  "/api/auth/callback", // Auth callback handler (API, needs to be public)
  "/unauthorized", // RE-ADDED: Page for specific errors like signup disabled
  "/rooms", // Publicly viewable room list page
  "/api/rooms", // Public API route for room list
  "/404", // 404 page
  "/500", // 500 page
  "/docs", // Example About page
  "/legal", // Terms and Conditions
  "/privacy", // Legal pages (Privacy Policy, etc.)
  // Add any other truly public paths here
];

/**
 * Helper function to determine if a path is considered public based on the list.
 * Can be used in both middleware and client-side code if needed,
 * though usually the check logic differs slightly based on context (e.g., ignoring assets).
 */
export function isPublicPath(pathname: string): boolean {
  return PUBLIC_PATHS.includes(pathname);
}

</file>

<file path="src\lib\prisma.ts">
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export default prisma;

</file>

<file path="src\lib\supabase\client.ts">
import { createPagesBrowserClient } from "@supabase/auth-helpers-nextjs";

// Use ReturnType to correctly infer the client type
let browserClient: ReturnType<typeof createPagesBrowserClient> | null = null;

export function getSupabaseBrowserClient() {
  // Check if the client already exists.
  if (!browserClient) {
    browserClient = createPagesBrowserClient();
  }
  return browserClient;
}

</file>

<file path="src\lib\supabase\server.ts">
// src/lib/supabase/server.ts
import { createPagesServerClient } from "@supabase/auth-helpers-nextjs";
import type {
  GetServerSidePropsContext,
  NextApiRequest,
  NextApiResponse,
} from "next";

// Define cookie options specifically for development vs production
const cookieOptions = {
  // In development on HTTP, Secure must be false.
  // In production on HTTPS, Secure should be true (default usually works).
  secure: process.env.NODE_ENV === "production",
  // HttpOnly should generally be true for auth-related cookies.
  httpOnly: true,
  // Optional: Set sameSite if needed, 'lax' is common
  sameSite: "lax" as const, // Use 'as const' for type correctness
  // Optional: Set path if needed, default '/' is usually fine
  // path: '/',
};

export function createSupabaseServerClient(context: GetServerSidePropsContext) {
  console.log(
    "[createSupabaseServerClient] Using cookie options:",
    cookieOptions,
  ); // Add log
  return createPagesServerClient(context, {
    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  });
}

export function createSupabaseRouteHandlerClient(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  console.log(
    "[createSupabaseRouteHandlerClient] Using cookie options:",
    cookieOptions,
  ); // Add log
  return createPagesServerClient(
    { req, res },
    {
      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,
      supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    },
  );
}

</file>

<file path="src\lib\utils.ts">
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

</file>

<file path="src\middleware.ts">
// src/middleware.ts
import { createMiddlewareClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
// Import the single source of truth for public paths
import { PUBLIC_PATHS } from "@/lib/paths";

/**
 * Determines if the given path requires user authentication.
 * Checks against internal Next.js paths, static assets, and the defined PUBLIC_PATHS list.
 * @param pathname The path to check.
 * @returns True if authentication is required, false otherwise.
 */
async function requiresAuthentication(pathname: string): Promise<boolean> {
  // Check if it's an internal Next.js path or a likely static file first
  if (
    pathname.startsWith("/_next/") ||
    pathname.startsWith("/api/_next/") || // Handle API routes under _next if any
    pathname.includes("/.") || // Usually hidden files/folders
    pathname.endsWith(".ico") || // Favicon
    pathname.endsWith(".png") || // Common image types
    pathname.endsWith(".jpg") ||
    pathname.endsWith(".jpeg") ||
    pathname.endsWith(".svg") ||
    pathname.endsWith(".css") || // Stylesheets
    pathname.endsWith(".js") // Scripts (though usually handled by _next)
  ) {
    // console.log(`[Middleware] -> Path "${pathname}" is internal/static.`); // Optional log
    return false; // Never requires auth check from our logic
  }

  // Check against the explicit public list imported from paths.ts
  if (PUBLIC_PATHS.includes(pathname)) {
    console.log(`[Middleware] -> Path "${pathname}" is explicitly PUBLIC.`);
    return false;
  }

  // Default assumption for anything else: Requires authentication
  console.log(
    `[Middleware] -> Path "${pathname}" is assumed PROTECTED (Default).`,
  );
  return true;
}

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  // Removed <Database> generic type - assuming types aren't generated or needed here
  const supabase = createMiddlewareClient({ req, res });
  const { pathname } = req.nextUrl;

  console.log(`[Middleware] Method: ${req.method}, Path: "${pathname}"`);

  // Allow OPTIONS requests early for CORS preflight (before auth checks)
  if (req.method === "OPTIONS") {
    console.log(`[Middleware] Allowing OPTIONS request for CORS preflight.`);
    // Add required CORS headers here if not handled globally
    // res.headers.set('Access-Control-Allow-Origin', '*');
    // res.headers.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
    // res.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    return res;
  }

  // Determine if authentication is needed based on the path
  const needsAuth = await requiresAuthentication(pathname);

  if (needsAuth) {
    console.log(
      `[Middleware] Authentication required for "${pathname}". Checking session...`,
    );
    const {
      data: { session },
    } = await supabase.auth.getSession();
    const userId = session?.user?.id ?? "None";
    console.log(`[Middleware] User: ${userId}`);

    // If auth is needed but no session exists, redirect or deny
    if (!session) {
      console.log(`[Middleware] -> Auth REQUIRED but no session found.`);
      if (pathname.startsWith("/api/")) {
        // Deny API access for unauthenticated users on protected routes
        console.log(`[Middleware] -> API route access denied (401).`);
        return new NextResponse(JSON.stringify({ error: "Unauthorized" }), {
          status: 401,
          headers: { "Content-Type": "application/json" },
        });
      } else {
        // Redirect page routes to login
        const redirectUrl = req.nextUrl.clone();
        redirectUrl.pathname = "/auth/login";
        redirectUrl.searchParams.set("redirectedFrom", pathname); // Pass original path
        console.log(`[Middleware] -> Redirecting page route to login.`);
        return NextResponse.redirect(redirectUrl);
      }
    } else {
      // User has a session and needsAuth is true - allow access
      console.log(
        `[Middleware] -> Session found. Allowing authenticated user access.`,
      );
    }
  } else {
    // No authentication needed for this path
    console.log(
      `[Middleware] No authentication required for "${pathname}". Allowing request.`,
    );
  }

  // If we reach here, the request is allowed to proceed
  console.log(`[Middleware] Proceeding with request for path "${pathname}"`);
  return res;
}

// --- Simplified Matcher ---
export const config = {
  /*
   * Match all request paths except for the ones starting with:
   * - _next/static (static files)
   * - _next/image (image optimization files)
   * - favicon.ico (favicon file)
   * We let the `requiresAuthentication` function handle the logic for public/private paths.
   */
  matcher: ["/((?!_next/static|_next/image|favicon.ico).*)"],
};

</file>

<file path="src\pages\404.tsx">
// pages/404.tsx
import Link from "next/link";
import React from "react";
import { AlertTriangle } from "lucide-react";

export default function Custom404() {
  // Return only the content container. Centering handled by <main> in _app.tsx
  // Added py-10 for vertical spacing
  return (
    <div className="space-y-4 text-center py-10">
      {" "}
      {/* Removed all flex/grow/h-full properties */}
      <AlertTriangle className="mx-auto h-16 w-16 text-yellow-500" />
      <h1 className="text-4xl sm:text-5xl font-bold text-white/90">
        Error 404
      </h1>
      <p className="text-lg text-white/70">
        Oops! The page you&apos;re looking for could not be found.
      </p>
      <Link
        href="/"
        className="inline-block mt-6 px-6 py-2 rounded-full bg-purple-600 text-white hover:bg-purple-700 transition-colors"
      >
        Go back home
      </Link>
    </div>
  );
}

</file>

<file path="src\pages\about.tsx">
// src/pages/about.tsx
import React from "react";
import Head from "next/head";
import { motion } from "framer-motion";
import Link from "next/link";
import { Info, Target, Cpu, Mail } from "lucide-react";

export default function AboutPage() {
  const sectionVariant = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5, ease: "easeOut" },
    },
  };

  return (
    <div className="w-full max-w-4xl mx-auto px-4 py-6 pt-20 md:pt-24 flex-grow flex flex-col items-center text-white">
      <Head>
        <title>About - vacansee</title>
      </Head>

      <motion.div
        initial="hidden"
        animate="visible"
        variants={{ visible: { transition: { staggerChildren: 0.1 } } }}
        className="space-y-10 text-center md:text-left"
      >
        <motion.h1
          variants={sectionVariant}
          className="text-4xl md:text-5xl font-bold mb-6 text-center bg-gradient-to-r from-purple-400 to-pink-500 bg-clip-text text-transparent"
        >
          About vacansee
        </motion.h1>

        <motion.section
          variants={sectionVariant}
          className="space-y-3 text-lg text-white/80 max-w-3xl mx-auto text-center"
        >
          <Info className="mx-auto h-10 w-10 text-purple-400 mb-3" />
          <h2 className="text-2xl font-semibold text-white/90">
            What is vacansee?
          </h2>
          <p>
            vacansee is a modern web application designed to provide real-time
            information about room availability and scheduling within the
            university campus.
          </p>
          <p>
            It aims to replace legacy systems with a faster, more intuitive, and
            visually appealing interface.
          </p>
        </motion.section>

        <motion.section
          variants={sectionVariant}
          className="space-y-3 text-lg text-white/80 max-w-3xl mx-auto text-center"
        >
          <Target className="mx-auto h-10 w-10 text-purple-400 mb-3" />
          <h2 className="text-2xl font-semibold text-white/90">Our Goal</h2>
          <p>
            The primary goal is to make finding an available room quick and
            effortless. Whether you need a quiet place to study, a room for a
            group meeting, or just want to see the campus schedule at a glance,
            vacansee provides the necessary tools.
          </p>
        </motion.section>

        <motion.section
          variants={sectionVariant}
          className="space-y-3 text-lg text-white/80 max-w-3xl mx-auto text-center"
        >
          <Cpu className="mx-auto h-10 w-10 text-purple-400 mb-3" />
          <h2 className="text-2xl font-semibold text-white/90">Technology</h2>
          <p>
            Built using modern web technologies including Next.js, React,
            TypeScript, Tailwind CSS, and Supabase for backend services,
            vacansee prioritizes performance and user experience.
          </p>
        </motion.section>

        <motion.section
          variants={sectionVariant}
          className="space-y-3 text-lg text-white/80 max-w-3xl mx-auto text-center"
        >
          <Mail className="mx-auto h-10 w-10 text-purple-400 mb-3" />
          <h2 className="text-2xl font-semibold text-white/90">Contact</h2>
          <p>
            For questions or feedback, please reach out to the project
            administrator.
          </p>
          <p className="text-sm text-white/60">
            <Link
              href="https://tahayparker.vercel.app/contact"
              target="_blank"
              className="text-purple-400 hover:underline"
            >
              Contact Me
            </Link>
          </p>
        </motion.section>
      </motion.div>
    </div>
  );
}

</file>

<file path="src\pages\api\auth\callback.ts">
// pages/api/auth/callback.ts
import { createSupabaseRouteHandlerClient } from "@/lib/supabase/server";
import type { NextApiRequest, NextApiResponse } from "next";
import { parse } from "cookie";
import { URL } from "url"; // Import URL for robust URL construction

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  const rawCookieHeader = req.headers.cookie || "";
  console.log("--- Callback Debug START ---");
  console.log("[Callback] Raw Cookie Header:", rawCookieHeader);
  const parsedCookies = parse(rawCookieHeader);
  // Basic logging (keep minimal in production)
  const pkceCookieKey = Object.keys(parsedCookies).find((key) =>
    key.includes("-auth-token-code-verifier"),
  );
  console.log(
    `[Callback] PKCE Cookie ${pkceCookieKey ? "Found" : "Not Found"}.`,
  );
  console.log(
    `[Callback] Redirect Cookie ${parsedCookies["supabase-redirect-path"] ? "Found" : "Not Found"}.`,
  );
  console.log("[Callback] Received Query Params:", req.query);
  console.log("--- Callback Debug END ---");

  // --- Get Base URL ---
  const getBaseUrl = () => {
    // Prefer NEXT_PUBLIC_SITE_URL if set, otherwise derive from headers
    const forwardedProto = req.headers["x-forwarded-proto"];
    const proto = typeof forwardedProto === "string" ? forwardedProto : "http";
    const host = req.headers.host || "localhost:3000";
    return process.env.NEXT_PUBLIC_SITE_URL || `${proto}://${host}`;
  };
  const baseUrl = getBaseUrl();
  console.log("[Callback] Base URL:", baseUrl);

  // --- Check for Specific 'signup_disabled' Error FIRST ---
  const errorCode = req.query.error_code;
  const errorDescription = req.query.error_description; // For logging

  if (errorCode === "signup_disabled") {
    console.warn(
      `[Callback] Detected signup_disabled error. Redirecting to /unauthorized. Description: ${errorDescription}`,
    );
    const unauthorizedUrl = new URL("/unauthorized", baseUrl);
    res.redirect(unauthorizedUrl.toString()).end();
    return; // Stop processing immediately
  }
  // --- End Specific Error Check ---

  // --- Proceed with Code Exchange if no specific error blocked us ---
  const code = req.query.code;

  if (typeof code !== "string") {
    console.error("[Callback] Error: No valid authentication code received.");
    const loginUrl = new URL("/auth/login", baseUrl);
    // Provide a more generic error for the user on the login page
    loginUrl.searchParams.set(
      "error",
      "Authentication process failed. No code received.",
    );
    res.redirect(loginUrl.toString()).end();
    return;
  }

  // Initialize Supabase client for code exchange
  const supabase = createSupabaseRouteHandlerClient(req, res);

  try {
    console.log("[Callback] Attempting to exchange code for session...");
    const { error: exchangeError } =
      await supabase.auth.exchangeCodeForSession(code);

    if (exchangeError) {
      console.error("[Callback] Error exchanging code:", exchangeError.message);
      const loginUrl = new URL("/auth/login", baseUrl);
      // Pass a user-friendly error message back to the login page
      loginUrl.searchParams.set(
        "error",
        `Authentication failed: ${exchangeError.message}. Please try again.`,
      );
      res.redirect(loginUrl.toString()).end();
      return;
    }

    // Successful exchange, determine redirect path
    let finalRedirectUrlPath = "/"; // Default to homepage
    const redirectPathCookie = parsedCookies["supabase-redirect-path"];

    if (
      typeof redirectPathCookie === "string" &&
      redirectPathCookie.startsWith("/")
    ) {
      finalRedirectUrlPath = redirectPathCookie;
      console.log(
        `[Callback] Found redirect path in cookie: ${finalRedirectUrlPath}`,
      );
    } else {
      console.log(
        `[Callback] No valid redirect path cookie found, defaulting to '/'`,
      );
    }

    // Construct final URL safely
    const finalRedirectUrl = new URL(finalRedirectUrlPath, baseUrl);
    console.log(
      "[Callback] Authentication successful. Redirecting to:",
      finalRedirectUrl.toString(),
    );
    // NOTE: The 'supabase-redirect-path' cookie should be cleared client-side AFTER successful redirect.

    res.redirect(finalRedirectUrl.toString()).end();
  } catch (err: any) {
    console.error(
      "[Callback] Unexpected error during code exchange process:",
      err,
    );
    const loginUrl = new URL("/auth/login", baseUrl);
    loginUrl.searchParams.set(
      "error",
      "An unexpected error occurred during login. Please try again.",
    );
    res.redirect(loginUrl.toString()).end();
  }
}

</file>

<file path="src\pages\api\available-now.ts">
// src/pages/api/available-now.ts
import type { NextApiRequest, NextApiResponse } from "next";
import prisma from "@/lib/prisma"; // Import Prisma client from lib
import { DateTime } from "luxon"; // Import Luxon DateTime

const DUBAI_TIMEZONE = "Asia/Dubai"; // Use standard IANA identifier

// --- Define expected response/error types ---
interface AvailableRoomInfo {
  name: string;
  shortCode: string;
  capacity: number | null;
}
interface ApiResponseData {
  checkedAt: string;
  rooms: AvailableRoomInfo[];
}
interface ApiErrorResponse {
  error: string;
}

// --- Room Groupings & Exclusions (Server-side) ---
const roomGroupings: Record<string, string[]> = {
  "4.467": ["4.46", "4.47"],
  "5.134": ["5.13", "5.14"],
  "6.345": ["6.34", "6.35"],
};
const mainGroupRooms = Object.keys(roomGroupings);
const EXCLUDED_ROOM_PATTERNS = ["consultation", "online"];

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ApiResponseData | ApiErrorResponse>,
) {
  if (req.method !== "POST") {
    res.setHeader("Allow", ["POST"]);
    return res.status(405).json({ error: `Method ${req.method} Not Allowed` });
  }

  try {
    // --- Get Current Time in Dubai using Luxon ---
    const nowLuxon = DateTime.now().setZone(DUBAI_TIMEZONE);
    const currentTimeStringDubai = nowLuxon.toFormat("HH:mm");
    const currentDayNameDubai = nowLuxon.toFormat("EEEE");

    console.log(
      `[API Available Now] Using Luxon. Checking for Day: ${currentDayNameDubai}, Time: ${currentTimeStringDubai} in ${DUBAI_TIMEZONE}`,
    );
    // --- End Time Calculation ---

    // --- Database Query ---
    const bookedTimings = await prisma.timings.findMany({
      where: {
        Day: currentDayNameDubai,
        StartTime: { lte: currentTimeStringDubai },
        EndTime: { gt: currentTimeStringDubai },
      },
      select: { Room: true },
      distinct: ["Room"],
    });
    const bookedRoomNames = bookedTimings.map(
      (timing: { Room: string }) => timing.Room,
    );
    console.log("[API Available Now] Booked Room Names:", bookedRoomNames); // Keep logs minimal if preferred

    const availableRoomsData = await prisma.rooms.findMany({
      where: {
        AND: [
          { Name: { notIn: bookedRoomNames } },
          ...EXCLUDED_ROOM_PATTERNS.map((pattern) => ({
            NOT: { Name: { contains: pattern, mode: "insensitive" as const } },
          })),
        ],
      },
      select: { Name: true, ShortCode: true, Capacity: true },
      orderBy: { Name: "asc" },
    });
    // --- End Database Query ---

    // Map Prisma result to API structure
    const initialRooms: AvailableRoomInfo[] = availableRoomsData.map(
      (room) => ({
        name: room.Name,
        shortCode: room.ShortCode,
        capacity: room.Capacity,
      }),
    );

    // --- Room Grouping Filter (Server-side) ---
    const availableShortCodes = new Set(
      initialRooms.map((room: AvailableRoomInfo) => room.shortCode),
    );
    const relatedRoomsToExclude = new Set<string>();
    mainGroupRooms.forEach((mainRoomCode) => {
      if (!availableShortCodes.has(mainRoomCode)) {
        const relatedCodes = roomGroupings[mainRoomCode];
        if (relatedCodes) {
          relatedCodes.forEach((code) => relatedRoomsToExclude.add(code));
        }
      }
    });
    const filteredRooms = initialRooms.filter(
      (room: AvailableRoomInfo) => !relatedRoomsToExclude.has(room.shortCode),
    );
    console.log(
      "[API Available Now] Filtered rooms count:",
      filteredRooms.length,
    );
    // --- End Room Grouping Filter ---

    // Use the Luxon DateTime object's ISO string for checkedAt
    const checkedAtUTC = nowLuxon.toISO();

    res.status(200).json({
      checkedAt: checkedAtUTC ?? new Date().toISOString(), // Fallback just in case
      rooms: filteredRooms,
    });
  } catch (error: any) {
    console.error("[API Available Now] Error:", error);
    if (error.code) {
      console.error(`[API Available Now] Prisma Error Code: ${error.code}`);
    }
    return res
      .status(500)
      .json({ error: error.message || "Internal Server Error" });
  } finally {
    await prisma
      .$disconnect()
      .catch((e) =>
        console.error("[API Available Now] Error disconnecting Prisma:", e),
      );
  }
}

</file>

<file path="src\pages\api\available-soon.ts">
// src/pages/api/available-soon.ts
import type { NextApiRequest, NextApiResponse } from "next";
import prisma from "@/lib/prisma";
import { DateTime } from "luxon"; // Import Luxon DateTime

// Types and constants...
interface RequestBody {
  durationMinutes?: number;
}
interface AvailableRoomInfo {
  name: string;
  shortCode: string;
  capacity: number | null;
}
type ResponseData =
  | { checkedAtFutureTime: string; rooms: AvailableRoomInfo[] }
  | { error: string };
const DUBAI_TIMEZONE = "Asia/Dubai";
const roomGroupings: Record<string, string[]> = {
  "4.467": ["4.46", "4.47"],
  "5.134": ["5.13", "5.14"],
  "6.345": ["6.34", "6.35"],
};
const mainGroupRooms = Object.keys(roomGroupings);
const EXCLUDED_ROOM_PATTERNS = ["consultation", "online"];

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>,
) {
  if (req.method !== "POST") {
    res.setHeader("Allow", ["POST"]);
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    // 1. Get Duration from Request Body
    const { durationMinutes = 30 } = req.body as RequestBody;
    if (typeof durationMinutes !== "number" || durationMinutes < 0) {
      return res
        .status(400)
        .json({ error: "Invalid durationMinutes parameter." });
    }

    // 2. Calculate Future Time in Dubai using Luxon
    const nowLuxon = DateTime.now().setZone(DUBAI_TIMEZONE); // Get current time zoned to Dubai
    const futureTimeLuxon = nowLuxon.plus({ minutes: durationMinutes }); // Add duration

    // Get components needed for the query from the zoned future DateTime object
    const checkDayDubai = futureTimeLuxon.toFormat("EEEE"); // Format as full day name
    const checkTimeDubai = futureTimeLuxon.toFormat("HH:mm"); // Format as HH:mm

    console.log(
      `[API Available Soon] Using Luxon. Checking for Day: ${checkDayDubai}, Future Time: ${checkTimeDubai} in ${DUBAI_TIMEZONE} (${durationMinutes} mins from now)`,
    );
    if (!checkDayDubai) {
      return res
        .status(500)
        .json({ error: "Internal server error: Cannot determine check day." });
    }

    // 3. Find NAMES of Rooms Occupied *at the Future Time*
    const bookedRoomsResult = await prisma.timings.findMany({
      where: {
        Day: checkDayDubai,
        StartTime: { lte: checkTimeDubai },
        EndTime: { gt: checkTimeDubai },
      },
      select: { Room: true },
      distinct: ["Room"],
      orderBy: { Room: "asc" },
    });
    const occupiedRoomNames = bookedRoomsResult.map(
      (timing: { Room: string }) => timing.Room,
    );
    console.log(
      "[API Available Soon] Occupied Room Names at future time:",
      occupiedRoomNames,
    );

    // 4. Find Room Details for rooms NOT occupied at future time AND NOT excluded
    const availableRoomsData = await prisma.rooms.findMany({
      where: {
        AND: [
          { Name: { notIn: occupiedRoomNames } },
          ...EXCLUDED_ROOM_PATTERNS.map((pattern) => ({
            NOT: { Name: { contains: pattern, mode: "insensitive" as const } },
          })),
        ],
      },
      select: { Name: true, ShortCode: true, Capacity: true },
      orderBy: { Name: "asc" },
    });

    // 5. Apply Room Grouping Filter
    const initialRooms: AvailableRoomInfo[] = availableRoomsData.map(
      (room) => ({
        name: room.Name,
        shortCode: room.ShortCode,
        capacity: room.Capacity,
      }),
    );
    const availableShortCodes = new Set(
      initialRooms.map((room: AvailableRoomInfo) => room.shortCode),
    );
    const relatedRoomsToExclude = new Set<string>();
    mainGroupRooms.forEach((mainRoomCode) => {
      if (!availableShortCodes.has(mainRoomCode)) {
        const relatedCodes = roomGroupings[mainRoomCode];
        if (relatedCodes) {
          relatedCodes.forEach((code) => relatedRoomsToExclude.add(code));
        }
      }
    });
    const filteredRooms = initialRooms.filter(
      (room: AvailableRoomInfo) => !relatedRoomsToExclude.has(room.shortCode),
    );
    console.log(
      "[API Available Soon] Filtered rooms count:",
      filteredRooms.length,
    );
    // --- End Group Filtering Logic ---

    // 6. Prepare the Response Data
    const responsePayload: ResponseData = {
      checkedAtFutureTime: futureTimeLuxon.toISO() ?? new Date().toISOString(), // Use ISO string from future DateTime object
      rooms: filteredRooms,
    };

    console.log(
      "[API Available Soon] Sending final Available Rooms Count:",
      responsePayload.rooms.length,
    );
    return res.status(200).json(responsePayload);
  } catch (error: any) {
    console.error("[API Available Soon] Error:", error);
    if (error.code) {
      console.error(`[API Available Soon] Prisma Error Code: ${error.code}`);
    }
    return res.status(500).json({ error: "Internal Server Error" });
  } finally {
    // await prisma.$disconnect().catch(e => console.error("[API Available Soon] Error disconnecting Prisma:", e));
  }
}

</file>

<file path="src\pages\api\check-availability.ts">
// src/pages/api/check-availability.ts
import type { NextApiRequest, NextApiResponse } from "next";
import prisma from "@/lib/prisma";
import { createSupabaseRouteHandlerClient } from "@/lib/supabase/server"; // For Auth

// Define expected request body
interface RequestBody {
  roomName?: string; // Use the Name field from Rooms table for matching Timings.Room
  day?: string;
  startTime?: string; // Expect "HH:mm" format
  endTime?: string; // Expect "HH:mm" format
}

// Define structure for conflicting class details
interface ConflictDetails {
  subject: string;
  professor: string;
  startTime: string;
  endTime: string;
  room: string; // Include room for clarity
  classType: string; // e.g., Lecture, Tutorial
}

// Define response structure
type ResponseData =
  | {
      available: boolean;
      checked: {
        // Include checked parameters for clarity
        roomName: string;
        day: string;
        startTime: string;
        endTime: string;
      };
      classes?: ConflictDetails[]; // Array of conflicts if not available
    }
  | { error: string };

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>,
) {
  if (req.method !== "POST") {
    res.setHeader("Allow", ["POST"]);
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  // 1. Authentication Check
  const supabase = createSupabaseRouteHandlerClient(req, res);
  const {
    data: { session },
  } = await supabase.auth.getSession();
  if (!session) {
    return res.status(401).json({ error: "Authentication required" });
  }
  // Note: Client-side handles allowlist authorization

  // 2. Validate Input
  const { roomName, day, startTime, endTime } = req.body as RequestBody;
  console.log("[API Check Availability] Received:", {
    roomName,
    day,
    startTime,
    endTime,
  });

  if (!roomName || !day || !startTime || !endTime) {
    return res
      .status(400)
      .json({
        error: "Missing required fields: roomName, day, startTime, endTime",
      });
  }
  // Add more validation for time format if needed

  try {
    // 3. Query for Conflicts
    // Find Timings entries that *overlap* with the requested range
    const conflicts = await prisma.timings.findMany({
      where: {
        Room: roomName, // Match based on the Room Name
        Day: day,
        // Overlap condition:
        // A conflict exists if (Booking StartTime < Request EndTime) AND (Booking EndTime > Request StartTime)
        StartTime: { lt: endTime }, // Booking starts before request ends
        EndTime: { gt: startTime }, // Booking ends after request starts
      },
      select: {
        SubCode: true,
        Class: true, // Type of class (Lecture, Tutorial, etc.)
        Teacher: true,
        StartTime: true,
        EndTime: true,
        Room: true,
      },
      orderBy: {
        StartTime: "asc",
      },
    });

    const isAvailable = conflicts.length === 0;

    const checkedParams = { roomName, day, startTime, endTime }; // Echo back checked params

    if (isAvailable) {
      console.log(
        `[API Check Availability] Room "${roomName}" is AVAILABLE on ${day} from ${startTime} to ${endTime}`,
      );
      return res.status(200).json({ available: true, checked: checkedParams });
    } else {
      console.log(
        `[API Check Availability] Room "${roomName}" is NOT AVAILABLE on ${day} from ${startTime} to ${endTime}. Conflicts:`,
        conflicts.length,
      );
      // Format conflicting class details
      const conflictDetails: ConflictDetails[] = conflicts.map((c) => ({
        subject: c.SubCode,
        classType: c.Class, // Keep original format or title case if preferred
        professor: c.Teacher,
        startTime: c.StartTime, // Assuming HH:mm format is already correct
        endTime: c.EndTime,
        room: c.Room, // Include room in conflict details
      }));

      return res.status(200).json({
        available: false,
        checked: checkedParams,
        classes: conflictDetails,
      });
    }
  } catch (error: any) {
    console.error("[API Check Availability] Error:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
}

</file>

<file path="src\pages\api\rooms.ts">
// src/pages/api/rooms.ts
import type { NextApiRequest, NextApiResponse } from "next";
import prisma from "@/lib/prisma";
// Auth check can be added if room list shouldn't be public
// import { createSupabaseRouteHandlerClient } from '@/lib/supabase/server';

// Define the structure for the response data
interface RoomListData {
  name: string; // Full Name
  shortCode: string; // Short Code
  capacity: number | null;
}

type ResponseData = RoomListData[] | { error: string };

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>,
) {
  if (req.method !== "GET") {
    res.setHeader("Allow", ["GET"]);
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  // Optional: Add auth check if needed
  // const supabase = createSupabaseRouteHandlerClient(req, res);
  // const { data: { session } } = await supabase.auth.getSession();
  // if (!session) { return res.status(401).json({ error: 'Authentication required' }); }

  try {
    const rooms = await prisma.rooms.findMany({
      select: {
        Name: true,
        ShortCode: true,
        Capacity: true,
      },
      where: {
        AND: [
          { NOT: { Name: { contains: "consultation", mode: "insensitive" } } },
          { NOT: { Name: { contains: "online", mode: "insensitive" } } },
        ],
      },
      orderBy: {
        Name: "asc", // Order alphabetically by Name
      },
    });

    // Map to the desired response structure
    const responseData: RoomListData[] = rooms.map((room) => ({
      name: room.Name,
      shortCode: room.ShortCode,
      capacity: room.Capacity,
    }));

    console.log(`[API Rooms] Fetched ${responseData.length} rooms.`);
    return res.status(200).json(responseData);
  } catch (error: any) {
    console.error("[API Rooms] Error fetching rooms:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
}

</file>

<file path="src\pages\api\schedule.ts">
// src/pages/api/schedule.ts
import type { NextApiRequest, NextApiResponse } from "next";
import fs from "fs";
import path from "path";
// ** REMOVED: import { createSupabaseRouteHandlerClient } from '@/lib/supabase/server'; **

// Define the expected structure from the JSON file
interface FrontendRoomData {
  room: string;
  availability: number[];
}

interface FrontendScheduleDay {
  day: string;
  rooms: FrontendRoomData[];
}
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<FrontendScheduleDay[] | { error: string }>,
) {
  if (req.method !== "GET") {
    res.setHeader("Allow", ["GET"]);
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  // --- REMOVED Authentication Check ---
  // Middleware should handle protecting this route if needed.
  // ---

  try {
    const schedulePath = path.join(
      process.cwd(),
      "public",
      "scheduleData.json",
    );
    if (!fs.existsSync(schedulePath)) {
      console.error(`Schedule data file not found at: ${schedulePath}`);
      return res.status(404).json({ error: "Schedule data file not found" });
    }
    const fileContents = fs.readFileSync(schedulePath, "utf8");
    const scheduleData: FrontendScheduleDay[] = JSON.parse(fileContents);
    if (!Array.isArray(scheduleData)) {
      throw new Error("Invalid data format: scheduleData is not an array.");
    }
    console.log("[API Schedule] Successfully read scheduleData.json");
    return res.status(200).json(scheduleData);
  } catch (error: any) {
    console.error("Error reading or parsing schedule data:", error);
    if (error instanceof SyntaxError) {
      return res
        .status(500)
        .json({ error: "Failed to parse schedule data: Invalid JSON format." });
    }
    return res
      .status(500)
      .json({ error: "Internal Server Error reading schedule data" });
  }
}

</file>

<file path="src\pages\auth\login.tsx">
// src/pages/auth/login.tsx
import GradientBackground from "@/components/GradientBackground";
import { JSX, SVGProps, useEffect, useState } from "react";
import { getSupabaseBrowserClient } from "@/lib/supabase/client";
import { useRouter } from "next/router";
import type { Provider, Session } from "@supabase/supabase-js";
import Cookies from "js-cookie";
import { AlertCircle } from "lucide-react";

// --- SVG Icons (Keep as is) ---
// --- SVG Icons --- (Keep as is)
export function Google(
  props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>,
) {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M21.5939 11.0792H12.3209V13.8256H18.9768C18.6214 17.6382 15.5196 19.286 12.5148 19.286C8.70223 19.286 5.30969 16.3135 5.30969 12.0162C5.30969 7.88057 8.54068 4.74651 12.5148 4.74651C15.5519 4.74651 17.3936 6.71741 17.3936 6.71741L19.2676 4.74651C19.2676 4.74651 16.7474 2.00016 12.3856 2.00016C6.6344 1.96785 2.24023 6.78203 2.24023 11.9839C2.24023 17.0243 6.37592 22 12.4825 22C17.8783 22 21.7554 18.349 21.7554 12.8886C21.7877 11.7578 21.5939 11.0792 21.5939 11.0792Z"
        fill="#ffffff"
      />
    </svg>
  );
}

export function Github(
  props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>,
) {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M12 2.24902C6.51613 2.24902 2 6.70064 2 12.249C2 16.6361 4.87097 20.3781 8.87097 21.7329C9.3871 21.8297 9.54839 21.5071 9.54839 21.2813C9.54839 21.0555 9.54839 20.4103 9.51613 19.5393C6.74194 20.1845 6.16129 18.1845 6.16129 18.1845C5.70968 17.0555 5.03226 16.7329 5.03226 16.7329C4.12903 16.0877 5.06452 16.0877 5.06452 16.0877C6.06452 16.12 6.6129 17.12 6.6129 17.12C7.48387 18.6684 8.96774 18.2168 9.51613 17.9264C9.6129 17.2813 9.87097 16.8297 10.1613 16.5716C7.96774 16.3458 5.6129 15.4748 5.6129 11.6684C5.6129 10.5716 6.03226 9.70064 6.64516 9.02322C6.54839 8.79741 6.19355 7.76515 6.74194 6.37806C6.74194 6.37806 7.6129 6.11999 9.51613 7.41031C10.3226 7.18451 11.1613 7.05548 12.0323 7.05548C12.9032 7.05548 13.7742 7.15225 14.5484 7.41031C16.4516 6.15225 17.2903 6.37806 17.2903 6.37806C17.8387 7.73289 17.5161 8.79741 17.3871 9.02322C18.0323 9.70064 18.4194 10.6039 18.4194 11.6684C18.4194 15.4748 16.0645 16.3458 13.871 16.5716C14.2258 16.8942 14.5484 17.5393 14.5484 18.4426C14.5484 19.7974 14.5161 20.8619 14.5161 21.1845C14.5161 21.4426 14.7097 21.7329 15.1935 21.6361C19.129 20.3135 22 16.6039 22 12.1845C21.9677 6.70064 17.4839 2.24902 12 2.24902Z"
        fill="#ffffff"
      />
    </svg>
  );
}

// --- Login Page Component ---
export default function LoginPage() {
  const supabase = getSupabaseBrowserClient();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // --- NEW: Check for error query parameter on mount ---
  useEffect(() => {
    if (router.isReady) {
      // Ensure router.query is populated
      const errorQuery = router.query.error;
      if (typeof errorQuery === "string") {
        // Decode the error message from URL
        const decodedError = decodeURIComponent(errorQuery.replace(/\+/g, " "));
        console.log("Login page received error query:", decodedError);
        setErrorMessage(decodedError);

        // Clean the URL by removing the error parameter
        const { pathname, query } = router;
        delete query.error; // Remove error from query object
        router.replace({ pathname, query }, undefined, { shallow: true });
      }
    }
  }, [router.isReady, router.query.error, router]); // Rerun when query param changes or router is ready

  // Helper to get redirect path (no changes needed here)
  const getRedirectPathFromQuery = (): string => {
    /* ... */ const nextPath = router.query.next;
    if (typeof nextPath === "string" && nextPath.startsWith("/")) {
      return nextPath;
    }
    return "/";
  };

  const handleOAuthLogin = async (provider: Provider) => {
    setIsLoading(true);
    setErrorMessage(null); // Clear previous errors
    const redirectURL = window.location.origin + "/api/auth/callback"; // Callback URL

    // Store redirect path in cookie (no changes needed here)
    const redirectPath = getRedirectPathFromQuery();
    if (redirectPath && redirectPath !== "/") {
      Cookies.set("supabase-redirect-path", redirectPath, {
        path: "/",
        expires: 1 / 288,
      });
      console.log("Stored redirect path in cookie:", redirectPath);
    } else {
      Cookies.remove("supabase-redirect-path", { path: "/" });
    }

    const { error } = await supabase.auth.signInWithOAuth({
      provider: provider,
      options: { redirectTo: redirectURL },
    });

    if (error) {
      console.error(`Error initiating login with ${provider}:`, error.message);
      // --- CHANGE: Set error message state for client-side errors ---
      setErrorMessage(
        `Failed to start login with ${provider}: ${error.message}. Please try again.`,
      );
      Cookies.remove("supabase-redirect-path", { path: "/" });
      setIsLoading(false); // Stop loading as initiation failed
    } else {
      console.log(`Redirecting to ${provider} for authentication...`);
      // Redirect happens automatically, loading state persists until redirect
    }
  };

  // Redirect already logged-in users (no changes needed here)
  useEffect(() => {
    /* ... existing useEffect for session check ... */
    const checkSession = async () => {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      if (session) {
        const cookieRedirectPath = Cookies.get("supabase-redirect-path");
        const finalRedirectUrl = cookieRedirectPath || "/";
        Cookies.remove("supabase-redirect-path", { path: "/" });
        console.log(
          "User already logged in (useEffect check), redirecting to:",
          finalRedirectUrl,
        );
        router.replace(finalRedirectUrl);
      }
    };
    checkSession();
    const { data: authListener } = supabase.auth.onAuthStateChange(
      (event: string, session: Session | null) => {
        if (event === "SIGNED_IN" && session) {
          const cookieRedirectPath = Cookies.get("supabase-redirect-path");
          const finalRedirectUrl = cookieRedirectPath || "/";
          Cookies.remove("supabase-redirect-path", { path: "/" });
          console.log(
            "Auth state changed to SIGNED_IN (listener), redirecting to:",
            finalRedirectUrl,
          );
          router.replace(finalRedirectUrl);
        } else if (event === "SIGNED_OUT") {
          console.log("Auth state changed to SIGNED_OUT (listener)");
        }
      },
    );
    return () => {
      authListener?.subscription.unsubscribe();
    };
  }, [supabase, router]);

  return (
    <div className={`relative min-h-screen`}>
      <GradientBackground />
      <div className="relative z-10 grid min-h-screen place-items-center p-4">
        <div className="w-full max-w-md space-y-6 rounded-xl border border-white/20 bg-white/10 p-8 shadow-lg backdrop-blur-lg">
          <div className="space-y-2 text-center text-white">
            <h1 className="text-3xl font-bold tracking-tight">Sign In</h1>
            <p className="text-md text-gray-300">
              Choose your preferred provider to continue
            </p>
          </div>

          {/* --- NEW: Error Alert Display --- */}
          {errorMessage && (
            <div className="rounded-md border border-red-500/60 bg-red-950/50 p-4 text-center text-sm text-red-200 flex items-center justify-center gap-2">
              <AlertCircle className="h-5 w-5 flex-shrink-0 text-red-400" />
              <span>{errorMessage}</span>
            </div>
          )}
          {/* --- End Error Alert Display --- */}

          <div className="space-y-4">
            {/* Google Button */}
            <button
              type="button"
              onClick={() => handleOAuthLogin("google")}
              disabled={isLoading}
              className="w-full rounded-full border border-solid border-white/[.3] transition-colors flex items-center justify-center gap-3 hover:bg-white/[.1] hover:border-white/[.5] font-medium text-base h-12 px-5 text-white disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Google className="size-5" />
              <span>{isLoading ? "Processing..." : "Sign in with Google"}</span>
            </button>

            {/* GitHub Button */}
            <button
              type="button"
              onClick={() => handleOAuthLogin("github")}
              disabled={isLoading}
              className="w-full rounded-full border border-solid border-white/[.3] transition-colors flex items-center justify-center gap-3 hover:bg-white/[.1] hover:border-white/[.5] font-medium text-base h-12 px-5 text-white disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Github className="size-5" />
              <span>{isLoading ? "Processing..." : "Sign in with GitHub"}</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

</file>

<file path="src\pages\available-now.tsx">
// src/pages/available-now.tsx
import { useState, useEffect, useMemo, useCallback, useRef } from "react";
import Head from "next/head";
import { motion, AnimatePresence } from "framer-motion";
import { DoorOpen, AlertCircle, Clock, Users } from "lucide-react";
import { DateTime } from "luxon"; // Use Luxon for formatting
import { Button } from "@/components/ui/button";

// --- Data Structures (Client-side representation) ---
interface AvailableRoomInfo {
  name: string;
  shortCode: string;
  capacity: number | null;
}
// API response structure expected by the client
interface ApiResponseData {
  checkedAt: string;
  rooms: AvailableRoomInfo[];
}
interface ApiErrorResponse {
  error: string;
}

// --- Constants ---
const DUBAI_TIMEZONE = "Asia/Dubai"; // For formatting display time

export default function AvailableNowPage() {
  const [availableRooms, setAvailableRooms] = useState<AvailableRoomInfo[]>([]);
  const [checkedAt, setCheckedAt] = useState<string | null>(null); // Store ISO string from API
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const fetchInitiated = useRef(false); // Ref to prevent double fetch in Strict Mode

  // --- Data Fetching Function (Client-side) ---
  const fetchData = useCallback(async () => {
    setError(null);
    setCheckedAt(null);
    setAvailableRooms([]);
    console.log(
      "[AvailableNowPage Client] Fetching /api/available-now via POST...",
    );

    try {
      const response = await fetch("/api/available-now", { method: "POST" });
      console.log(
        `[AvailableNowPage Client] API Response status: ${response.status}`,
      );

      if (!response.ok) {
        let errorMsg = `HTTP error! status: ${response.status}`;
        try {
          const errData = (await response.json()) as ApiErrorResponse; // Use interface
          errorMsg = errData.error || errorMsg;
        } catch (_e) {
          console.warn("Couldn't parse error response body:", _e);
        }
        throw new Error(errorMsg);
      }

      const data: ApiResponseData = await response.json();
      console.log("[AvailableNowPage Client] Received data:", data);
      if (
        !data ||
        !Array.isArray(data.rooms) ||
        typeof data.checkedAt !== "string"
      ) {
        throw new Error("Invalid data format received from API");
      }

      // Set state with data received from API (already filtered server-side)
      setAvailableRooms(data.rooms);
      setCheckedAt(data.checkedAt);
    } catch (err: any) {
      console.error(
        "[AvailableNowPage Client] Error fetching available rooms:",
        err,
      );
      setError(
        err instanceof Error ? err.message : "Failed to load available rooms.",
      );
      setAvailableRooms([]);
    } finally {
      setIsLoading(false);
      console.log("[AvailableNowPage Client] Fetch finished.");
    }
  }, []); // No dependencies needed

  // --- Effect to Fetch Data ONCE on Mount ---
  useEffect(() => {
    if (!fetchInitiated.current) {
      console.log("[AvailableNowPage Client] useEffect initiating fetchData.");
      fetchInitiated.current = true;
      setIsLoading(true);
      fetchData();
    } else {
      console.log(
        "[AvailableNowPage Client] useEffect ran again (Strict Mode?), fetch already initiated.",
      );
    }
  }, [fetchData]);

  // --- Format Timestamp using Luxon (from checkedAt state) ---
  const formattedCheckedTime = useMemo(() => {
    if (!checkedAt) return "--:--";
    try {
      return DateTime.fromISO(checkedAt)
        .setZone(DUBAI_TIMEZONE)
        .toFormat("h:mm a");
    } catch {
      return "Invalid Time";
    }
  }, [checkedAt]);

  const formattedCheckedDay = useMemo(() => {
    if (!checkedAt) return "Loading...";
    try {
      return DateTime.fromISO(checkedAt)
        .setZone(DUBAI_TIMEZONE)
        .toFormat("cccc, LLL d");
    } catch {
      return "Invalid Date";
    }
  }, [checkedAt]);

  // --- Animation Variants ---
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { delayChildren: 0.1, staggerChildren: 0.08 },
    },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { type: "spring", stiffness: 100, damping: 12 },
    },
  };

  // --- Render Logic (Client-side) ---
  const renderContent = () => {
    // Error State
    if (error && !isLoading) {
      return (
        // This is the JSX that caused the error in the .ts file
        <motion.div
          key="error"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0 }}
          className="mt-8 text-center bg-red-950/70 border border-red-500/60 rounded-lg p-6 text-red-200 max-w-md mx-auto flex flex-col items-center gap-4"
        >
          <AlertCircle className="w-8 h-8 text-red-400" />
          <p className="font-semibold text-red-100">Error loading rooms:</p>
          <p className="text-sm">{error}</p>
          <Button
            variant="destructive"
            onClick={() => {
              fetchInitiated.current = false;
              setIsLoading(true);
              fetchData();
            }}
            className="mt-4 px-4 py-2 bg-red-600/50 hover:bg-red-600/60 rounded-md text-red-100 text-sm font-medium transition-colors"
          >
            Try Again
          </Button>
        </motion.div>
      );
    }

    // Loading, Empty, List States
    return (
      <AnimatePresence mode="wait">
        {isLoading ? (
          <motion.div
            key="loader-now"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex justify-center items-center py-20"
          >
            {" "}
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-purple-400"></div>{" "}
          </motion.div>
        ) : availableRooms.length === 0 ? (
          <motion.p
            key="empty-now"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="text-center text-gray-400 py-10"
          >
            {" "}
            No rooms are currently available.{" "}
          </motion.p>
        ) : (
          <motion.ul
            key="list-now"
            className="flex flex-wrap justify-center gap-3"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
          >
            {availableRooms.map((room) => (
              <motion.li
                key={room.shortCode}
                variants={itemVariants}
                layout
                className="w-fit bg-black/20 border border-white/15 rounded-full shadow-lg backdrop-blur-sm px-4 py-2 flex items-center gap-2.5 hover:bg-white/10 hover:border-white/25 transition-all duration-200 group cursor-default"
              >
                <DoorOpen className="w-4 h-4 text-purple-400 flex-shrink-0 group-hover:scale-110 transition-transform" />
                <span
                  className="text-white text-sm font-medium truncate"
                  title={room.name}
                >
                  {" "}
                  {room.name}{" "}
                  {room.capacity !== null && (
                    <span className="text-xs text-gray-400 ml-1.5">
                      ({room.capacity})
                    </span>
                  )}{" "}
                </span>
              </motion.li>
            ))}
          </motion.ul>
        )}
      </AnimatePresence>
    );
  };

  // --- Render Page Structure (Client-side) ---
  return (
    <div className="w-full max-w-7xl mx-auto px-4 md:px-6 py-6 pt-20 md:pt-24 flex-grow flex flex-col">
      <Head>
        {" "}
        <title>Available Now - vacansee</title>{" "}
      </Head>

      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1, duration: 0.4, ease: "easeOut" }}
      >
        <div className="text-center">
          <h1 className="text-3xl md:text-4xl font-bold mb-2 text-center text-white inline-block mr-2">
            {" "}
            Rooms Available Now{" "}
          </h1>
          {!isLoading && !error && (
            <span className="inline-flex items-center gap-1.5 text-lg text-purple-300 font-medium align-middle">
              <Users className="w-5 h-5" />({availableRooms.length})
            </span>
          )}
        </div>
        <div className="flex items-center justify-center gap-2 text-sm text-gray-400 mb-8">
          <Clock className="w-4 h-4" />
          <span>
            {" "}
            Checked{" "}
            <span className="font-medium text-gray-300">
              {formattedCheckedDay}
            </span>{" "}
            at ~
            <span className="font-medium text-gray-300">
              {formattedCheckedTime}
            </span>{" "}
          </span>
        </div>
      </motion.div>

      <div className="flex-grow">
        {renderContent()} {/* Render the appropriate content */}
      </div>
    </div>
  );
}

</file>

<file path="src\pages\available-soon.tsx">
// src/pages/available-soon.tsx
import { useState, useEffect, useCallback, useMemo } from "react";
import Head from "next/head";
import { motion, AnimatePresence } from "framer-motion";
import { DoorOpen, AlertCircle, Clock, Users } from "lucide-react";
import { parseISO } from "date-fns";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";

// --- Data Structures ---
interface AvailableRoomInfo {
  name: string;
  shortCode: string;
  capacity: number | null;
}
interface ApiResponseData {
  checkedAtFutureTime: string;
  rooms: AvailableRoomInfo[];
}
interface ApiErrorResponse {
  error: string;
}

// --- Duration Options ---
const durationOptions = [
  { label: "in 30 minutes", value: 30 },
  { label: "in 1 hour", value: 60 },
  { label: "in 1.5 hours", value: 90 },
  { label: "in 2 hours", value: 120 },
];

// --- UTC+4 Timezone Identifier ---
const TARGET_TIMEZONE = "Etc/GMT-4"; // Represents UTC+4

// --- Room Groupings ---
const roomGroupings: Record<string, string[]> = {
  "4.467": ["4.46", "4.47"],
  "5.134": ["5.13", "5.14"],
  "6.345": ["6.34", "6.35"],
};
const mainGroupRooms = Object.keys(roomGroupings);

export default function AvailableSoonPage() {
  const [availableRooms, setAvailableRooms] = useState<AvailableRoomInfo[]>([]);
  const [selectedDuration, setSelectedDuration] = useState<number>(
    durationOptions[0].value,
  );
  const [checkedAtFutureTime, setCheckedAtFutureTime] = useState<string | null>(
    null,
  );
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // --- Data Fetching and Filtering ---
  const fetchData = useCallback(async (duration: number) => {
    setIsLoading(true);
    setError(null);
    setCheckedAtFutureTime(null);
    setAvailableRooms([]);
    console.log(
      `[AvailableSoonPage] Fetching for duration: ${duration} minutes`,
    );
    try {
      const response = await fetch("/api/available-soon", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ durationMinutes: duration }),
      });
      const responseTimestamp = new Date();
      console.log(
        `[AvailableSoonPage] API Response status: ${response.status}`,
      );
      if (!response.ok) {
        let errorMsg = `HTTP error! status: ${response.status}`;
        try {
          const contentType = response.headers.get("content-type");
          if (contentType && contentType.includes("application/json")) {
            const errData = (await response.json()) as ApiErrorResponse;
            if (errData && typeof errData.error === "string") {
              errorMsg = errData.error;
            }
          } else {
            const textError = await response.text();
            console.warn("API error response was not JSON:", textError);
            errorMsg = textError.length < 100 ? textError : errorMsg;
          }
        } catch (_e) {
          console.warn(
            "Couldn't parse error response body or read as text:",
            _e,
          );
        }
        throw new Error(errorMsg);
      }
      const data: ApiResponseData = await response.json();
      console.log("[AvailableSoonPage] Received initial data:", data);
      if (
        !data ||
        !Array.isArray(data.rooms) ||
        typeof data.checkedAtFutureTime !== "string"
      ) {
        throw new Error("Invalid data format received from API");
      }

      const initialRooms = data.rooms;
      const availableShortCodes = new Set(
        initialRooms.map((room) => room.shortCode),
      );
      const relatedRoomsToExclude = new Set<string>();
      mainGroupRooms.forEach((mainRoomCode) => {
        if (!availableShortCodes.has(mainRoomCode)) {
          const relatedCodes = roomGroupings[mainRoomCode];
          if (relatedCodes) {
            relatedCodes.forEach((code) => relatedRoomsToExclude.add(code));
            console.log(
              `[AvailableSoonPage] Main room ${mainRoomCode} is missing. Marking related rooms for exclusion: ${relatedCodes.join(", ")}`,
            );
          }
        }
      });
      const filteredRooms = initialRooms.filter(
        (room) => !relatedRoomsToExclude.has(room.shortCode),
      );
      console.log(
        "[AvailableSoonPage] Filtered rooms after grouping logic:",
        filteredRooms,
      );

      setAvailableRooms(filteredRooms);
      setCheckedAtFutureTime(
        data.checkedAtFutureTime || responseTimestamp.toISOString(),
      );
    } catch (err: any) {
      console.error(
        "[AvailableSoonPage] Error fetching/processing available rooms:",
        err,
      );
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("An unknown error occurred.");
      }
      setAvailableRooms([]);
    } finally {
      setIsLoading(false);
      console.log("[AvailableSoonPage] Fetch finished.");
    }
  }, []);

  useEffect(() => {
    fetchData(selectedDuration);
  }, [selectedDuration, fetchData]);

  // --- Format Timestamp in UTC+4 ---
  const formattedCheckedTime = useMemo(() => {
    if (!checkedAtFutureTime) return "--:--";
    try {
      const dateObj = parseISO(checkedAtFutureTime);
      return dateObj.toLocaleTimeString("en-US", {
        timeZone: TARGET_TIMEZONE,
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      });
    } catch {
      return "Invalid Time";
    }
  }, [checkedAtFutureTime]);
  const formattedCheckedDay = useMemo(() => {
    if (!checkedAtFutureTime) return "Loading...";
    try {
      const dateObj = parseISO(checkedAtFutureTime);
      return dateObj.toLocaleDateString("en-US", {
        timeZone: TARGET_TIMEZONE,
        weekday: "long",
        month: "short",
        day: "numeric",
      });
    } catch {
      return "Invalid Date";
    }
  }, [checkedAtFutureTime]);

  // --- Animation Variants ---
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { delayChildren: 0.1, staggerChildren: 0.08 },
    },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { type: "spring", stiffness: 100, damping: 12 },
    },
  };

  // --- Render Logic ---
  const renderContent = () => {
    if (error && !isLoading) {
      /* Error rendering */ return (
        <motion.div
          key="error"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0 }}
          className="mt-8 text-center bg-red-950/70 border border-red-500/60 rounded-lg p-6 text-red-200 max-w-md mx-auto flex flex-col items-center gap-4"
        >
          {" "}
          <AlertCircle className="w-8 h-8 text-red-400" />{" "}
          <p className="font-semibold text-red-100">Error loading rooms:</p>{" "}
          <p className="text-sm">{error}</p>{" "}
          <Button
            variant="destructive"
            onClick={() => fetchData(selectedDuration)}
            className="mt-4 px-4 py-2 bg-red-600/50 hover:bg-red-600/60 rounded-md text-red-100 text-sm font-medium transition-colors"
          >
            {" "}
            Try Again{" "}
          </Button>{" "}
        </motion.div>
      );
    }
    return (
      /* Loading/Empty/List rendering */ <AnimatePresence mode="wait">
        {" "}
        {isLoading ? (
          <motion.div
            key="loader-soon"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex justify-center items-center py-20"
          >
            {" "}
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-purple-400"></div>{" "}
          </motion.div>
        ) : availableRooms.length === 0 ? (
          <motion.p
            key="empty-soon"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="text-center text-gray-400 py-10"
          >
            {" "}
            No rooms seem to be available around {formattedCheckedTime}.{" "}
          </motion.p>
        ) : (
          <motion.ul
            key={`list-soon-${selectedDuration}`}
            className="flex flex-wrap justify-center gap-3"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
          >
            {" "}
            {availableRooms.map((room) => (
              <motion.li
                key={room.shortCode}
                variants={itemVariants}
                layout
                className="w-fit bg-black/20 border border-white/15 rounded-full shadow-lg backdrop-blur-sm px-4 py-2 flex items-center gap-2.5 hover:bg-white/10 hover:border-white/25 transition-all duration-200 group cursor-default"
              >
                {" "}
                <DoorOpen className="w-4 h-4 text-purple-400 flex-shrink-0 group-hover:scale-110 transition-transform" />{" "}
                <span
                  className="text-white text-sm font-medium truncate"
                  title={room.name}
                >
                  {" "}
                  {room.name}{" "}
                  {room.capacity !== null && (
                    <span className="text-xs text-gray-400 ml-1.5">
                      ({room.capacity})
                    </span>
                  )}{" "}
                </span>{" "}
              </motion.li>
            ))}{" "}
          </motion.ul>
        )}{" "}
      </AnimatePresence>
    );
  };

  // --- Render Page Content ---
  return (
    <div className="w-full max-w-7xl mx-auto px-4 md:px-6 py-6 pt-20 md:pt-24 flex-grow flex flex-col">
      <Head>
        {" "}
        <title>Available Soon - vacansee</title>{" "}
      </Head>
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1, duration: 0.4, ease: "easeOut" }}
      >
        <div className="text-center">
          <h1 className="text-3xl md:text-4xl font-bold mb-2 text-center text-white inline-block mr-2">
            {" "}
            Rooms Available Soon{" "}
          </h1>
          {!isLoading && !error && (
            <span className="inline-flex items-center gap-1.5 text-lg text-purple-300 font-medium align-middle">
              {" "}
              <Users className="w-5 h-5" /> ({availableRooms.length}){" "}
            </span>
          )}
        </div>
        {/* Timestamp Display - Ensured text-sm and removed (UTC+4) span */}
        <div className="flex items-center justify-center gap-2 text-sm text-gray-400 mb-6">
          {" "}
          {/* Uses text-sm */}
          <Clock className="w-4 h-4" />
          <span>
            {" "}
            Checking availability for ~
            <span className="font-medium text-gray-300">
              {formattedCheckedTime}
            </span>{" "}
            on{" "}
            <span className="font-medium text-gray-300">
              {formattedCheckedDay}
            </span>{" "}
            {/* Removed UTC+4 Span */}{" "}
          </span>
        </div>
        <div className="flex items-center justify-center gap-2 mb-8">
          <label
            htmlFor="duration-select"
            className="text-sm font-medium text-gray-300"
          >
            Show rooms available:
          </label>
          <Select
            value={selectedDuration.toString()}
            onValueChange={(value) => setSelectedDuration(parseInt(value, 10))}
          >
            <SelectTrigger
              id="duration-select"
              className="w-[180px] bg-black/20 border-white/20 text-white focus:ring-purple-500 focus:border-purple-500"
            >
              {" "}
              <SelectValue placeholder="Select duration" />{" "}
            </SelectTrigger>
            <SelectContent className="bg-black/80 backdrop-blur-md border-white/20 text-white">
              {" "}
              {durationOptions.map((option) => (
                <SelectItem
                  key={option.value}
                  value={option.value.toString()}
                  className="focus:bg-purple-600/30 focus:text-white"
                >
                  {" "}
                  {option.label}{" "}
                </SelectItem>
              ))}{" "}
            </SelectContent>
          </Select>
        </div>
      </motion.div>
      <div className="flex-grow"> {renderContent()} </div>
    </div>
  );
}

</file>

<file path="src\pages\check.tsx">
// src/pages/check.tsx
import { useState, useEffect, useCallback, useMemo } from "react";
import Head from "next/head";
import { motion, AnimatePresence } from "framer-motion";
// --- Import AlertCircle with other icons ---
import {
  AlertCircle,
  CheckCircle,
  Clock,
  Search,
  X,
  Calendar,
  ChevronsUpDown,
  CircleX,
  Loader2,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { cn } from "@/lib/utils";
import {
  format,
  getDay,
  setHours,
  setMinutes,
  startOfDay,
  addMinutes,
} from "date-fns";
import Fuse from "fuse.js";

// --- Data Structures (Unchanged) ---
interface RoomListData {
  name: string;
  shortCode: string;
  capacity: number | null;
}
interface ConflictDetails {
  subject: string;
  professor: string;
  startTime: string;
  endTime: string;
  room: string;
  classType: string;
}
interface CheckResult {
  available: boolean;
  checked: {
    roomName: string;
    day: string;
    startTime: string;
    endTime: string;
  };
  classes?: ConflictDetails[];
}

// --- Constants (Unchanged) ---
const daysOfWeek = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
];
const MIN_HOUR = 7;
const MAX_HOUR = 23;

// --- Helper Functions (Unchanged) ---
function generateTimeSlots(): string[] {
  const slots: string[] = [];
  const referenceDate = startOfDay(new Date());
  const start = setMinutes(setHours(referenceDate, MIN_HOUR), 0);
  const end = setMinutes(setHours(referenceDate, MAX_HOUR), 0);
  let current = start;
  while (current <= end) {
    slots.push(format(current, "HH:mm"));
    current = addMinutes(current, 30);
  }
  return slots;
}
const timeSlots = generateTimeSlots();

// --- Main Page Component ---
export default function CheckAvailabilityPage() {
  // --- State (Unchanged) ---
  const [selectedRoom, setSelectedRoom] = useState<RoomListData | null>(null);
  const [day, setDay] = useState<string>("");
  const [startTime, setStartTime] = useState<string>("");
  const [endTime, setEndTime] = useState<string>("");
  const [allRooms, setAllRooms] = useState<RoomListData[]>([]);
  const [comboboxOpen, setComboboxOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [isChecking, setIsChecking] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);
  const [checkResult, setCheckResult] = useState<CheckResult | null>(null);
  const [isLoadingRooms, setIsLoadingRooms] = useState(true);
  const [roomFetchError, setRoomFetchError] = useState<string | null>(null);

  // --- Fetch Rooms (Unchanged) ---
  useEffect(() => {
    const fetchRooms = async () => {
      setIsLoadingRooms(true);
      setRoomFetchError(null);
      setFormError(null);
      try {
        const response = await fetch("/api/rooms");
        if (!response.ok) {
          let errorMsg = "Failed to fetch rooms list";
          try {
            const errData = await response.json();
            errorMsg = errData.error || `API Error (${response.status})`;
          } catch {
            /* ignore parsing error */
          }
          throw new Error(errorMsg);
        }
        const data: RoomListData[] = await response.json();
        setAllRooms(data);
        setRoomFetchError(null);
      } catch (err: any) {
        console.error("Error fetching rooms:", err);
        setRoomFetchError(err.message || "Could not load room list.");
        setAllRooms([]);
      } finally {
        setIsLoadingRooms(false);
      }
    };
    fetchRooms();
  }, []);

  // --- Fuzzy Search (Unchanged) ---
  const fuse = useMemo(() => {
    if (allRooms.length === 0) return null;
    return new Fuse(allRooms, { keys: ["name", "shortCode"], threshold: 0.4 });
  }, [allRooms]);
  const filteredRooms = useMemo(() => {
    if (!fuse || searchQuery === "") return allRooms;
    return fuse.search(searchQuery).map((result) => result.item);
  }, [searchQuery, allRooms, fuse]);

  // --- Event Handlers (Unchanged) ---
  const handleNow = useCallback(() => {
    const now = new Date();
    const currentMinutes = now.getMinutes();
    const startMinutes = currentMinutes < 30 ? 0 : 30;
    const startTimeExact = setMinutes(
      setHours(now, now.getHours()),
      startMinutes,
    );
    const endMinutes = startMinutes === 0 ? 30 : 0;
    const endHour = startMinutes === 0 ? now.getHours() : now.getHours() + 1;
    const endTimeExact = setMinutes(setHours(now, endHour), endMinutes);
    const todayJsIndex = getDay(now);
    const todayAdjusted = todayJsIndex === 0 ? 6 : todayJsIndex - 1;
    if (!day) {
      setDay(daysOfWeek[todayAdjusted]);
    }
    setStartTime(format(startTimeExact, "HH:mm"));
    const endFormatted = format(endTimeExact, "HH:mm");
    if (timeSlots.includes(endFormatted)) {
      setEndTime(endFormatted);
    } else {
      setEndTime(timeSlots[timeSlots.length - 1]);
    }
    setFormError(null);
    setCheckResult(null);
  }, [day]);
  const handleAllDay = useCallback(() => {
    if (!day) {
      const todayJsIndex = getDay(new Date());
      const todayAdjusted = todayJsIndex === 0 ? 6 : todayJsIndex - 1;
      setDay(daysOfWeek[todayAdjusted]);
    }
    setStartTime(timeSlots[0]);
    setEndTime(timeSlots[timeSlots.length - 1]);
    setFormError(null);
    setCheckResult(null);
  }, [day]);
  const handleReset = useCallback(() => {
    setSelectedRoom(null);
    setSearchQuery("");
    setDay("");
    setStartTime("");
    setEndTime("");
    setFormError(null);
    setCheckResult(null);
    setComboboxOpen(false);
  }, []);
  const handleSubmit = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      setFormError(null);
      setCheckResult(null);
      if (roomFetchError) {
        setFormError("Cannot check availability: Room list failed to load.");
        return;
      }
      if (!selectedRoom || !day || !startTime || !endTime) {
        setFormError("Please select a room, day, start time, and end time.");
        return;
      }
      if (startTime >= endTime) {
        setFormError("End time must be after start time.");
        return;
      }
      setIsChecking(true);
      try {
        const response = await fetch("/api/check-availability", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            roomName: selectedRoom.name,
            day: day,
            startTime: startTime,
            endTime: endTime,
          }),
        });
        if (!response.ok) {
          let errorMsg = `API Error: ${response.status}`;
          try {
            const errData = await response.json();
            errorMsg = errData.error || errorMsg;
          } catch {
            /* ignore */
          }
          throw new Error(errorMsg);
        }
        const data: CheckResult = await response.json();
        setCheckResult(data);
      } catch (err: any) {
        console.error("Check availability error:", err);
        setFormError(err.message || "Failed to check availability.");
        setCheckResult(null);
      } finally {
        setIsChecking(false);
      }
    },
    [selectedRoom, day, startTime, endTime, roomFetchError],
  );

  // --- Animation Variants (Unchanged) ---
  const formItemVariant = {
    hidden: { opacity: 0, y: 15 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: { delay: i * 0.07, duration: 0.4, ease: "easeOut" },
    }),
  };
  const resultVariant = {
    hidden: { opacity: 0, scale: 0.95, y: -10 },
    visible: {
      opacity: 1,
      scale: 1,
      y: 0,
      height: "auto",
      marginTop: "2rem",
      transition: { duration: 0.3, ease: [0.16, 1, 0.3, 1] },
    },
    exit: {
      opacity: 0,
      scale: 0.95,
      y: 10,
      height: 0,
      marginTop: 0,
      transition: { duration: 0.2, ease: "easeIn" },
    },
  };
  const alertVariants = {
    success: "bg-green-950/50 border-green-500/60",
    destructive: "bg-red-950/30 border-red-500/60",
  };

  // --- Render ---
  return (
    <div className="w-full max-w-4xl mx-auto px-4 py-6 pt-20 md:pt-24 flex-grow flex flex-col">
      <Head>
        <title>Check Availability - vacansee</title>
      </Head>
      <motion.h1
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1, duration: 0.4 }}
        className="text-3xl md:text-4xl font-bold mb-10 text-center text-white"
      >
        {" "}
        Check Room Availability{" "}
      </motion.h1>

      <form
        onSubmit={handleSubmit}
        className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-5"
      >
        {/* --- Form Elements (Unchanged structure) --- */}
        <motion.div
          variants={formItemVariant}
          initial="hidden"
          animate="visible"
          custom={0}
        >
          <label
            htmlFor="room-search"
            className="block text-sm font-medium text-gray-300 mb-1.5"
          >
            Room
          </label>
          <Popover open={comboboxOpen} onOpenChange={setComboboxOpen}>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                role="combobox"
                aria-expanded={comboboxOpen}
                disabled={isLoadingRooms || !!roomFetchError}
                className="w-full justify-between bg-black/20 border-white/20 hover:bg-black/30 hover:border-white/30 text-white disabled:opacity-70 disabled:cursor-not-allowed"
              >
                <span className="flex items-center justify-between w-full">
                  <span className="truncate">
                    {" "}
                    {isLoadingRooms
                      ? "Loading rooms..."
                      : roomFetchError
                        ? "Error loading rooms"
                        : selectedRoom
                          ? `${selectedRoom.name}${selectedRoom.capacity !== null ? ` (${selectedRoom.capacity})` : ""}`
                          : "Select room..."}{" "}
                  </span>
                  <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </span>
              </Button>
            </PopoverTrigger>
            <PopoverContent
              className="max-h-[--radix-popover-content-available-height] p-0 bg-black/80 backdrop-blur-md border-white/20 text-white"
              style={{
                fontFamily: "inherit",
                width: "var(--radix-popover-trigger-width)",
              }}
            >
              {isLoadingRooms ? (
                <div className="flex items-center justify-center p-4 h-20">
                  {" "}
                  <Loader2 className="h-6 w-6 animate-spin text-purple-400" />{" "}
                </div>
              ) : roomFetchError ? (
                <div className="p-4 text-center text-sm text-red-300">
                  {" "}
                  {roomFetchError}{" "}
                </div>
              ) : (
                <Command shouldFilter={false}>
                  <CommandInput
                    placeholder="Search room..."
                    value={searchQuery}
                    onValueChange={setSearchQuery}
                    className="h-9 text-white placeholder:text-gray-400 border-0 border-b border-white/20 rounded-none ring-offset-0 focus-visible:ring-0 focus-visible:border-b-purple-500"
                  />
                  <CommandList className="hide-scrollbar">
                    {" "}
                    <CommandEmpty>No room found.</CommandEmpty>{" "}
                    <CommandGroup>
                      {" "}
                      {filteredRooms.map((room) => (
                        <CommandItem
                          key={room.shortCode}
                          value={room.name}
                          onSelect={(currentValue) => {
                            const foundRoom = allRooms.find(
                              (r) =>
                                r.name.toLowerCase() ===
                                currentValue.toLowerCase(),
                            );
                            setSelectedRoom(foundRoom || null);
                            setComboboxOpen(false);
                            setSearchQuery("");
                          }}
                          className="font-sans aria-selected:bg-purple-600/30 aria-selected:text-white text-sm cursor-pointer"
                        >
                          {" "}
                          {room.name}{" "}
                          {room.capacity !== null && (
                            <span className="ml-2 text-xs text-gray-400">
                              {" "}
                              ({room.capacity}){" "}
                            </span>
                          )}{" "}
                        </CommandItem>
                      ))}{" "}
                    </CommandGroup>{" "}
                  </CommandList>
                </Command>
              )}
            </PopoverContent>
          </Popover>
        </motion.div>
        <motion.div
          variants={formItemVariant}
          initial="hidden"
          animate="visible"
          custom={1}
        >
          <label
            htmlFor="day"
            className="block text-sm font-medium text-gray-300 mb-1.5"
          >
            Day
          </label>
          <Select value={day} onValueChange={setDay}>
            <SelectTrigger
              id="day"
              className="w-full bg-black/20 border-white/20 text-white focus:ring-purple-500 focus:border-purple-500"
            >
              {" "}
              <SelectValue placeholder="Select a day" />{" "}
            </SelectTrigger>
            <SelectContent className="bg-black/80 backdrop-blur-md border-white/20 text-white">
              {" "}
              {daysOfWeek.map((d) => (
                <SelectItem
                  key={d}
                  value={d}
                  className="font-sans focus:bg-purple-600/30 focus:text-white"
                >
                  {d}
                </SelectItem>
              ))}{" "}
            </SelectContent>
          </Select>
        </motion.div>
        <motion.div
          variants={formItemVariant}
          initial="hidden"
          animate="visible"
          custom={2}
        >
          <label
            htmlFor="startTime"
            className="block text-sm font-medium text-gray-300 mb-1.5"
          >
            Start Time
          </label>
          <Select value={startTime} onValueChange={setStartTime}>
            <SelectTrigger
              id="startTime"
              className="w-full bg-black/20 border-white/20 text-white focus:ring-purple-500 focus:border-purple-500"
            >
              {" "}
              <SelectValue placeholder="Select start time" />{" "}
            </SelectTrigger>
            <SelectContent className="bg-black/80 backdrop-blur-md border-white/20 text-white max-h-60">
              {" "}
              {timeSlots.map((t) => (
                <SelectItem
                  key={`start-${t}`}
                  value={t}
                  className="font-sans focus:bg-purple-600/30 focus:text-white"
                >
                  {t}
                </SelectItem>
              ))}{" "}
            </SelectContent>
          </Select>
        </motion.div>
        <motion.div
          variants={formItemVariant}
          initial="hidden"
          animate="visible"
          custom={3}
        >
          <label
            htmlFor="endTime"
            className="block text-sm font-medium text-gray-300 mb-1.5"
          >
            End Time
          </label>
          <Select value={endTime} onValueChange={setEndTime}>
            <SelectTrigger
              id="endTime"
              className="w-full bg-black/20 border-white/20 text-white focus:ring-purple-500 focus:border-purple-500"
            >
              {" "}
              <SelectValue placeholder="Select end time" />{" "}
            </SelectTrigger>
            <SelectContent className="bg-black/80 backdrop-blur-md border-white/20 text-white max-h-60">
              {" "}
              {timeSlots.map((t) => (
                <SelectItem
                  key={`end-${t}`}
                  value={t}
                  className="font-sans focus:bg-purple-600/30 focus:text-white"
                >
                  {t}
                </SelectItem>
              ))}{" "}
            </SelectContent>
          </Select>
        </motion.div>
        <motion.div
          variants={formItemVariant}
          initial="hidden"
          animate="visible"
          custom={4}
          className="md:col-span-2 grid grid-cols-2 md:flex md:flex-wrap gap-3 mt-3"
        >
          <Button
            type="submit"
            disabled={isChecking || isLoadingRooms || !!roomFetchError}
            className="col-span-2 md:flex-1 bg-purple-600 hover:bg-purple-700 text-white rounded-full px-5 py-2.5 text-sm font-medium flex items-center justify-center gap-2 disabled:opacity-60"
          >
            {" "}
            {isChecking ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Search className="w-4 h-4" />
            )}{" "}
            Check Availability{" "}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={handleNow}
            className="md:w-auto rounded-full border-white/30 bg-white/10 hover:bg-white/20 px-5 py-2.5 text-sm font-medium flex items-center justify-center gap-2"
          >
            {" "}
            <Clock className="w-4 h-4" /> Now{" "}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={handleAllDay}
            className="md:w-auto rounded-full border-white/30 bg-white/10 hover:bg-white/20 px-5 py-2.5 text-sm font-medium flex items-center justify-center gap-2"
          >
            {" "}
            <Calendar className="w-4 h-4" /> All Day{" "}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={handleReset}
            className="text-red-400 hover:bg-red-950/50 hover:text-red-300 border-red-500/40 hover:border-red-500/60 bg-black/30 rounded-full px-5 py-2.5 text-sm font-medium flex items-center justify-center gap-2"
          >
            {" "}
            <X className="w-4 h-4" /> Reset{" "}
          </Button>
        </motion.div>
      </form>

      {/* --- Results Area --- */}
      <div className="mt-8">
        {formError && (
          <div key="form-error" className="mb-8">
            {/* --- MODIFICATION: Removed items-center, added self-start mt-1 to icon --- */}
            <Alert
              variant="destructive"
              className="bg-yellow-950/80 border-yellow-600/80 text-yellow-100"
            >
              {/* Icon size h-6 w-6, alignment self-start mt-1 */}
              <AlertCircle className="h-6 w-6 flex-shrink-0 self-start mt-1 text-yellow-300" />
              <div className="col-start-2">
                <AlertTitle className="text-lg font-semibold !text-yellow-100">
                  Input Error
                </AlertTitle>
                <AlertDescription className="text-yellow-100/90">
                  {formError}
                </AlertDescription>
              </div>
            </Alert>
            {/* --- END MODIFICATION --- */}
          </div>
        )}
        <AnimatePresence mode="wait">
          {checkResult && (
            <motion.div
              key="check-result"
              variants={resultVariant}
              initial="hidden"
              animate="visible"
              exit="exit"
            >
              <Alert
                variant={checkResult.available ? undefined : "destructive"}
                className={cn(
                  "transition-colors duration-300",
                  checkResult.available
                    ? alertVariants.success +
                        " flex items-center gap-3 !grid-cols-[auto_1fr]"
                    : alertVariants.destructive + " items-start", // Keep items-start for destructive
                )}
              >
                {checkResult.available ? (
                  <>
                    <CheckCircle className="h-5 w-5 flex-shrink-0 text-green-300" />
                    <span className="text-base text-green-100 mt-0.75">
                      {" "}
                      Room{" "}
                      <span className="font-semibold">
                        {checkResult.checked.roomName}
                      </span>{" "}
                      is available.{" "}
                    </span>
                  </>
                ) : (
                  <>
                    <CircleX className="h-6 w-6 flex-shrink-0 self-start mt-1 !text-red-300" />
                    <div className="col-start-2">
                      <span className="block text-base text-red-100 font-medium mt-0.5">
                        {" "}
                        Room{" "}
                        <span className="font-semibold">
                          {checkResult.checked.roomName}
                        </span>{" "}
                        is not available.{" "}
                      </span>
                      {Array.isArray(checkResult.classes) &&
                      checkResult.classes.length > 0 ? (
                        <div className="mt-2 border-t border-red-400/80 pt-2">
                          <ul className="space-y-2.5">
                            {checkResult.classes?.map((c, index) => (
                              <li key={index} className="text-red-200/90">
                                <div className="text-sm font-medium text-red-100">
                                  {" "}
                                  {c.subject} {c.classType} | {c.professor}{" "}
                                </div>
                                <div className="font-mono text-sm text-red-200/80">
                                  {" "}
                                  {c.startTime} - {c.endTime}{" "}
                                </div>
                              </li>
                            ))}
                          </ul>
                        </div>
                      ) : (
                        <AlertDescription className="text-sm text-red-200/90 pt-1">
                          {" "}
                          <span>
                            Between{" "}
                            <span className="font-semibold">
                              {checkResult.checked.startTime}
                            </span>{" "}
                            and{" "}
                            <span className="font-semibold">
                              {checkResult.checked.endTime}
                            </span>
                            .
                          </span>{" "}
                        </AlertDescription>
                      )}
                    </div>
                  </>
                )}
              </Alert>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}

</file>

<file path="src\pages\docs.tsx">
// src/pages/docs.tsx
import React from "react";
import Head from "next/head";
import Link from "next/link";
import { motion } from "framer-motion";
// Updated icons to match the consistent style
import {
  ListChecks,
  Cpu,
  Terminal,
  GitBranch,
  Mail,
  Info,
  Target,
  Settings,
} from "lucide-react";

export default function DocsPage() {
  const sectionVariant = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5, ease: "easeOut" },
    },
  };

  const listItemVariant = {
    hidden: { opacity: 0, x: -10 },
    visible: { opacity: 1, x: 0, transition: { duration: 0.3 } },
  };

  return (
    <div className="w-full max-w-4xl mx-auto px-4 py-6 pt-20 md:pt-24 flex-grow flex flex-col text-white">
      <Head>
        <title>Documentation - vacansee</title>
      </Head>

      <motion.div
        initial="hidden"
        animate="visible"
        variants={{ visible: { transition: { staggerChildren: 0.1 } } }}
        className="space-y-10" // Increased spacing between sections slightly
      >
        {/* --- Header Section (Slightly adjusted) --- */}
        <motion.div variants={sectionVariant} className="text-center mb-12">
          {" "}
          {/* Increased mb */}
          {/* Using Settings icon for general info */}
          <Settings className="mx-auto h-12 w-12 text-purple-400 mb-4" />
          <h1 className="text-4xl md:text-5xl font-bold text-white/95">
            vacansee Documentation
          </h1>
          <p className="text-lg text-white/70 mt-2">
            Overview, Features, and Setup Information.
          </p>
        </motion.div>

        {/* --- What is vacansee? Section (Styled Consistently) --- */}
        <motion.section variants={sectionVariant} className="space-y-4">
          <div className="flex items-center gap-3 border-b border-white/20 pb-2 mb-3">
            <Info className="h-6 w-6 text-purple-400 flex-shrink-0" />
            <h2 className="text-2xl font-semibold text-white/90">
              What is vacansee?
            </h2>
          </div>
          <p className="text-white/80 text-lg">
            vacansee is a modern web application designed to provide real-time
            information about room availability and scheduling within the
            university campus.
          </p>
          <p className="text-white/80 text-lg">
            It aims to replace legacy systems with a faster, more intuitive, and
            visually appealing interface.
          </p>
        </motion.section>

        {/* --- Our Goal Section (Styled Consistently) --- */}
        <motion.section variants={sectionVariant} className="space-y-4">
          <div className="flex items-center gap-3 border-b border-white/20 pb-2 mb-3">
            <Target className="h-6 w-6 text-purple-400 flex-shrink-0" />
            <h2 className="text-2xl font-semibold text-white/90">Our Goal</h2>
          </div>
          <p className="text-white/80 text-lg">
            The primary goal is to make finding an available room quick and
            effortless. Whether you need a quiet place to study, a room for a
            group meeting, or just want to see the campus schedule at a glance,
            vacansee provides the necessary tools.
          </p>
        </motion.section>

        {/* Features Section (Unchanged structure, content updated slightly) */}
        <motion.section variants={sectionVariant} className="space-y-4">
          <div className="flex items-center gap-3 border-b border-white/20 pb-2 mb-3">
            <ListChecks className="h-6 w-6 text-purple-400 flex-shrink-0" />
            <h2 className="text-2xl font-semibold text-white/90">Features</h2>
          </div>
          <ul className="list-disc list-inside space-y-2 text-white/80 pl-1 text-lg">
            <motion.li variants={listItemVariant}>
              Real-time &quot;Available Now&quot; Check
            </motion.li>
            <motion.li variants={listItemVariant}>
              &quot;Available Soon&quot; Projections (30m, 1h, etc.)
            </motion.li>
            <motion.li variants={listItemVariant}>
              Specific Time Slot Availability Check
            </motion.li>
            <motion.li variants={listItemVariant}>
              Room Details List (Name, Code, Capacity)
            </motion.li>
            <motion.li variants={listItemVariant}>
              Interactive Schedule Graph View
            </motion.li>
            <motion.li variants={listItemVariant}>
              Fuzzy Search for Rooms (Check & Custom Graph)
            </motion.li>
            <motion.li variants={listItemVariant}>
              Automatic Timetable Updates
            </motion.li>
            <motion.li variants={listItemVariant}>
              Mobile Responsive Design
            </motion.li>
            <motion.li variants={listItemVariant}>
              Secure Authentication (Google/GitHub)
            </motion.li>
          </ul>
        </motion.section>

        {/* Tech Stack Section (Unchanged structure) */}
        <motion.section variants={sectionVariant} className="space-y-4">
          <div className="flex items-center gap-3 border-b border-white/20 pb-2 mb-3">
            <Cpu className="h-6 w-6 text-purple-400 flex-shrink-0" />
            <h2 className="text-2xl font-semibold text-white/90">Tech Stack</h2>
          </div>
          <ul className="list-disc list-inside space-y-2 text-white/80 pl-1 text-lg">
            <motion.li variants={listItemVariant}>
              <strong>Frontend:</strong> Next.js (Pages Router), TypeScript,
              Tailwind CSS, Shadcn UI, Framer Motion
            </motion.li>
            <motion.li variants={listItemVariant}>
              <strong>Backend:</strong> Next.js API Routes, Prisma ORM
            </motion.li>
            <motion.li variants={listItemVariant}>
              <strong>Database:</strong> PostgreSQL (hosted on Supabase)
            </motion.li>
            <motion.li variants={listItemVariant}>
              <strong>Authentication:</strong> Supabase Auth (OAuth)
            </motion.li>
            <motion.li variants={listItemVariant}>
              <strong>Deployment & Analytics:</strong> Vercel
            </motion.li>
            <motion.li variants={listItemVariant}>
              <strong>Styling:</strong> Tailwind CSS, CSS Modules
            </motion.li>
            <motion.li variants={listItemVariant}>
              <strong>Data Handling:</strong> Python scripts (Scraping &
              Schedule Generation)
            </motion.li>
            <motion.li variants={listItemVariant}>
              <strong>Libraries:</strong> Fuse.js, Luxon, date-fns, Lucide Icons
            </motion.li>
          </ul>
        </motion.section>

        {/* Getting Started Section (Unchanged structure) */}
        <motion.section variants={sectionVariant} className="space-y-4">
          <div className="flex items-center gap-3 border-b border-white/20 pb-2 mb-3">
            <Terminal className="h-6 w-6 text-purple-400 flex-shrink-0" />
            <h2 className="text-2xl font-semibold text-white/90">
              Getting Started (Development)
            </h2>
          </div>
          <p className="text-white/80 text-lg">
            To set up the project locally:
          </p>
          <ol className="list-decimal list-inside space-y-2 text-white/80 pl-1 text-lg">
            <motion.li variants={listItemVariant}>
              Clone the repository from GitHub.
            </motion.li>
            <motion.li variants={listItemVariant}>
              Install dependencies using `npm install` or `yarn install`.
            </motion.li>
            <motion.li variants={listItemVariant}>
              Create a `.env` file with Supabase/Prisma connection details.
            </motion.li>
            <motion.li variants={listItemVariant}>
              Initialize the database schema: `npx prisma db push`.
            </motion.li>
            <motion.li variants={listItemVariant}>
              Run the development server: `npm run dev`.
            </motion.li>
          </ol>
          <p className="text-sm text-white/70">
            Refer to the project&apos;s{" "}
            <Link
              href="https://github.com/tahayparker/vacansee"
              target="_blank"
              rel="noopener noreferrer"
              className="text-purple-400 hover:underline"
            >
              README on GitHub
            </Link>{" "}
            for detailed setup.
          </p>
        </motion.section>

        {/* --- MODIFIED: Automatic Updates Section --- */}
        <motion.section variants={sectionVariant} className="space-y-4">
          <div className="flex items-center gap-3 border-b border-white/20 pb-2 mb-3">
            <GitBranch className="h-6 w-6 text-purple-400 flex-shrink-0" />
            <h2 className="text-2xl font-semibold text-white/90">
              Automatic Updates
            </h2>
          </div>
          <p className="text-white/80 text-lg">
            {/* Updated frequency */}
            The core timetable data powering the application is automatically
            updated every 4 hours via a GitHub Actions workflow. This ensures
            the schedule information remains reasonably current throughout the
            day.
          </p>
          <p className="text-sm text-white/70">
            The workflow involves scraping the source timetable, updating the
            database, generating static schedule files, and committing changes.
          </p>
        </motion.section>
        {/* --- END MODIFICATION --- */}

        {/* Contact Section (Unchanged structure) */}
        <motion.section variants={sectionVariant} className="space-y-4">
          <div className="flex items-center gap-3 border-b border-white/20 pb-2 mb-3">
            <Mail className="h-6 w-6 text-purple-400 flex-shrink-0" />
            <h2 className="text-2xl font-semibold text-white/90">Contact</h2>
          </div>
          <p className="text-white/80 text-lg">
            For inquiries about the project, please contact Taha Parker via his
            <Link
              href="https://tahayparker.vercel.app/contact"
              target="_blank"
              rel="noopener noreferrer"
              className="text-purple-400 hover:underline ml-1"
            >
              website
            </Link>
            .
          </p>
          <p className="text-white/80 text-lg">
            Project Link:{" "}
            <Link
              href="https://github.com/tahayparker/vacansee"
              target="_blank"
              rel="noopener noreferrer"
              className="text-purple-400 hover:underline"
            >
              https://github.com/tahayparker/vacansee
            </Link>
          </p>
        </motion.section>
      </motion.div>
    </div>
  );
}

</file>

<file path="src\pages\graph.tsx">
// src/pages/graph.tsx
import { useState, useEffect } from "react";
import Head from "next/head";
import { motion, AnimatePresence } from "framer-motion"; // Import motion and AnimatePresence
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { getDay } from "date-fns"; // Import getDay function
import { AlertCircle } from "lucide-react"; // Import for error display

// --- Data Structures ---
interface FrontendRoomData {
  room: string;
  availability: number[];
}
interface FrontendScheduleDay {
  day: string;
  rooms: FrontendRoomData[];
}
// --- End Data Structures ---

const daysOfWeek = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
]; // Your array starts Monday=0
const timeIntervals = [
  "08:30",
  "09:00",
  "09:30",
  "10:00",
  "10:30",
  "11:00",
  "11:30",
  "12:00",
  "12:30",
  "13:00",
  "13:30",
  "14:00",
  "14:30",
  "15:00",
  "15:30",
  "16:00",
  "16:30",
  "17:00",
  "17:30",
  "18:00",
  "18:30",
  "19:00",
  "19:30",
  "20:00",
  "20:30",
  "21:00",
  "21:30",
  "22:00",
];

// --- Helper to get adjusted day index (Monday=0) ---
function getAdjustedDayIndex(): number {
  const todayJsIndex = getDay(new Date()); // 0=Sunday, 1=Monday, ..., 6=Saturday
  // Adjust so Monday is 0, Tuesday is 1, ..., Sunday is 6
  return todayJsIndex === 0 ? 6 : todayJsIndex - 1;
}

// --- Main Page Component ---
export default function GraphPage() {
  const [scheduleData, setScheduleData] = useState<FrontendScheduleDay[]>([]);
  const [selectedDayIndex, setSelectedDayIndex] = useState<number>(() =>
    getAdjustedDayIndex(),
  );
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // --- Data Fetching ---
  useEffect(() => {
    setIsLoading(true);
    setError(null);
    fetch("/api/schedule") // Assumes API returns data matching FrontendScheduleDay[]
      .then((response) => {
        if (!response.ok) {
          // Try to parse error JSON, fallback to status text
          return response
            .json()
            .then((errData) => {
              throw new Error(
                errData.error || `HTTP error! status: ${response.status}`,
              );
            })
            .catch(() => {
              // Catch if response wasn't JSON
              throw new Error(`HTTP error! status: ${response.status}`);
            });
        }
        return response.json();
      })
      .then((data) => {
        console.log("Fetched schedule data:", data);
        // Basic validation
        if (!Array.isArray(data) || data.length !== daysOfWeek.length) {
          throw new Error("Invalid schedule data format received from API");
        }
        setScheduleData(data);
      })
      .catch((error) => {
        console.error("Error fetching schedule:", error);
        setError(error.message || "Failed to load schedule.");
      })
      .finally(() => {
        setIsLoading(false);
      });
  }, []); // Fetch only once on mount

  // --- Animation Variants ---
  const pageContainerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 0.4, ease: "easeOut" } },
  };

  const headerSectionVariants = {
    hidden: { opacity: 0, y: -20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { delay: 0.1, duration: 0.4, ease: "easeOut" },
    },
  };

  const tableContainerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { delay: 0.1, duration: 0.3, ease: "easeOut" },
    }, // Faster transition
    exit: { opacity: 0, transition: { duration: 0.2, ease: "easeIn" } },
  };

  const tableRowVariants = {
    hidden: { opacity: 0, x: -15 }, // Slightly less x offset
    visible: (i: number) => ({
      opacity: 1,
      x: 0,
      transition: {
        delay: i * 0.025, // Faster stagger delay
        duration: 0.3,
        ease: "easeOut",
      },
    }),
    exit: { opacity: 0, x: 15, transition: { duration: 0.15, ease: "easeIn" } }, // Faster exit
  };
  // --- End Animation Variants ---

  // --- Helper Functions ---
  const getCellColor = (avail: number) => {
    return avail === 1 ? "bg-green-500/70" : "bg-red-600/80";
  };
  const getRoomName = (roomIdentifier: string | null | undefined): string => {
    return roomIdentifier || ""; // Return empty string if null/undefined
  };

  const currentDayData = scheduleData[selectedDayIndex];

  // --- Render Page Content ---
  return (
    <motion.div
      variants={pageContainerVariants}
      initial="hidden"
      animate="visible"
      className="w-full max-w-full mx-auto px-0 py-6 pt-20 md:pt-24 flex flex-col h-screen"
    >
      <Head>
        <title>Room Availability Graph - vacansee</title>
      </Head>

      {/* Header Section (Title + Dropdown) with animation */}
      <motion.div
        variants={headerSectionVariants}
        // initial/animate controlled by parent motion.div
        className="px-4 md:px-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6 flex-shrink-0"
      >
        <h1 className="text-3xl md:text-4xl font-bold text-center md:text-left text-white flex-shrink-0">
          {" "}
          Room Availability Graph{" "}
        </h1>
        {/* Day Selector Dropdown */}
        <div className="flex items-center justify-center md:justify-end gap-2 flex-grow">
          <label
            htmlFor="day-select"
            className="text-sm font-medium text-gray-300 hidden sm:block"
          >
            Select Day:
          </label>
          <Select
            value={selectedDayIndex.toString()}
            onValueChange={(value) => setSelectedDayIndex(parseInt(value, 10))}
          >
            <SelectTrigger
              id="day-select"
              className="w-full sm:w-[180px] bg-black/20 border-white/20 text-white focus:ring-purple-500 focus:border-purple-500"
            >
              <SelectValue placeholder="Select a day" />
            </SelectTrigger>
            <SelectContent className="bg-black/80 backdrop-blur-md border-white/20 text-white">
              {daysOfWeek.map((day, index) => (
                <SelectItem
                  key={index}
                  value={index.toString()}
                  className="focus:bg-purple-600/30 focus:text-white"
                >
                  {" "}
                  {day}{" "}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </motion.div>

      {/* Schedule Table Area */}
      {/* Use AnimatePresence to handle transitions between states (loading/error/data/empty) */}
      <AnimatePresence mode="wait">
        {isLoading ? (
          <motion.div
            key="loader-graph"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex flex-grow items-center justify-center pt-10"
          >
            {" "}
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-400"></div>{" "}
          </motion.div>
        ) : error ? (
          <motion.div
            key="error-graph"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="w-full max-w-7xl mx-auto px-4 py-10 text-center pt-10"
          >
            <div className="bg-red-900/30 border border-red-500/50 rounded-lg p-6 text-red-300 max-w-md mx-auto flex flex-col items-center gap-4">
              <AlertCircle className="w-8 h-8 text-red-400" />
              <p className="font-medium">Error loading schedule:</p>
              <p className="text-sm">{error}</p>
              {/* Optionally add a retry button here if needed */}
            </div>
          </motion.div>
        ) : currentDayData?.rooms && currentDayData.rooms.length > 0 ? (
          // Container for the table with its own animation and key
          <motion.div
            key={`table-container-${selectedDayIndex}`} // Key changes when day changes
            variants={tableContainerVariants}
            initial="hidden"
            animate="visible"
            exit="exit" // Use defined exit variant
            className="relative flex-grow flex flex-col min-h-0 px-4 pb-4"
          >
            {/* Scrollable Container */}
            <div className="w-full overflow-auto flex-grow min-h-0 hide-scrollbar border-l border-t border-b border-white/15 rounded-lg shadow-lg bg-black/20 backdrop-blur-sm">
              <table className="border-separate border-spacing-0 w-full min-w-[1400px]">
                <thead className="sticky top-0 z-30">
                  <tr>
                    <th className="sticky left-0 top-0 bg-black text-white z-40 px-3 py-3 border-r border-b border-white/15 text-right text-sm font-semibold whitespace-nowrap">
                      {" "}
                      Room{" "}
                    </th>
                    {timeIntervals.map((time, index) => (
                      <th
                        key={time}
                        className={`sticky top-0 bg-black text-white z-30 px-3 py-3 border-b border-white/15 text-center text-xs md:text-sm font-medium whitespace-nowrap ${index === timeIntervals.length - 1 ? "" : "border-r border-white/15"}`}
                        style={{ minWidth: "65px" }}
                      >
                        {" "}
                        {time}{" "}
                      </th>
                    ))}
                  </tr>
                </thead>
                {/* AnimatePresence for rows within tbody */}
                <tbody className="relative z-0">
                  <AnimatePresence initial={false}>
                    {currentDayData.rooms
                      .sort((a, b) => {
                        const roomA = getRoomName(a?.room) ?? "";
                        const roomB = getRoomName(b?.room) ?? "";
                        return roomA.localeCompare(roomB);
                      })
                      .map((roomData, roomIndex) => {
                        if (!roomData || typeof roomData.room !== "string")
                          return null;
                        return (
                          // Animate each table row
                          <motion.tr
                            key={roomData.room} // Stable key based on room identifier
                            custom={roomIndex} // Pass index for stagger effect
                            variants={tableRowVariants}
                            initial="hidden"
                            animate="visible"
                            exit="exit"
                            layout="position" // Enable smooth layout animation for rows
                            className="group"
                          >
                            {/* Sticky Cell */}
                            <td
                              className={`sticky left-0 bg-black group-hover:bg-zinc-900 text-white z-20 px-3 py-1.5 border-r border-b border-white/10 text-right text-sm whitespace-nowrap transition-colors duration-100`}
                            >
                              {getRoomName(roomData.room)}
                            </td>
                            {/* Data Cells */}
                            {Array.isArray(roomData.availability) &&
                              roomData.availability.map((avail, idx) => (
                                <td
                                  key={idx}
                                  className={`relative z-0 border-b border-black/50 ${getCellColor(avail)} transition-colors duration-150 group-hover:brightness-110 ${idx === roomData.availability.length - 1 ? "" : "border-r border-black/50"}`}
                                  title={`${getRoomName(roomData.room)} - ${timeIntervals[idx]}`}
                                  style={{ minWidth: "65px" }}
                                >
                                  <div className="h-6"></div>
                                </td>
                              ))}
                          </motion.tr>
                        );
                      })}
                  </AnimatePresence>
                </tbody>
              </table>
            </div>
          </motion.div>
        ) : (
          // Case for no rooms data for the selected day
          <motion.p
            key="empty-graph"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="text-center text-gray-400 py-10 px-4"
          >
            No schedule data available for {daysOfWeek[selectedDayIndex]}.
          </motion.p>
        )}
      </AnimatePresence>
    </motion.div>
  );
}

</file>

<file path="src\pages\index.tsx">
// pages/index.tsx
import React from "react";
import { motion } from "framer-motion";
import { Search } from "lucide-react";
import Link from "next/link";

// Main Page Component - Returns ONLY content, no layout wrappers
export default function Home() {
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.15 } },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5, ease: "easeOut" },
    },
  };

  // Return the content block directly. _app.tsx handles centering.
  // Added py-10 for vertical spacing within the centered block
  return (
    <div className="relative text-center max-w-4xl py-10">
      {" "}
      {/* No flex, no grow, no centering. Added py-10 */}
      {/* Background Glow */}
      <motion.div
        className="absolute inset-0 -z-10 overflow-visible"
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.8, delay: 0.2, ease: "easeOut" }}
      >
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[300px] h-[300px] sm:w-[500px] sm:h-[500px] bg-purple-800/30 rounded-full blur-[100px] sm:blur-[150px]" />
      </motion.div>
      {/* Content */}
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <motion.h1
          variants={itemVariants}
          className="text-5xl sm:text-6xl md:text-7xl font-bold mb-5 tracking-tight leading-tight bg-gradient-to-r from-purple-400 via-pink-500 to-orange-400 bg-clip-text text-transparent"
        >
          Find Open Rooms <br className="sm:hidden" /> Across Campus, Instantly.
        </motion.h1>
        <motion.p
          variants={itemVariants}
          className="text-lg sm:text-xl text-white/80 mb-10 max-w-2xl mx-auto"
        >
          Stop wandering the halls. vacansee scans university schedules to show
          you available rooms right when you need them.
        </motion.p>
        <motion.div
          variants={itemVariants}
          className="flex gap-4 items-center justify-center flex-col sm:flex-row"
        >
          <Link
            className="group relative inline-flex items-center justify-center rounded-full border border-solid border-transparent transition-colors bg-purple-600 text-white gap-2 shadow-lg hover:bg-purple-700 hover:shadow-purple-500/30 font-medium text-sm sm:text-base h-11 sm:h-12 px-6 sm:px-8 w-full sm:w-auto focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-background"
            href="/check"
          >
            <Search className="h-5 w-5 transition-transform duration-200 group-hover:translate-x-1" />
            Check Availability Now
          </Link>
          <Link
            className="rounded-full border border-solid border-white/[.3] transition-colors flex items-center justify-center hover:bg-white/[.1] hover:border-white/[.5] font-medium text-sm sm:text-base h-11 sm:h-12 px-6 sm:px-8 w-full sm:w-auto text-white"
            href="/docs"
            target="_blank"
            rel="noopener noreferrer"
          >
            Learn More
          </Link>
        </motion.div>
      </motion.div>
    </div>
  );
}

</file>

<file path="src\pages\legal.tsx">
// src/pages/legal.tsx
import React from "react";
import Head from "next/head";
import { motion } from "framer-motion";
import { Scale } from "lucide-react";

export default function LegalPage() {
  const sectionVariant = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5, ease: "easeOut" },
    },
  };

  return (
    <div className="w-full max-w-4xl mx-auto px-4 py-6 pt-20 md:pt-24 flex-grow flex flex-col text-white">
      <Head>
        <title>Legal - Terms of Service - vacansee</title>
      </Head>

      <motion.div
        initial="hidden"
        animate="visible"
        variants={{ visible: { transition: { staggerChildren: 0.1 } } }}
        className="space-y-8"
      >
        <motion.div variants={sectionVariant} className="text-center mb-10">
          <Scale className="mx-auto h-12 w-12 text-purple-400 mb-4" />
          <h1 className="text-4xl md:text-5xl font-bold text-white/95">
            Terms of Service
          </h1>
          <p className="text-lg text-white/70 mt-2">
            Last Updated: 22 April 2025
          </p>
        </motion.div>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            1. Acceptance of Terms
          </h2>
          <p className="text-white/80">
            By accessing or using the vacansee platform (&quot;Service&quot;),
            you agree to be bound by these Terms of Service (&quot;Terms&quot;).
            If you do not agree with any part of the Terms, you must not use the
            Service.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            2. Service Description
          </h2>
          <p className="text-white/80">
            vacansee is a web-based tool that provides room availability and
            schedule information based on data obtained from university systems.
            We strive for accuracy, but we do not guarantee the completeness,
            accuracy, or timeliness of the data presented.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            3. User Conduct
          </h2>
          <p className="text-white/80">
            You agree to use the Service only for lawful purposes. You may not:
            <ul className="list-disc pl-5 mt-2">
              <li>
                Attempt to interfere with or compromise the Service&apos;s
                integrity or security.
              </li>
              <li>Scrape, copy, or redistribute data without permission.</li>
              <li>Use the Service to harass, abuse, or harm others.</li>
              <li>Gain unauthorized access to the Service or its systems.</li>
            </ul>
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            4. Authentication
          </h2>
          <p className="text-white/80">
            Certain features require authentication via Google or GitHub OAuth,
            managed securely through Supabase Auth. You are responsible for
            safeguarding your login credentials and agree not to share your
            access with others.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            5. Intellectual Property
          </h2>
          <p className="text-white/80">
            All content and functionality of the Service—including but not
            limited to code, design, text, graphics, and branding—are the
            exclusive property of Taha Parker and/or the vacansee team and are
            protected by applicable copyright and intellectual property laws.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            6. Disclaimers and Limitation of Liability
          </h2>
          <p className="text-white/80">
            The Service is provided on an &quot;AS IS&quot; and &quot;AS
            AVAILABLE&quot; basis. We make no warranties, express or implied,
            and disclaim all responsibility for:
            <ul className="list-disc pl-5 mt-2">
              <li>
                Any loss or damage resulting from reliance on data provided.
              </li>
              <li>Service interruptions, inaccuracies, or omissions.</li>
            </ul>
            Under no circumstances shall vacansee or its affiliates be liable
            for any indirect, incidental, or consequential damages arising from
            your use of the Service.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            7. Governing Law
          </h2>
          <p className="text-white/80">
            These Terms shall be governed and construed in accordance with the
            laws of the United Arab Emirates, without regard to its conflict of
            law principles.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            8. Changes to Terms
          </h2>
          <p className="text-white/80">
            We reserve the right to update or modify these Terms at any time.
            Any changes will be effective immediately upon posting. You are
            advised to review this page periodically. Continued use of the
            Service after any changes constitutes acceptance of the new Terms.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            9. Contact Us
          </h2>
          <p className="text-white/80">
            For any questions regarding these Terms, please contact us{" "}
            <a
              href="mailto:https://tahayparker.vercel.app/contact"
              className="underline text-purple-400"
            >
              here
            </a>
            .
          </p>
        </motion.section>
      </motion.div>
    </div>
  );
}

</file>

<file path="src\pages\privacy.tsx">
// src/pages/privacy.tsx
import React from "react";
import Head from "next/head";
import { motion } from "framer-motion";
import { ShieldCheck } from "lucide-react";

export default function PrivacyPage() {
  const sectionVariant = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5, ease: "easeOut" },
    },
  };

  return (
    <div className="w-full max-w-4xl mx-auto px-4 py-6 pt-20 md:pt-24 flex-grow flex flex-col text-white">
      <Head>
        <title>Privacy Policy - vacansee</title>
      </Head>

      <motion.div
        initial="hidden"
        animate="visible"
        variants={{ visible: { transition: { staggerChildren: 0.1 } } }}
        className="space-y-8"
      >
        <motion.div variants={sectionVariant} className="text-center mb-10">
          <ShieldCheck className="mx-auto h-12 w-12 text-purple-400 mb-4" />
          <h1 className="text-4xl md:text-5xl font-bold text-white/95">
            Privacy Policy
          </h1>
          <p className="text-lg text-white/70 mt-2">
            Last Updated: 22 April 2025
          </p>
        </motion.div>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            1. Introduction
          </h2>
          <p className="text-white/80">
            This Privacy Policy explains how vacansee (&quot;we&quot;,
            &quot;us&quot;, or &quot;our&quot;) collects, uses, and discloses
            information about you when you access or use our application (the
            &quot;Service&quot;).
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            2. Information We Collect
          </h2>
          <p className="text-white/80">
            We collect information in the following ways:
          </p>
          <ul className="list-disc list-inside space-y-1 text-white/80 pl-4">
            <li>
              <strong>Authentication Information:</strong> When you log in via
              Google or GitHub OAuth using Supabase Auth, we receive your name,
              email address, and profile picture URL. This information is used
              solely for identity verification within the Service.
            </li>
            <li>
              <strong>Usage Data:</strong> We collect data such as pages
              visited, time spent, and interactions to understand engagement and
              performance. This is collected via Vercel Analytics and Vercel
              Speed Insights.
            </li>
            <li>
              <strong>Cookies:</strong> Supabase uses HttpOnly cookies to manage
              login sessions securely. We do not use cookies for third-party
              tracking or advertising purposes.
            </li>
          </ul>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            3. How We Use Information
          </h2>
          <ul className="list-disc list-inside space-y-1 text-white/80 pl-4">
            <li>To authenticate users and manage session state.</li>
            <li>To provide, maintain, and improve the Service.</li>
            <li>
              To analyze how the Service is used and identify areas for
              enhancement.
            </li>
            <li>To protect against security threats and technical issues.</li>
          </ul>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            4. Sharing of Information
          </h2>
          <p className="text-white/80">
            We do not sell your personal information. We may share data only in
            these cases:
          </p>
          <ul className="list-disc list-inside space-y-1 text-white/80 pl-4">
            <li>
              <strong>Service Providers:</strong> We use Supabase (for
              authentication and database services) and Vercel (for hosting and
              analytics). These providers access only what&apos;s necessary to
              deliver their services.
            </li>
            <li>
              <strong>Legal Requirements:</strong> We may disclose data if
              required to comply with a legal obligation or protect the rights,
              safety, or property of users or the public.
            </li>
          </ul>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            5. Data Security
          </h2>
          <p className="text-white/80">
            We use Supabase’s managed security systems and Vercel’s secure
            hosting to protect your information. This includes encryption at
            rest and in transit, access control, and routine monitoring.
            However, no system can be 100% secure.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            6. Data Retention
          </h2>
          <p className="text-white/80">
            Authentication data is stored as long as your account is active.
            Analytics and logs may be retained in aggregate form to monitor
            performance and detect abuse.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            7. Your Rights
          </h2>
          <p className="text-white/80">
            Depending on your location, you may have rights such as access,
            correction, or deletion of your data. For most data, managing your
            Google or GitHub account is sufficient. You may also{" "}
            <a
              href="https://tahayparker.vercel.app/contact"
              className="underline text-purple-400"
            >
              contact us
            </a>{" "}
            directly for any requests related to your data stored within
            vacansee.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            8. Updates to This Policy
          </h2>
          <p className="text-white/80">
            This Privacy Policy may be updated periodically. Changes will be
            reflected on this page with the revised &quot;Last Updated&quot;
            date.
          </p>
        </motion.section>

        <motion.section variants={sectionVariant} className="space-y-3">
          <h2 className="text-2xl font-semibold text-white/90 border-b border-white/20 pb-2">
            9. Contact Us
          </h2>
          <p className="text-white/80">
            For questions or concerns about this Privacy Policy, please reach
            out at{" "}
            <a
              href="https://tahayparker.vercel.app/contact"
              className="underline text-purple-400"
            >
              https://tahayparker.vercel.app/contact
            </a>
            .
          </p>
        </motion.section>
      </motion.div>
    </div>
  );
}

</file>

<file path="src\pages\rooms.tsx">
// src/pages/rooms.tsx
import { useState, useEffect, useMemo } from "react";
import Head from "next/head";
import { motion, AnimatePresence } from "framer-motion";
import { Input } from "@/components/ui/input"; // Shadcn Input
import { AlertCircle, Search, ArrowUp, ArrowDown } from "lucide-react"; // Icons
import Fuse from "fuse.js";
import { cn } from "@/lib/utils"; // Utility for conditional classes

// --- Data Structures ---
interface RoomData {
  name: string;
  shortCode: string;
  capacity: number | null;
}

// Define valid sort keys
type SortKey = keyof RoomData;

// Define sort configuration state
interface SortConfig {
  key: SortKey | null;
  direction: "asc" | "desc";
}

// --- Main Page Component ---
export default function RoomDetailsPage() {
  // State
  const [allRooms, setAllRooms] = useState<RoomData[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [sortConfig, setSortConfig] = useState<SortConfig>({
    key: null,
    direction: "asc",
  });

  const isSearching = searchQuery.trim() !== "";

  // --- Fetch All Rooms ---
  useEffect(() => {
    const fetchRooms = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch("/api/rooms");
        if (!response.ok) {
          let errorMsg = `HTTP error! status: ${response.status}`;
          try {
            const errData = await response.json();
            errorMsg = errData.error || errorMsg;
          } catch {
            /* ignore */
          }
          throw new Error(errorMsg);
        }
        const data: RoomData[] = await response.json();
        setAllRooms(data);
      } catch (err: any) {
        console.error("Error fetching room details:", err);
        setError(err.message || "Failed to load room details.");
      } finally {
        setIsLoading(false);
      }
    };
    fetchRooms();
  }, []);

  // --- Fuzzy Search Logic ---
  const fuse = useMemo(() => {
    if (allRooms.length === 0) return null;
    return new Fuse(allRooms, {
      keys: [
        { name: "name", weight: 0.7 },
        { name: "shortCode", weight: 0.3 },
      ],
      threshold: 0.4,
      includeScore: false,
    });
  }, [allRooms]);

  // --- Combined Filter & Sort Logic ---
  const processedRooms = useMemo(() => {
    let results: RoomData[];
    if (!fuse || !isSearching) {
      results = [...allRooms];
    } else {
      results = fuse.search(searchQuery).map((result) => result.item);
    }

    results = results.filter(
      (room) =>
        !room.name.toLowerCase().includes("consultation") &&
        !room.name.toLowerCase().includes("online"),
    );

    if (sortConfig.key !== null && !isSearching) {
      const key = sortConfig.key;
      results.sort((a, b) => {
        let comparison = 0;
        if (key === "capacity") {
          const aCap = a.capacity === null ? -Infinity : a.capacity;
          const bCap = b.capacity === null ? -Infinity : b.capacity;
          comparison = aCap - bCap;
        } else if (key === "name" || key === "shortCode") {
          const aStr = a[key];
          const bStr = b[key];
          comparison = aStr.localeCompare(bStr, undefined, {
            numeric: true,
            sensitivity: "base",
          });
        }
        return sortConfig.direction === "asc" ? comparison : comparison * -1;
      });
    }
    return results;
  }, [searchQuery, isSearching, allRooms, fuse, sortConfig]);

  // --- Sorting Handler ---
  const handleSort = (key: SortKey) => {
    if (isSearching) return;
    let direction: "asc" | "desc" = "asc";
    if (sortConfig.key === key && sortConfig.direction === "asc") {
      direction = "desc";
    }
    setSortConfig({ key, direction });
  };

  // --- Get Sort Icon ---
  const getSortIcon = (key: SortKey) => {
    if (isSearching || sortConfig.key !== key) {
      return null;
    }
    if (sortConfig.direction === "asc") {
      return (
        <ArrowUp className="ml-1.5 h-4 w-4 text-purple-400 flex-shrink-0" />
      );
    }
    return (
      <ArrowDown className="ml-1.5 h-4 w-4 text-purple-400 flex-shrink-0" />
    );
  };

  // --- Animation Variants ---
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.03, delayChildren: 0.1 },
    },
  };
  const itemVariant = {
    hidden: { opacity: 0, y: 10 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.3, ease: "easeOut" },
    },
    exit: { opacity: 0, y: -10, transition: { duration: 0.2 } },
  };
  const pageHeaderVariant = {
    hidden: { opacity: 0, y: -20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { delay: 0.1, duration: 0.4, ease: "easeOut" },
    },
  };
  const searchBarVariant = {
    hidden: { opacity: 0, y: -10 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { delay: 0.2, duration: 0.4, ease: "easeOut" },
    },
  };
  const tableContainerVariant = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { delay: 0.3, duration: 0.5, ease: "easeOut" },
    },
  };

  // --- Render Page ---
  return (
    <div className="w-full max-w-5xl mx-auto px-4 py-6 pt-20 md:pt-24 flex flex-col min-h-screen items-center">
      <Head>
        <title>Room Details - vacansee</title>
      </Head>

      <motion.div
        variants={pageHeaderVariant}
        initial="hidden"
        animate="visible"
        className="flex-shrink-0"
      >
        <h1 className="text-3xl md:text-4xl font-bold mb-8 text-center text-white">
          {" "}
          Room Details{" "}
        </h1>
      </motion.div>

      <motion.div
        variants={searchBarVariant}
        initial="hidden"
        animate="visible"
        className="relative mb-6 flex-shrink-0 w-full max-w-4xl"
      >
        <Search className="absolute left-3.5 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400 pointer-events-none" />
        <Input
          type="text"
          placeholder="Search by room name or code..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full pl-10 pr-4 h-11 py-2.5 bg-black/30 border-white/25 text-white placeholder:text-gray-500 focus:ring-1 focus:ring-purple-500 focus:border-purple-500 rounded-full"
        />
      </motion.div>

      <motion.div
        variants={tableContainerVariant}
        initial="hidden"
        animate="visible"
        className="border border-white/20 rounded-lg shadow-lg overflow-hidden bg-black/60 backdrop-blur-md flex flex-col min-h-0 w-full max-w-4xl mb-auto"
      >
        <div className="overflow-y-auto hide-scrollbar max-h-[65vh]">
          <table className="w-full border-collapse table-fixed">
            <thead className="sticky top-0 z-10 bg-gradient-to-b from-black/90 via-black/80 to-black/70 backdrop-blur-lg">
              <tr>
                {/* Room Name Header - Adjusted Width & Border */}
                <th
                  className={cn(
                    // Wider on mobile (70%), narrower on desktop (50%)
                    "group w-[70%] md:w-[50%] px-6 py-3 text-left text-base font-semibold text-white border-b border-white/20",
                    // Border right only on desktop (when short code is visible)
                    "md:border-r",
                    !isSearching && "cursor-pointer",
                    isSearching && "cursor-default",
                  )}
                  onClick={() => handleSort("name")}
                  aria-sort={
                    isSearching || sortConfig.key !== "name"
                      ? "none"
                      : sortConfig.direction === "asc"
                        ? "ascending"
                        : "descending"
                  }
                >
                  <div className="flex items-center">
                    {" "}
                    Room Name {getSortIcon("name")}{" "}
                  </div>
                </th>
                {/* Short Code Header - Hidden on Mobile */}
                <th
                  className={cn(
                    // Hidden by default, shown as table-cell on desktop
                    "hidden md:table-cell",
                    // Takes 25% width only on desktop
                    "md:w-[25%]",
                    "group px-6 py-3 text-center text-base font-semibold text-white border-b border-r border-white/20",
                    !isSearching && "cursor-pointer",
                    isSearching && "cursor-default",
                  )}
                  onClick={() => handleSort("shortCode")}
                  aria-sort={
                    isSearching || sortConfig.key !== "shortCode"
                      ? "none"
                      : sortConfig.direction === "asc"
                        ? "ascending"
                        : "descending"
                  }
                >
                  {/* Also hide inner div content on mobile */}
                  <div className="hidden md:flex items-center justify-center">
                    {" "}
                    Short Code {getSortIcon("shortCode")}{" "}
                  </div>
                </th>
                {/* Capacity Header - Adjusted Width */}
                <th
                  className={cn(
                    // Wider on mobile (30%), narrower on desktop (25%)
                    "group w-[30%] md:w-[25%]",
                    "px-6 py-3 text-center text-base font-semibold text-white border-b border-white/20", // No right border ever
                    !isSearching && "cursor-pointer",
                    isSearching && "cursor-default",
                  )}
                  onClick={() => handleSort("capacity")}
                  aria-sort={
                    isSearching || sortConfig.key !== "capacity"
                      ? "none"
                      : sortConfig.direction === "asc"
                        ? "ascending"
                        : "descending"
                  }
                >
                  <div className="flex items-center justify-center">
                    {" "}
                    Capacity {getSortIcon("capacity")}{" "}
                  </div>
                </th>
              </tr>
            </thead>
            <motion.tbody
              variants={containerVariants}
              initial="hidden"
              animate="visible"
              className="divide-y divide-white/15"
            >
              {/* Loading State - Responsive ColSpan */}
              {isLoading && (
                <>
                  <tr className="md:hidden">
                    {" "}
                    {/* Mobile view */}
                    <td
                      colSpan={2}
                      className="h-40 text-center text-gray-400 py-4 px-6 border-b border-white/15"
                    >
                      {" "}
                      <div className="flex justify-center items-center">
                        {" "}
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400"></div>{" "}
                      </div>{" "}
                    </td>
                  </tr>
                  <tr className="hidden md:table-row">
                    {" "}
                    {/* Desktop view */}
                    <td
                      colSpan={3}
                      className="h-40 text-center text-gray-400 py-4 px-6 border-b border-white/15"
                    >
                      {" "}
                      <div className="flex justify-center items-center">
                        {" "}
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400"></div>{" "}
                      </div>{" "}
                    </td>
                  </tr>
                </>
              )}
              {/* Error State - Responsive ColSpan */}
              {!isLoading && error && (
                <>
                  <tr className="md:hidden">
                    {" "}
                    {/* Mobile view */}
                    <td
                      colSpan={2}
                      className="h-24 text-center p-4 py-4 px-6 border-b border-white/15"
                    >
                      {" "}
                      <div className="flex items-center justify-center text-red-400 gap-2 bg-red-950/40 border border-red-500/50 p-3 rounded-md max-w-md mx-auto">
                        {" "}
                        <AlertCircle className="w-5 h-5" />{" "}
                        <span>Error: {error}</span>{" "}
                      </div>{" "}
                    </td>
                  </tr>
                  <tr className="hidden md:table-row">
                    {" "}
                    {/* Desktop view */}
                    <td
                      colSpan={3}
                      className="h-24 text-center p-4 py-4 px-6 border-b border-white/15"
                    >
                      {" "}
                      <div className="flex items-center justify-center text-red-400 gap-2 bg-red-950/40 border border-red-500/50 p-3 rounded-md max-w-md mx-auto">
                        {" "}
                        <AlertCircle className="w-5 h-5" />{" "}
                        <span>Error: {error}</span>{" "}
                      </div>{" "}
                    </td>
                  </tr>
                </>
              )}
              {/* No Results State - Responsive ColSpan */}
              {!isLoading && !error && processedRooms.length === 0 && (
                <>
                  <tr className="md:hidden">
                    {" "}
                    {/* Mobile view */}
                    <td
                      colSpan={2}
                      className="h-24 text-center text-gray-400 italic py-4 px-6 border-b border-white/15"
                    >
                      {" "}
                      {isSearching
                        ? "No rooms found matching your search."
                        : "No room data available."}{" "}
                    </td>
                  </tr>
                  <tr className="hidden md:table-row">
                    {" "}
                    {/* Desktop view */}
                    <td
                      colSpan={3}
                      className="h-24 text-center text-gray-400 italic py-4 px-6 border-b border-white/15"
                    >
                      {" "}
                      {isSearching
                        ? "No rooms found matching your search."
                        : "No room data available."}{" "}
                    </td>
                  </tr>
                </>
              )}
              {/* Data Rows */}
              {!isLoading && !error && processedRooms.length > 0 && (
                <AnimatePresence>
                  {processedRooms.map((room) => (
                    <motion.tr
                      key={room.shortCode}
                      variants={itemVariant}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                      layout
                      className="hover:bg-white/10 transition-colors duration-150"
                    >
                      {/* Room Name Cell - Responsive Border */}
                      <td
                        className={cn(
                          "font-medium text-white py-4 px-6 border-b border-white/15 text-left",
                          "md:border-r", // Border right only on desktop
                        )}
                      >
                        {room.name}
                      </td>
                      {/* Short Code Cell - Hidden on Mobile */}
                      <td className="hidden md:table-cell text-gray-300 py-4 px-6 border-b border-r border-white/15 text-center">
                        {room.shortCode}
                      </td>
                      {/* Capacity Cell */}
                      <td className="text-gray-300 py-4 px-6 border-b border-white/15 text-center">
                        {room.capacity !== null ? (
                          room.capacity
                        ) : (
                          <span className="text-gray-500">--</span>
                        )}
                      </td>
                    </motion.tr>
                  ))}
                </AnimatePresence>
              )}
              {/* "End of results" Indicator - Responsive ColSpan */}
              {!isLoading &&
                !error &&
                processedRooms.length > 0 &&
                isSearching && (
                  <>
                    <tr className="md:hidden bg-transparent">
                      {" "}
                      {/* Mobile view */}
                      <td
                        colSpan={2}
                        className="text-center text-xs text-gray-400 py-3 px-6 border-t border-white/15"
                      >
                        {" "}
                        End of search results{" "}
                      </td>
                    </tr>
                    <tr className="hidden md:table-row bg-transparent">
                      {" "}
                      {/* Desktop view */}
                      <td
                        colSpan={3}
                        className="text-center text-xs text-gray-400 py-3 px-6 border-t border-white/15"
                      >
                        {" "}
                        End of search results{" "}
                      </td>
                    </tr>
                  </>
                )}
            </motion.tbody>
          </table>
        </div>
      </motion.div>
    </div>
  );
}

</file>

<file path="src\pages\test.tsx">
import GradientBackground from "@/components/GradientBackground"; // Ensure this path is correct

// --- Test Page Component ---
export default function TestPage() {
  return (
    // Apply fonts and ensure GradientBackground is rendered behind content
    <div className={`relative min-h-screen`}>
      <GradientBackground /> {/* Render the gradient background */}
      {/* Centering container for the content */}
      <div className="relative z-10 grid min-h-screen place-items-center p-8">
        {/* Content Area */}
        <div className="w-full max-w-2xl space-y-6 text-white">
          {" "}
          {/* Max width for readability */}
          {/* Page Title */}
          <h1 className="text-4xl font-bold tracking-tight text-center">
            {" "}
            {/* Centered Title */}
            Test
          </h1>
          {/* Body Text */}
          <div className="space-y-4 text-lg text-gray-200">
            {" "}
            {/* Lighter text color for paragraphs */}
            <p>
              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do
              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
              enim ad minim veniam, quis nostrud exercitation ullamco laboris
              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
              reprehenderit in voluptate velit esse cillum dolore eu fugiat
              nulla pariatur. Excepteur sint occaecat cupidatat non proident,
              sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
            <p>
              Sed ut perspiciatis unde omnis iste natus error sit voluptatem
              accusantium doloremque laudantium, totam rem aperiam, eaque ipsa
              quae ab illo inventore veritatis et quasi architecto beatae vitae
              dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit
              aspernatur aut odit aut fugit, sed quia consequuntur magni dolores
              eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam
              est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci
              velit.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

</file>

<file path="src\pages\unauthorized.tsx">
// src/pages/unauthorized.tsx
// No longer needs useState or useEffect for verification
import GradientBackground from "@/components/GradientBackground";
import { Button } from "@/components/ui/button";
import { getSupabaseBrowserClient } from "@/lib/supabase/client";
import { useRouter } from "next/router";
import { LogOut, AlertTriangle } from "lucide-react"; // Added AlertTriangle
import { useState } from "react";

export default function UnauthorizedPage() {
  const supabase = getSupabaseBrowserClient();
  const router = useRouter();
  // Removed isLoading and isVerifiedUnauthorized states

  // Removed the entire useEffect hook for verification

  const handleSignOut = async () => {
    // Keep the existing sign out logic
    setIsLoading(true); // Optional: Add loading state for sign out action
    console.log("Signing out...");
    const { error } = await supabase.auth.signOut();
    if (error) {
      console.error("Error signing out:", error);
      // Maybe show an error message to the user here?
      setIsLoading(false);
    } else {
      console.log("Sign out successful, redirecting to /");
      router.push("/"); // Redirect to home page after sign out
    }
  };

  // Optional loading state for sign out button
  const [isSignOutLoading, setIsLoading] = useState(false);

  // --- Render Static Content ---
  return (
    <div className="relative min-h-screen">
      <GradientBackground />
      <div className="relative z-10 grid min-h-screen place-items-center p-4 text-center text-white">
        {/* --- Display Static "Signups Disabled" Message --- */}
        <div className="space-y-8 rounded-xl border border-red-500/60 bg-red-950/30 p-8 shadow-lg backdrop-blur-md max-w-lg">
          <AlertTriangle className="mx-auto h-12 w-12 text-red-400" />
          <h1 className="text-3xl font-bold tracking-tight text-red-200">
            Unauthorized Access
          </h1>
          <p className="text-md text-red-100/90">
            Your account is not authorized to acccess vacansee.
          </p>
          <p className="text-sm text-red-100/80">
            If you have been given access, please try using the account you
            signed up with.
            <br />
            <br />
            If you believe this is an error, please contact the administrator
            for assistance.
          </p>
          <div className="flex justify-center pt-4">
            <Button
              variant="outline"
              onClick={handleSignOut}
              disabled={isSignOutLoading} // Disable while signing out
              className="rounded-full border-white/40 bg-transparent px-6 py-2.5 text-sm font-medium text-white shadow-sm hover:bg-white/10 hover:border-white/60 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white/50 flex items-center gap-2 disabled:opacity-60"
            >
              {isSignOutLoading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              ) : (
                <LogOut className="h-4 w-4" />
              )}
              Go Home
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

</file>

<file path="src\pages\_app.tsx">
// src/pages/_app.tsx
import "@/styles/globals.css";
import type { AppProps } from "next/app";
import { Montserrat } from "next/font/google";
import GradientBackground from "@/components/GradientBackground";
import SiteHeader from "@/components/SiteHeader";
import SiteFooter from "@/components/SiteFooter";
import { useEffect, useState, useRef } from "react";
import { getSupabaseBrowserClient } from "@/lib/supabase/client";
import { useRouter } from "next/router";
import type { Session } from "@supabase/supabase-js"; // Re-added Session type import
import { cn } from "@/lib/utils";
import { PUBLIC_PATHS } from "@/lib/paths";
import { Analytics } from "@vercel/analytics/react";
import { SpeedInsights } from "@vercel/speed-insights/next";

// --- Font Setup ---
const montserrat = Montserrat({
  subsets: ["latin"],
  variable: "--font-montserrat",
  weight: ["300", "400", "500", "600", "700", "800"],
});

// --- Helper to determine if a path is considered protected Client-Side ---
function isProtectedClientSide(pathname: string): boolean {
  if (
    pathname.startsWith("/_next/") ||
    pathname.startsWith("/api/_next/") ||
    pathname.includes("/.") ||
    pathname.endsWith(".ico") ||
    pathname.endsWith(".png") ||
    pathname.endsWith(".jpg") ||
    pathname.endsWith(".jpeg") ||
    pathname.endsWith(".svg") ||
    pathname.endsWith(".css") ||
    pathname.endsWith(".js")
  ) {
    return false;
  }
  return !PUBLIC_PATHS.includes(pathname);
}

export default function App({ Component, pageProps }: AppProps) {
  const supabase = getSupabaseBrowserClient();
  const router = useRouter();
  const [sessionLoading, setSessionLoading] = useState(true);
  const initialCheckDone = useRef(false);

  // --- Effect for Handling Auth State Changes ---
  useEffect(() => {
    let isMounted = true;

    // CORRECTED: Use the specific 'Session | null' type
    const handleSessionUpdate = (session: Session | null) => {
      if (!isMounted) return;
      // Log simplified message or user ID if session exists
      console.log(
        "[_app Client] Session update received:",
        session ? `User ID: ${session.user.id}` : "No session",
      );
      if (!initialCheckDone.current) {
        setSessionLoading(false);
        initialCheckDone.current = true;
      }
    };

    // Perform initial check
    supabase.auth
      .getSession()
      .then(({ data: { session } }) => {
        if (isMounted) {
          console.log(
            "[_app Client] Initial getSession result:",
            session ? `User ID: ${session.user.id}` : "No session",
          );
          handleSessionUpdate(session);
        }
      })
      .catch((error) => {
        console.error("[_app Client] Initial getSession error:", error);
        if (isMounted) {
          handleSessionUpdate(null); // Explicitly handle error case by passing null
          // Ensure loading is set to false even on initial error
          if (!initialCheckDone.current) {
            setSessionLoading(false);
            initialCheckDone.current = true;
          }
        }
      });

    // Listen for subsequent changes
    const { data: authListener } = supabase.auth.onAuthStateChange(
      (event, session) => {
        if (isMounted) {
          console.log(`[_app Client] onAuthStateChange event: ${event}`);
          handleSessionUpdate(session);
          // Ensure loading is false if we get an event after initial load
          if (initialCheckDone.current && sessionLoading) {
            setSessionLoading(false);
          }
        }
      },
    );

    return () => {
      isMounted = false;
      authListener?.subscription.unsubscribe();
      console.log("[_app Client] Unsubscribed from auth state changes.");
    };
    // Keep sessionLoading dependency as advised by exhaustive-deps
  }, [supabase, sessionLoading]);

  // --- Loading/Rendering Logic ---
  const isClientSideProtected = isProtectedClientSide(router.pathname);
  const showLoader = sessionLoading && isClientSideProtected;

  if (showLoader) {
    return (
      <div
        className={`${montserrat.className} bg-background text-foreground min-h-screen flex flex-col relative`}
      >
        <GradientBackground />
        <div className="flex flex-grow items-center justify-center z-10">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white/50"></div>
        </div>
      </div>
    );
  }

  // Render the component
  return (
    <div
      className={`${montserrat.className} bg-background text-foreground min-h-screen flex flex-col relative`}
    >
      <GradientBackground />
      <SiteHeader />
      <main
        className={cn(
          "flex flex-col flex-grow items-center z-10 w-full px-4 sm:px-8",
          router.pathname === "/"
            ? "md:justify-center pt-16 md:pt-0"
            : "justify-center",
        )}
      >
        <Component {...pageProps} />
      </main>
      <SiteFooter />
      <Analytics />
      <SpeedInsights />
    </div>
  );
}

</file>

<file path="src\pages\_document.tsx">
// pages/_document.tsx
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      {/* Apply inline style for initial dark background */}
      <body style={{ backgroundColor: "#0a0a0a" }}>
        {" "}
        {/* Use your dark theme's background hex */}
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

</file>

<file path="src\styles\globals.css">
/* src/styles/globals.css */
@import "tailwindcss";
@config "../../tailwind.config.js"; /* Ensure this path is correct */

@layer base {
  :root {
    /* Using HSL format (e.g., "240 10% 3.9%") */
    /* --- ADJUST THESE HSL VALUES FOR YOUR THEME --- */
    --background: 240 10% 3.9%; /* Default background */
    --foreground: 0 0% 98%; /* Default text */

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;

    --primary: 0 0% 98%; /* Primary buttons, accents */
    --primary-foreground: 240 5.9% 10%; /* Text on primary elements */

    --secondary: 240 3.7% 15.9%; /* Secondary buttons */
    --secondary-foreground: 0 0% 98%; /* Text on secondary elements */

    --accent: 240 3.7% 15.9%; /* Hover states, subtle highlights */
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%; /* Destructive actions (e.g., delete) */
    --destructive-foreground: 0 0% 98%; /* Text on destructive elements */

    --ring: 240 4.9% 83.9%; /* Focus rings */

    --radius: 0.5rem; /* Default border radius */
  }

  .dark {
    /* Define variables for dark mode - often similar if base IS dark */
    /* You can override specific ones if needed */
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --ring: 240 4.9% 83.9%;
  }

  /* Apply minimal base resets */
  * {
    @apply border-border; /* Sets default border color */
    box-sizing: border-box; /* Recommended reset */
  }

  html,
  body {
    height: 100%; /* Ensure body can fill height */
  }

  body {
    /* Font applied via font-sans in _app.tsx which reads from theme config */
    /* Background/color applied via utilities in _app.tsx */
    @apply antialiased;
    overflow-x: hidden;
    font-family:
      var(--font-montserrat), ui-sans-serif, system-ui, sans-serif,
      "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol",
      "Noto Color Emoji";
  }

  /* --- ADD THIS RULE --- */
  button,
  input,
  optgroup, /* Added optgroup */
  select,
  textarea {
    font-family: inherit; /* Force form elements to inherit the font */
    font-feature-settings: inherit; /* Inherit font features */
    font-variation-settings: inherit; /* Inherit font variations */
    font-size: 100%; /* Reset font size for consistency */
    font-weight: inherit; /* Inherit font weight */
    line-height: inherit; /* Inherit line height */
    color: inherit; /* Inherit text color */
    margin: 0; /* Reset margin */
    padding: 0; /* Reset padding */
  }
  /* --- End Added Rule --- */

  /* --- Targeted font overrides for Shadcn Select and Command Items --- */
  /* Target SelectItem directly */
  .select-item-root, /* Assuming a data-slot or class on SelectItem root */
  [data-slot='select-item'] {
    /* More robust selector using data-slot */
    font-family:
      var(--font-montserrat), sans-serif !important; /* !important for higher specificity */
  }

  /* Target CommandItem directly */
  .command-item-root, /* Assuming a data-slot or class on CommandItem root */
  [data-slot='command-item'] {
    /* More robust selector using data-slot */
    font-family:
      var(--font-montserrat), sans-serif !important; /* !important for higher specificity */
  }
  /* --- End Targeted font overrides --- */

  /* --- Global Scrollbar Hiding --- */
  body::-webkit-scrollbar,
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }
  body,
  .hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  /* --- End Global Scrollbar Hiding --- */
}

/* Keep other layers */
@layer components {
}
@layer utilities {
}

</file>

<file path="src\types\supabase.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export type Database = {
  public: {
    Tables: {
      _prisma_migrations: {
        Row: {
          applied_steps_count: number;
          checksum: string;
          finished_at: string | null;
          id: string;
          logs: string | null;
          migration_name: string;
          rolled_back_at: string | null;
          started_at: string;
        };
        Insert: {
          applied_steps_count?: number;
          checksum: string;
          finished_at?: string | null;
          id: string;
          logs?: string | null;
          migration_name: string;
          rolled_back_at?: string | null;
          started_at?: string;
        };
        Update: {
          applied_steps_count?: number;
          checksum?: string;
          finished_at?: string | null;
          id?: string;
          logs?: string | null;
          migration_name?: string;
          rolled_back_at?: string | null;
          started_at?: string;
        };
        Relationships: [];
      };
      allowed_emails: {
        Row: {
          created_at: string;
          email: string;
        };
        Insert: {
          created_at?: string;
          email: string;
        };
        Update: {
          created_at?: string;
          email?: string;
        };
        Relationships: [];
      };
      Rooms: {
        Row: {
          Capacity: number | null;
          id: number;
          Name: string;
          ShortCode: string;
        };
        Insert: {
          Capacity?: number | null;
          id?: number;
          Name: string;
          ShortCode: string;
        };
        Update: {
          Capacity?: number | null;
          id?: number;
          Name?: string;
          ShortCode?: string;
        };
        Relationships: [];
      };
      SignInLog: {
        Row: {
          authProvider: Database["public"]["Enums"]["AuthProvider"];
          email: string;
          id: string;
          name: string | null;
          success: boolean;
          timestamp: string;
        };
        Insert: {
          authProvider: Database["public"]["Enums"]["AuthProvider"];
          email: string;
          id: string;
          name?: string | null;
          success: boolean;
          timestamp: string;
        };
        Update: {
          authProvider?: Database["public"]["Enums"]["AuthProvider"];
          email?: string;
          id?: string;
          name?: string | null;
          success?: boolean;
          timestamp?: string;
        };
        Relationships: [];
      };
      Teacher: {
        Row: {
          Email: string;
          id: number;
          Name: string;
          Phone: string;
        };
        Insert: {
          Email: string;
          id?: number;
          Name: string;
          Phone: string;
        };
        Update: {
          Email?: string;
          id?: number;
          Name?: string;
          Phone?: string;
        };
        Relationships: [];
      };
      Timings: {
        Row: {
          Class: string;
          Day: string;
          EndTime: string;
          id: number;
          Room: string;
          StartTime: string;
          SubCode: string;
          Teacher: string;
        };
        Insert: {
          Class: string;
          Day: string;
          EndTime: string;
          id?: number;
          Room: string;
          StartTime: string;
          SubCode: string;
          Teacher: string;
        };
        Update: {
          Class?: string;
          Day?: string;
          EndTime?: string;
          id?: number;
          Room?: string;
          StartTime?: string;
          SubCode?: string;
          Teacher?: string;
        };
        Relationships: [];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      AuthProvider: "GOOGLE" | "GITHUB" | "UNDETERMINED";
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

type DefaultSchema = Database[Extract<keyof Database, "public">];

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never;

export const Constants = {
  public: {
    Enums: {
      AuthProvider: ["GOOGLE", "GITHUB", "UNDETERMINED"],
    },
  },
} as const;

</file>

<file path="tailwind.config.js">
// tailwind.config.js
const { fontFamily } = require("tailwindcss/defaultTheme");

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      // --- FONT FAMILY CONFIGURATION ---
      // We are no longer directly using font-sans utility via variable
      // but keeping it defined doesn't hurt for potential future use
      // or if other components still rely on it indirectly.
      // You could remove the reference to var(--font-montserrat) if desired.
      fontFamily: {
        sans: ["var(--font-montserrat)", ...fontFamily.sans],
      },
      // --- Colors and other extensions remain the same ---
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      // --- END COLOR MAPPING ---
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "caret-blink": {
          "0%,70%,100%": { opacity: "1" },
          "20%,50%": { opacity: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "caret-blink": "caret-blink 1.2s ease-out infinite",
      },
    },
  },
  plugins: [require("tailwindcss-animate")], // Keep this plugin
};

</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

</file>

</source>